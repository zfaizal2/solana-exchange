{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0","program":"/home/zfaizal/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","opentelemetry","--edition=2018","/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"async-trait\"","--cfg","feature=\"percent-encoding\"","--cfg","feature=\"pin-project\"","--cfg","feature=\"rand\"","--cfg","feature=\"trace\"","-C","metadata=012c7d2865296ecd","-C","extra-filename=-012c7d2865296ecd","--out-dir","/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps","-L","dependency=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps","--extern","async_trait=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libasync_trait-9d5133eeaaeca888.so","--extern","futures=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libfutures-d0c9249f4e5f48bd.rmeta","--extern","lazy_static=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/liblazy_static-00cd05e918550129.rmeta","--extern","percent_encoding=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libpercent_encoding-cdbb2da8a4263ae5.rmeta","--extern","pin_project=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libpin_project-0ca5771f3878ba8f.rmeta","--extern","rand=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/librand-2e001405af96c5f6.rmeta","--extern","thiserror=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libthiserror-c9de706e412fcd8c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/zfaizal/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libopentelemetry-012c7d2865296ecd.rmeta"},"prelude":{"crate_id":{"name":"opentelemetry","disambiguator":[8969768251053233917,0]},"crate_root":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src","external_crates":[{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6651269719699919063,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","num":2,"id":{"name":"core","disambiguator":[5314938362831806024,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3192916554191843392,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10801551532821350179,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17712696282143808288,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17759323731357012152,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14544669950029098253,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7140361926623002963,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7912653715525474172,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9995494595343579593,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7588845087494698681,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[1970575902162233525,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[17110431802946872365,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[13012552651923263309,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[12999591111048205696,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[5038749270737079727,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[4159898706074811085,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[8750230721255451893,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1956939412839304600,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","num":20,"id":{"name":"async_trait","disambiguator":[18293269867069617882,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","num":21,"id":{"name":"percent_encoding","disambiguator":[16519944498376996947,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","num":22,"id":{"name":"rand","disambiguator":[12252018600484131900,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","num":23,"id":{"name":"rand_core","disambiguator":[3192443078635754823,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","num":24,"id":{"name":"getrandom","disambiguator":[6561512141613163802,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","num":25,"id":{"name":"cfg_if","disambiguator":[11900951980957517807,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","num":26,"id":{"name":"libc","disambiguator":[1623297377879856316,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","num":27,"id":{"name":"rand_chacha","disambiguator":[12263224266856247605,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","num":28,"id":{"name":"ppv_lite86","disambiguator":[13049449680620946981,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":29,"id":{"name":"futures","disambiguator":[4337358424974900475,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":30,"id":{"name":"futures_core","disambiguator":[18200893915827065529,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":31,"id":{"name":"futures_util","disambiguator":[17413347477511345824,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":32,"id":{"name":"pin_utils","disambiguator":[3673188743213573932,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":33,"id":{"name":"futures_macro","disambiguator":[12835129650532780108,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":34,"id":{"name":"futures_task","disambiguator":[13474543951748236176,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":35,"id":{"name":"futures_sink","disambiguator":[8307411743786656110,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":36,"id":{"name":"pin_project_lite","disambiguator":[17627374544393263653,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":37,"id":{"name":"futures_channel","disambiguator":[1832996214919299864,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":38,"id":{"name":"slab","disambiguator":[4028794699268519618,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":39,"id":{"name":"futures_io","disambiguator":[489674024207278210,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":40,"id":{"name":"futures","disambiguator":[9893048567650089844,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":41,"id":{"name":"memchr","disambiguator":[5547902202154193270,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":42,"id":{"name":"futures_executor","disambiguator":[1166865853276972167,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","num":43,"id":{"name":"num_cpus","disambiguator":[8888045507868980783,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","num":44,"id":{"name":"thiserror","disambiguator":[10176578803914340585,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","num":45,"id":{"name":"thiserror_impl","disambiguator":[7812757140900411430,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","num":46,"id":{"name":"pin_project","disambiguator":[14961834963295434675,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","num":47,"id":{"name":"pin_project_internal","disambiguator":[11410496046174426483,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","num":48,"id":{"name":"lazy_static","disambiguator":[2335416628160260444,0]}}],"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":0,"byte_end":9240,"line_start":1,"line_end":223,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":20},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14122,"byte_end":14134,"line_start":147,"line_end":147,"column_start":25,"column_end":37},"alias_span":null,"name":"handle_error","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":22},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14136,"byte_end":14153,"line_start":147,"line_end":147,"column_start":39,"column_end":56},"alias_span":null,"name":"set_error_handler","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14442,"byte_end":14465,"line_start":155,"line_end":155,"column_start":23,"column_end":46},"alias_span":null,"name":"get_text_map_propagator","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":35},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14467,"byte_end":14490,"line_start":155,"line_end":155,"column_start":48,"column_end":71},"alias_span":null,"name":"set_text_map_propagator","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":119},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14589,"byte_end":14608,"line_start":159,"line_end":159,"column_start":5,"column_end":24},"alias_span":null,"name":"set_tracer_provider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14610,"byte_end":14634,"line_start":159,"line_end":159,"column_start":26,"column_end":50},"alias_span":null,"name":"shutdown_tracer_provider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":117},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14636,"byte_end":14642,"line_start":159,"line_end":159,"column_start":52,"column_end":58},"alias_span":null,"name":"tracer","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":116},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14644,"byte_end":14659,"line_start":159,"line_end":159,"column_start":60,"column_end":75},"alias_span":null,"name":"tracer_provider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":118},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14661,"byte_end":14680,"line_start":159,"line_end":159,"column_start":77,"column_end":96},"alias_span":null,"name":"tracer_with_version","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":1968},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14686,"byte_end":14695,"line_start":160,"line_end":160,"column_start":5,"column_end":14},"alias_span":null,"name":"BoxedSpan","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":1973},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14697,"byte_end":14708,"line_start":160,"line_end":160,"column_start":16,"column_end":27},"alias_span":null,"name":"BoxedTracer","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14710,"byte_end":14723,"line_start":160,"line_end":160,"column_start":29,"column_end":42},"alias_span":null,"name":"GenericTracer","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14725,"byte_end":14746,"line_start":160,"line_end":160,"column_start":44,"column_end":65},"alias_span":null,"name":"GenericTracerProvider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":1978},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":14748,"byte_end":14768,"line_start":160,"line_end":160,"column_start":67,"column_end":87},"alias_span":null,"name":"GlobalTracerProvider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":2097},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/mod.rs","byte_start":52635,"byte_end":52652,"line_start":6,"line_end":6,"column_start":18,"column_end":35},"alias_span":null,"name":"BaggagePropagator","value":"","parent":{"krate":0,"index":300}},{"kind":"Use","ref_id":{"krate":0,"index":2103},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/mod.rs","byte_start":52673,"byte_end":52699,"line_start":7,"line_end":7,"column_start":20,"column_end":46},"alias_span":null,"name":"TextMapCompositePropagator","value":"","parent":{"krate":0,"index":300}},{"kind":"Use","ref_id":{"krate":0,"index":2124},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/mod.rs","byte_start":52724,"byte_end":52746,"line_start":8,"line_end":8,"column_start":24,"column_end":46},"alias_span":null,"name":"TraceContextPropagator","value":"","parent":{"krate":0,"index":300}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99105,"byte_end":99111,"line_start":19,"line_end":19,"column_start":18,"column_end":24},"alias_span":null,"name":"config","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2154},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99113,"byte_end":99119,"line_start":19,"line_end":19,"column_start":26,"column_end":32},"alias_span":null,"name":"Config","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2163},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99148,"byte_end":99162,"line_start":20,"line_end":20,"column_start":27,"column_end":41},"alias_span":null,"name":"EvictedHashMap","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2188},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99187,"byte_end":99199,"line_start":21,"line_end":21,"column_start":24,"column_end":36},"alias_span":null,"name":"EvictedQueue","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2221},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99229,"byte_end":99244,"line_start":22,"line_end":22,"column_start":29,"column_end":44},"alias_span":null,"name":"XrayIdGenerator","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2227},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99246,"byte_end":99257,"line_start":22,"line_end":22,"column_start":46,"column_end":57},"alias_span":null,"name":"IdGenerator","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2250},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99279,"byte_end":99286,"line_start":23,"line_end":23,"column_start":20,"column_end":27},"alias_span":null,"name":"Builder","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2244},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99288,"byte_end":99302,"line_start":23,"line_end":23,"column_start":29,"column_end":43},"alias_span":null,"name":"TracerProvider","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2283},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99323,"byte_end":99330,"line_start":24,"line_end":24,"column_start":19,"column_end":26},"alias_span":null,"name":"Sampler","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2269},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99332,"byte_end":99348,"line_start":24,"line_end":24,"column_start":28,"column_end":44},"alias_span":null,"name":"SamplingDecision","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2257},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99350,"byte_end":99364,"line_start":24,"line_end":24,"column_start":46,"column_end":60},"alias_span":null,"name":"SamplingResult","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":749},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99366,"byte_end":99378,"line_start":24,"line_end":24,"column_start":62,"column_end":74},"alias_span":null,"name":"ShouldSample","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2298},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99395,"byte_end":99399,"line_start":25,"line_end":25,"column_start":15,"column_end":19},"alias_span":null,"name":"Span","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2346},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99431,"byte_end":99442,"line_start":27,"line_end":27,"column_start":5,"column_end":16},"alias_span":null,"name":"BatchConfig","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":906},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99444,"byte_end":99462,"line_start":27,"line_end":27,"column_start":18,"column_end":36},"alias_span":null,"name":"BatchSpanProcessor","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2353},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99464,"byte_end":99489,"line_start":27,"line_end":27,"column_start":38,"column_end":63},"alias_span":null,"name":"BatchSpanProcessorBuilder","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2330},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99491,"byte_end":99510,"line_start":27,"line_end":27,"column_start":65,"column_end":84},"alias_span":null,"name":"SimpleSpanProcessor","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":892},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99512,"byte_end":99525,"line_start":27,"line_end":27,"column_start":86,"column_end":99},"alias_span":null,"name":"SpanProcessor","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":2363},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":99546,"byte_end":99552,"line_start":29,"line_end":29,"column_start":17,"column_end":23},"alias_span":null,"name":"Tracer","value":"","parent":{"krate":0,"index":510}},{"kind":"Use","ref_id":{"krate":0,"index":1995},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38511,"byte_end":38530,"line_start":23,"line_end":23,"column_start":14,"column_end":33},"alias_span":null,"name":"EnvResourceDetector","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":2061},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38557,"byte_end":38579,"line_start":24,"line_end":24,"column_start":26,"column_end":48},"alias_span":null,"name":"InstrumentationLibrary","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":2132},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38599,"byte_end":38607,"line_start":25,"line_end":25,"column_start":19,"column_end":27},"alias_span":null,"name":"Resource","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":2428},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8411,"byte_end":8418,"line_start":186,"line_end":186,"column_start":19,"column_end":26},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1261},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8420,"byte_end":8432,"line_start":186,"line_end":186,"column_start":28,"column_end":40},"alias_span":null,"name":"ContextGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2464},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8469,"byte_end":8474,"line_start":190,"line_end":190,"column_start":23,"column_end":28},"alias_span":null,"name":"Array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2443},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8476,"byte_end":8479,"line_start":190,"line_end":190,"column_start":30,"column_end":33},"alias_span":null,"name":"Key","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2525},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8481,"byte_end":8489,"line_start":190,"line_end":190,"column_start":35,"column_end":43},"alias_span":null,"name":"KeyValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2536},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8491,"byte_end":8495,"line_start":190,"line_end":190,"column_start":45,"column_end":49},"alias_span":null,"name":"Unit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2493},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8497,"byte_end":8502,"line_start":190,"line_end":190,"column_start":51,"column_end":56},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240791,"byte_end":240808,"line_start":168,"line_end":168,"column_start":30,"column_end":47},"alias_span":null,"name":"TextMapPropagator","value":"","parent":{"krate":0,"index":1374}},{"kind":"Use","ref_id":{"krate":0,"index":1473},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250532,"byte_end":250547,"line_start":128,"line_end":128,"column_start":15,"column_end":30},"alias_span":null,"name":"get_active_span","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1471},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250549,"byte_end":250568,"line_start":128,"line_end":128,"column_start":32,"column_end":51},"alias_span":null,"name":"mark_span_as_active","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1452},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250570,"byte_end":250585,"line_start":128,"line_end":128,"column_start":53,"column_end":68},"alias_span":null,"name":"TraceContextExt","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2570},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250599,"byte_end":250604,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"alias_span":null,"name":"Event","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1527},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250619,"byte_end":250628,"line_start":130,"line_end":130,"column_start":14,"column_end":23},"alias_span":null,"name":"FutureExt","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1541},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250648,"byte_end":250659,"line_start":131,"line_end":131,"column_start":19,"column_end":30},"alias_span":null,"name":"IdGenerator","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2631},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250671,"byte_end":250675,"line_start":132,"line_end":132,"column_start":11,"column_end":15},"alias_span":null,"name":"Link","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2650},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250688,"byte_end":250696,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"alias_span":null,"name":"NoopSpan","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2664},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250698,"byte_end":250714,"line_start":133,"line_end":133,"column_start":22,"column_end":38},"alias_span":null,"name":"NoopSpanExporter","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2656},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250716,"byte_end":250726,"line_start":133,"line_end":133,"column_start":40,"column_end":50},"alias_span":null,"name":"NoopTracer","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2642},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250728,"byte_end":250746,"line_start":133,"line_end":133,"column_start":52,"column_end":70},"alias_span":null,"name":"NoopTracerProvider","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1626},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250763,"byte_end":250777,"line_start":134,"line_end":134,"column_start":15,"column_end":29},"alias_span":null,"name":"TracerProvider","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1646},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250790,"byte_end":250794,"line_start":135,"line_end":135,"column_start":12,"column_end":16},"alias_span":null,"name":"Span","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2675},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250796,"byte_end":250804,"line_start":135,"line_end":135,"column_start":18,"column_end":26},"alias_span":null,"name":"SpanKind","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2693},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250806,"byte_end":250816,"line_start":135,"line_end":135,"column_start":28,"column_end":38},"alias_span":null,"name":"StatusCode","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2763},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250847,"byte_end":250858,"line_start":137,"line_end":137,"column_start":9,"column_end":20},"alias_span":null,"name":"SpanContext","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2729},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250860,"byte_end":250866,"line_start":137,"line_end":137,"column_start":22,"column_end":28},"alias_span":null,"name":"SpanId","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2711},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250868,"byte_end":250875,"line_start":137,"line_end":137,"column_start":30,"column_end":37},"alias_span":null,"name":"TraceId","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2747},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250877,"byte_end":250887,"line_start":137,"line_end":137,"column_start":39,"column_end":49},"alias_span":null,"name":"TraceState","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1672},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250889,"byte_end":250905,"line_start":137,"line_end":137,"column_start":51,"column_end":67},"alias_span":null,"name":"TRACE_FLAG_DEBUG","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1671},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250907,"byte_end":250926,"line_start":137,"line_end":137,"column_start":69,"column_end":88},"alias_span":null,"name":"TRACE_FLAG_DEFERRED","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1669},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250936,"byte_end":250958,"line_start":138,"line_end":138,"column_start":9,"column_end":31},"alias_span":null,"name":"TRACE_FLAG_NOT_SAMPLED","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1670},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250960,"byte_end":250978,"line_start":138,"line_end":138,"column_start":33,"column_end":51},"alias_span":null,"name":"TRACE_FLAG_SAMPLED","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":2777},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251000,"byte_end":251011,"line_start":140,"line_end":140,"column_start":14,"column_end":25},"alias_span":null,"name":"SpanBuilder","value":"","parent":{"krate":0,"index":1427}},{"kind":"Use","ref_id":{"krate":0,"index":1772},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251013,"byte_end":251019,"line_start":140,"line_end":140,"column_start":27,"column_end":33},"alias_span":null,"name":"Tracer","value":"","parent":{"krate":0,"index":1427}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":0,"byte_end":9240,"line_start":1,"line_end":223,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":169},{"krate":0,"index":1116},{"krate":0,"index":1216},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1284},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1340},{"krate":0,"index":1343},{"krate":0,"index":1346},{"krate":0,"index":1349},{"krate":0,"index":1352},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1427},{"krate":0,"index":1905}],"decl_id":null,"docs":" The Rust [OpenTelemetry](https://opentelemetry.io/) implementation.","sig":null,"attributes":[{"value":"/ The Rust [OpenTelemetry](https://opentelemetry.io/) implementation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":0,"byte_end":71,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":72,"byte_end":75,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ OpenTelemetry provides a single set of APIs, libraries, agents, and collector","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":76,"byte_end":157,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ services to capture distributed traces and metrics from your application. You","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":158,"byte_end":239,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ can analyze them using [Prometheus], [Jaeger], and other observability tools.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":240,"byte_end":321,"line_start":5,"line_end":5,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":322,"byte_end":325,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ *Compiler support: [requires `rustc` 1.46+][msrv]*","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":326,"byte_end":380,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":381,"byte_end":384,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [Prometheus]: https://prometheus.io","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":385,"byte_end":424,"line_start":9,"line_end":9,"column_start":1,"column_end":40}},{"value":"/ [Jaeger]: https://www.jaegertracing.io","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":425,"byte_end":467,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/ [msrv]: #supported-rust-versions","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":468,"byte_end":504,"line_start":11,"line_end":11,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":505,"byte_end":508,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Getting Started","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":509,"byte_end":531,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":532,"byte_end":535,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":536,"byte_end":549,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":550,"byte_end":581,"line_start":16,"line_end":16,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":582,"byte_end":589,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{sdk::export::trace::stdout, trace::Tracer, global};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":590,"byte_end":665,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":666,"byte_end":669,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync + 'static>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":670,"byte_end":751,"line_start":20,"line_end":20,"column_start":1,"column_end":82}},{"value":"/     // Create a new instrumentation pipeline","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":752,"byte_end":800,"line_start":21,"line_end":21,"column_start":1,"column_end":49}},{"value":"/     let tracer = stdout::new_pipeline().install_simple();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":801,"byte_end":862,"line_start":22,"line_end":22,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":863,"byte_end":866,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_work\", |cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":867,"byte_end":910,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"/         // Traced app logic here...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":911,"byte_end":950,"line_start":25,"line_end":25,"column_start":1,"column_end":40}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":951,"byte_end":962,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":963,"byte_end":966,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/     global::shutdown_tracer_provider(); // sending remaining spans","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":967,"byte_end":1037,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1038,"byte_end":1041,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/     Ok(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1042,"byte_end":1056,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1057,"byte_end":1062,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1063,"byte_end":1068,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1069,"byte_end":1076,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1077,"byte_end":1080,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ See the [examples](https://github.com/open-telemetry/opentelemetry-rust/tree/main/examples)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1081,"byte_end":1176,"line_start":35,"line_end":35,"column_start":1,"column_end":96}},{"value":"/ directory for different integration patterns.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1177,"byte_end":1226,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1227,"byte_end":1230,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ## Crate Feature Flags","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1231,"byte_end":1257,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1258,"byte_end":1261,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The following core crate feature flags are available:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1262,"byte_end":1319,"line_start":40,"line_end":40,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1320,"byte_end":1323,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `trace`: Includes the trace API and SDK (enabled by default).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1324,"byte_end":1391,"line_start":42,"line_end":42,"column_start":1,"column_end":68}},{"value":"/ * `metrics`: Includes the unstable metrics API and SDK.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1392,"byte_end":1451,"line_start":43,"line_end":43,"column_start":1,"column_end":60}},{"value":"/ * `serialize`: Adds [serde] serializers for common types.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1452,"byte_end":1513,"line_start":44,"line_end":44,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1514,"byte_end":1517,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Support for recording and exporting telemetry asynchronously can be added","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1518,"byte_end":1595,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ via the following flags:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1596,"byte_end":1624,"line_start":47,"line_end":47,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1625,"byte_end":1628,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ * `rt-tokio`: Spawn telemetry tasks using [tokio]'s multi-thread runtime.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1629,"byte_end":1706,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ * `rt-tokio-current-thread`: Spawn telemetry tasks on a separate runtime so that the main runtime won't be blocked.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1707,"byte_end":1826,"line_start":50,"line_end":50,"column_start":1,"column_end":120}},{"value":"/ * `rt-async-std`: Spawn telemetry tasks using [async-std]'s runtime.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1827,"byte_end":1899,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1900,"byte_end":1903,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ [tokio]: https://crates.io/crates/tokio","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1904,"byte_end":1947,"line_start":53,"line_end":53,"column_start":1,"column_end":44}},{"value":"/ [async-std]: https://crates.io/crates/async-std","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":1948,"byte_end":1999,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ [serde]: https://crates.io/crates/serde","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2000,"byte_end":2043,"line_start":55,"line_end":55,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2044,"byte_end":2047,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ## Working with runtimes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2048,"byte_end":2076,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2077,"byte_end":2080,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Opentelemetry API & SDK supports different runtimes. When working with async runtime, we recommend","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2081,"byte_end":2183,"line_start":59,"line_end":59,"column_start":1,"column_end":103}},{"value":"/ to use batch span processors where the spans will be sent in batch, reducing the number of requests","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2184,"byte_end":2287,"line_start":60,"line_end":60,"column_start":1,"column_end":104}},{"value":"/ and resource needed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2288,"byte_end":2312,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2313,"byte_end":2316,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Batch span processors need to run a background task to collect and send spans. Different runtime","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2317,"byte_end":2417,"line_start":63,"line_end":63,"column_start":1,"column_end":101}},{"value":"/ needs different ways to handle the background task.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2418,"byte_end":2473,"line_start":64,"line_end":64,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2474,"byte_end":2477,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ### Tokio","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2478,"byte_end":2491,"line_start":66,"line_end":66,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2492,"byte_end":2495,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Tokio currently offers two different schedulers. One is `current_thread_scheduler`, the other is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2496,"byte_end":2596,"line_start":68,"line_end":68,"column_start":1,"column_end":101}},{"value":"/ `multiple_thread_scheduler`. Both of them default to use batch span processors to install span exporters.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2597,"byte_end":2706,"line_start":69,"line_end":69,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2707,"byte_end":2710,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ But for `current_thread_scheduler`. It can cause the program to hang forever if we schedule the backgroud","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2711,"byte_end":2820,"line_start":71,"line_end":71,"column_start":1,"column_end":110}},{"value":"/ task with other tasks in the same runtime. Thus, users should enable `rt-tokio-current-thread` feature","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2821,"byte_end":2927,"line_start":72,"line_end":72,"column_start":1,"column_end":107}},{"value":"/ to ask the background task be scheduled on a different runtime on a different thread.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":2928,"byte_end":3017,"line_start":73,"line_end":73,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3018,"byte_end":3021,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ## Related Crates","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3022,"byte_end":3043,"line_start":75,"line_end":75,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3044,"byte_end":3047,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ In addition to `opentelemetry`, the [`open-telemetry/opentelemetry-rust`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3048,"byte_end":3125,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/ repository contains several additional crates designed to be used with the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3126,"byte_end":3204,"line_start":78,"line_end":78,"column_start":1,"column_end":79}},{"value":"/ `opentelemetry` ecosystem. This includes a collection of trace","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3205,"byte_end":3271,"line_start":79,"line_end":79,"column_start":1,"column_end":67}},{"value":"/ `SpanExporter` and metrics pull and push controller implementations, as well","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3272,"byte_end":3352,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ as utility and adapter crates to assist in propagating state and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3353,"byte_end":3421,"line_start":81,"line_end":81,"column_start":1,"column_end":69}},{"value":"/ instrumenting applications.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3422,"byte_end":3453,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3454,"byte_end":3457,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ In particular, the following crates are likely to be of interest:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3458,"byte_end":3527,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3528,"byte_end":3531,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ - [`opentelemetry-http`] provides a pipeline and exporter for sending","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3532,"byte_end":3605,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/   trace information to [`http`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3606,"byte_end":3642,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"/ - [`opentelemetry-jaeger`] provides a pipeline and exporter for sending","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3643,"byte_end":3718,"line_start":88,"line_end":88,"column_start":1,"column_end":76}},{"value":"/   trace information to [`Jaeger`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3719,"byte_end":3757,"line_start":89,"line_end":89,"column_start":1,"column_end":39}},{"value":"/ - [`opentelemetry-otlp`] exporter for sending trace and metric data in the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3758,"byte_end":3836,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/   OTLP format to the OpenTelemetry collector.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3837,"byte_end":3886,"line_start":91,"line_end":91,"column_start":1,"column_end":50}},{"value":"/ - [`opentelemetry-prometheus`] provides a pipeline and exporter for sending","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3887,"byte_end":3966,"line_start":92,"line_end":92,"column_start":1,"column_end":80}},{"value":"/   metrics information to [`Prometheus`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":3967,"byte_end":4011,"line_start":93,"line_end":93,"column_start":1,"column_end":45}},{"value":"/ - [`opentelemetry-zipkin`] provides a pipeline and exporter for sending","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4012,"byte_end":4087,"line_start":94,"line_end":94,"column_start":1,"column_end":76}},{"value":"/   trace information to [`Zipkin`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4088,"byte_end":4126,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ - [`opentelemetry-datadog`] provides additional exporters to [`Datadog`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4127,"byte_end":4204,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/ - [`opentelemetry-aws`] provides unofficial propagators for AWS X-ray.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4205,"byte_end":4279,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/ - [`opentelemetry-contrib`] provides additional exporters and propagators that are experimental.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4280,"byte_end":4380,"line_start":98,"line_end":98,"column_start":1,"column_end":101}},{"value":"/ - [`opentelemetry-semantic-conventions`] provides standard names and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4381,"byte_end":4453,"line_start":99,"line_end":99,"column_start":1,"column_end":73}},{"value":"/   semantic otel conventions.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4454,"byte_end":4486,"line_start":100,"line_end":100,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4487,"byte_end":4490,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ Additionally, there are also several third-party crates which are not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4491,"byte_end":4564,"line_start":102,"line_end":102,"column_start":1,"column_end":74}},{"value":"/ maintained by the `opentelemetry` project. These include:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4565,"byte_end":4626,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4627,"byte_end":4630,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ - [`tracing-opentelemetry`] provides integration for applications","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4631,"byte_end":4700,"line_start":105,"line_end":105,"column_start":1,"column_end":70}},{"value":"/   instrumented using the [`tracing`] API and ecosystem.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4701,"byte_end":4760,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/ - [`actix-web-opentelemetry`] provides integration for the [`actix-web`] web","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4761,"byte_end":4841,"line_start":107,"line_end":107,"column_start":1,"column_end":81}},{"value":"/   server and ecosystem.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4842,"byte_end":4869,"line_start":108,"line_end":108,"column_start":1,"column_end":28}},{"value":"/ - [`opentelemetry-application-insights`] provides an unofficial [Azure","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4870,"byte_end":4944,"line_start":109,"line_end":109,"column_start":1,"column_end":75}},{"value":"/   Application Insights] exporter.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4945,"byte_end":4982,"line_start":110,"line_end":110,"column_start":1,"column_end":38}},{"value":"/ - [`opentelemetry-tide`] provides integration for the [`Tide`] web server","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":4983,"byte_end":5060,"line_start":111,"line_end":111,"column_start":1,"column_end":78}},{"value":"/   and ecosystem.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5061,"byte_end":5081,"line_start":112,"line_end":112,"column_start":1,"column_end":21}},{"value":"/ - [`opentelemetry-stackdriver`] provides an exporter for Google's [Cloud Trace]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5082,"byte_end":5165,"line_start":113,"line_end":113,"column_start":1,"column_end":84}},{"value":"/   (which used to be called StackDriver).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5166,"byte_end":5210,"line_start":114,"line_end":114,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5211,"byte_end":5214,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ If you're the maintainer of an `opentelemetry` ecosystem crate not listed","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5215,"byte_end":5292,"line_start":116,"line_end":116,"column_start":1,"column_end":78}},{"value":"/ above, please let us know! We'd love to add your project to the list!","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5293,"byte_end":5366,"line_start":117,"line_end":117,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5367,"byte_end":5370,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`open-telemetry/opentelemetry-rust`]: https://github.com/open-telemetry/opentelemetry-rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5371,"byte_end":5466,"line_start":119,"line_end":119,"column_start":1,"column_end":96}},{"value":"/ [`opentelemetry-jaeger`]: https://crates.io/crates/opentelemetry-jaeger","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5467,"byte_end":5542,"line_start":120,"line_end":120,"column_start":1,"column_end":76}},{"value":"/ [`Jaeger`]: https://www.jaegertracing.io","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5543,"byte_end":5587,"line_start":121,"line_end":121,"column_start":1,"column_end":45}},{"value":"/ [`opentelemetry-otlp`]: https://crates.io/crates/opentelemetry-otlp","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5588,"byte_end":5659,"line_start":122,"line_end":122,"column_start":1,"column_end":72}},{"value":"/ [`opentelemetry-http`]: https://crates.io/crates/opentelemetry-http","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5660,"byte_end":5731,"line_start":123,"line_end":123,"column_start":1,"column_end":72}},{"value":"/ [`opentelemetry-prometheus`]: https://crates.io/crates/opentelemetry-prometheus","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5732,"byte_end":5815,"line_start":124,"line_end":124,"column_start":1,"column_end":84}},{"value":"/ [`opentelemetry-aws`]: https://crates.io/crates/opentelemetry-aws","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5816,"byte_end":5885,"line_start":125,"line_end":125,"column_start":1,"column_end":70}},{"value":"/ [`Prometheus`]: https://prometheus.io","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5886,"byte_end":5927,"line_start":126,"line_end":126,"column_start":1,"column_end":42}},{"value":"/ [`opentelemetry-zipkin`]: https://crates.io/crates/opentelemetry-zipkin","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":5928,"byte_end":6003,"line_start":127,"line_end":127,"column_start":1,"column_end":76}},{"value":"/ [`http`]: https://crates.io/crates/http","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6004,"byte_end":6047,"line_start":128,"line_end":128,"column_start":1,"column_end":44}},{"value":"/ [`Zipkin`]: https://zipkin.io","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6048,"byte_end":6081,"line_start":129,"line_end":129,"column_start":1,"column_end":34}},{"value":"/ [`opentelemetry-contrib`]: https://crates.io/crates/opentelemetry-contrib","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6082,"byte_end":6159,"line_start":130,"line_end":130,"column_start":1,"column_end":78}},{"value":"/ [`opentelemetry-datadog`]: https://crates.io/crates/opentelemetry-datadog","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6160,"byte_end":6237,"line_start":131,"line_end":131,"column_start":1,"column_end":78}},{"value":"/ [`Datadog`]: https://www.datadoghq.com","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6238,"byte_end":6280,"line_start":132,"line_end":132,"column_start":1,"column_end":43}},{"value":"/ [`opentelemetry-semantic-conventions`]: https://crates.io/crates/opentelemetry-semantic-conventions","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6281,"byte_end":6384,"line_start":133,"line_end":133,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6385,"byte_end":6388,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ [`tracing-opentelemetry`]: https://crates.io/crates/tracing-opentelemetry","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6389,"byte_end":6466,"line_start":135,"line_end":135,"column_start":1,"column_end":78}},{"value":"/ [`tracing`]: https://crates.io/crates/tracing","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6467,"byte_end":6516,"line_start":136,"line_end":136,"column_start":1,"column_end":50}},{"value":"/ [`actix-web-opentelemetry`]: https://crates.io/crates/actix-web-opentelemetry","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6517,"byte_end":6598,"line_start":137,"line_end":137,"column_start":1,"column_end":82}},{"value":"/ [`actix-web`]: https://crates.io/crates/actix-web","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6599,"byte_end":6652,"line_start":138,"line_end":138,"column_start":1,"column_end":54}},{"value":"/ [`opentelemetry-application-insights`]: https://crates.io/crates/opentelemetry-application-insights","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6653,"byte_end":6756,"line_start":139,"line_end":139,"column_start":1,"column_end":104}},{"value":"/ [Azure Application Insights]: https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6757,"byte_end":6869,"line_start":140,"line_end":140,"column_start":1,"column_end":113}},{"value":"/ [`opentelemetry-tide`]: https://crates.io/crates/opentelemetry-tide","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6870,"byte_end":6941,"line_start":141,"line_end":141,"column_start":1,"column_end":72}},{"value":"/ [`Tide`]: https://crates.io/crates/tide","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6942,"byte_end":6985,"line_start":142,"line_end":142,"column_start":1,"column_end":44}},{"value":"/ [`opentelemetry-stackdriver`]: https://crates.io/crates/opentelemetry-stackdriver","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":6986,"byte_end":7071,"line_start":143,"line_end":143,"column_start":1,"column_end":86}},{"value":"/ [Cloud Trace]: https://cloud.google.com/trace/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7072,"byte_end":7122,"line_start":144,"line_end":144,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7123,"byte_end":7126,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ ## Supported Rust Versions","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7127,"byte_end":7157,"line_start":146,"line_end":146,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7158,"byte_end":7161,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ OpenTelemetry is built against the latest stable release. The minimum","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7162,"byte_end":7235,"line_start":148,"line_end":148,"column_start":1,"column_end":74}},{"value":"/ supported version is 1.46. The current OpenTelemetry version is not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7236,"byte_end":7307,"line_start":149,"line_end":149,"column_start":1,"column_end":72}},{"value":"/ guaranteed to build on Rust versions earlier than the minimum supported","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7308,"byte_end":7383,"line_start":150,"line_end":150,"column_start":1,"column_end":76}},{"value":"/ version.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7384,"byte_end":7396,"line_start":151,"line_end":151,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7397,"byte_end":7400,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ The current stable Rust compiler and the three most recent minor versions","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7401,"byte_end":7478,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/ before it will always be supported. For example, if the current stable","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7479,"byte_end":7553,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/ compiler version is 1.49, the minimum supported version will not be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7554,"byte_end":7625,"line_start":155,"line_end":155,"column_start":1,"column_end":72}},{"value":"/ increased past 1.46, three minor versions prior. Increasing the minimum","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7626,"byte_end":7701,"line_start":156,"line_end":156,"column_start":1,"column_end":76}},{"value":"/ supported compiler version is not considered a semver breaking change as","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7702,"byte_end":7778,"line_start":157,"line_end":157,"column_start":1,"column_end":77}},{"value":"/ long as doing so complies with this policy.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7779,"byte_end":7826,"line_start":158,"line_end":158,"column_start":1,"column_end":48}},{"value":"warn(future_incompatible, missing_debug_implementations, missing_docs,\n       nonstandard_style, rust_2018_idioms, unreachable_pub, unused)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7827,"byte_end":7993,"line_start":159,"line_end":167,"column_start":1,"column_end":3}},{"value":"allow(clippy :: needless_doctest_main)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":7994,"byte_end":8034,"line_start":168,"line_end":168,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"global","qualname":"::global","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":25},{"krate":0,"index":43},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":166}],"decl_id":null,"docs":" Utilities for working with global telemetry primitives","sig":null,"attributes":[{"value":"/ Utilities for working with global telemetry primitives","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9242,"byte_end":9300,"line_start":1,"line_end":1,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9301,"byte_end":9304,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ## Global Trace API","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9305,"byte_end":9328,"line_start":3,"line_end":3,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9329,"byte_end":9332,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The global trace API **provides applications access to their configured","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9333,"byte_end":9408,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ [`TracerProvider`] instance from anywhere in the codebase**. This allows","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9409,"byte_end":9485,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ applications to be less coupled to the specific Open Telemetry SDK while not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9486,"byte_end":9566,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ manually passing references to each part of the code that needs to create","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9567,"byte_end":9644,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ [`Span`]s. Additionally, **3rd party middleware** or **library code** can be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9645,"byte_end":9725,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ written against this generic API and not constrain users to a specific","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9726,"byte_end":9800,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ implementation choice.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9801,"byte_end":9827,"line_start":11,"line_end":11,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9828,"byte_end":9831,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ### Usage in Applications","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9832,"byte_end":9861,"line_start":13,"line_end":13,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9862,"byte_end":9865,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Applications configure their tracer either by [installing a trace pipeline],","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9866,"byte_end":9946,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ or calling [`set_tracer_provider`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9947,"byte_end":9986,"line_start":16,"line_end":16,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9987,"byte_end":9990,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9991,"byte_end":9998,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"trace\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":9999,"byte_end":10028,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10029,"byte_end":10036,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::trace::{Tracer, NoopTracerProvider};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10037,"byte_end":10096,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/ use opentelemetry::global;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10097,"byte_end":10127,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10128,"byte_end":10131,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ fn init_tracer() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10132,"byte_end":10154,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/     let provider = NoopTracerProvider::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10155,"byte_end":10204,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10205,"byte_end":10208,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/     // Configure the global `TracerProvider` singleton when your app starts","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10209,"byte_end":10288,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/     // (there is a no-op default if this is not set by your application)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10289,"byte_end":10365,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/     let _ = global::set_tracer_provider(provider);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10366,"byte_end":10420,"line_start":29,"line_end":29,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10421,"byte_end":10426,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10427,"byte_end":10430,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ fn do_something_tracked() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10431,"byte_end":10462,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/     // Then you can get a named tracer instance anywhere in your codebase.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10463,"byte_end":10541,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/     let tracer = global::tracer(\"my-component\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10542,"byte_end":10594,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10595,"byte_end":10598,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_work\", |cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10599,"byte_end":10642,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/         // Traced app logic here...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10643,"byte_end":10682,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10683,"byte_end":10694,"line_start":38,"line_end":38,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10695,"byte_end":10700,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10701,"byte_end":10704,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // in main or other app start","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10705,"byte_end":10738,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/ let _ = init_tracer();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10739,"byte_end":10765,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/ do_something_tracked();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10766,"byte_end":10793,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10794,"byte_end":10801,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10802,"byte_end":10809,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10810,"byte_end":10813,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ### Usage in Libraries","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10814,"byte_end":10840,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10841,"byte_end":10844,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10845,"byte_end":10852,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"trace\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10853,"byte_end":10882,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/ # {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10883,"byte_end":10890,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::trace::Tracer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10891,"byte_end":10928,"line_start":52,"line_end":52,"column_start":1,"column_end":38}},{"value":"/ use opentelemetry::global;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10929,"byte_end":10959,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10960,"byte_end":10963,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ pub fn my_traced_library_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":10964,"byte_end":11005,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"/     // End users of your library will configure their global tracer provider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11006,"byte_end":11086,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/     // so you can use the global tracer without any setup","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11087,"byte_end":11148,"line_start":57,"line_end":57,"column_start":1,"column_end":62}},{"value":"/     let tracer = global::tracer_with_version(\"my-library-name\", env!(\"CARGO_PKG_VERSION\"));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11149,"byte_end":11244,"line_start":58,"line_end":58,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11245,"byte_end":11248,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_library_work\", |cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11249,"byte_end":11300,"line_start":60,"line_end":60,"column_start":1,"column_end":52}},{"value":"/         // Traced library logic here...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11301,"byte_end":11344,"line_start":61,"line_end":61,"column_start":1,"column_end":44}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11345,"byte_end":11356,"line_start":62,"line_end":62,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11357,"byte_end":11362,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11363,"byte_end":11370,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11371,"byte_end":11378,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11379,"byte_end":11382,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ [installing a trace pipeline]: crate::sdk::export::trace::stdout::PipelineBuilder::install","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11383,"byte_end":11477,"line_start":67,"line_end":67,"column_start":1,"column_end":95}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11478,"byte_end":11530,"line_start":68,"line_end":68,"column_start":1,"column_end":53}},{"value":"/ [`Span`]: crate::trace::Span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11531,"byte_end":11563,"line_start":69,"line_end":69,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11564,"byte_end":11567,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Global Metrics API","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11568,"byte_end":11593,"line_start":71,"line_end":71,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11594,"byte_end":11597,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The global metrics API **provides applications access to their configured","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11598,"byte_end":11675,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ [`MeterProvider`] instance from anywhere in the codebase**. This allows","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11676,"byte_end":11751,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ applications to be less coupled to the specific Open Telemetry SDK while not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11752,"byte_end":11832,"line_start":75,"line_end":75,"column_start":1,"column_end":81}},{"value":"/ manually passing references to each part of the code that needs to create","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11833,"byte_end":11910,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/ metric instruments. Additionally, **3rd party middleware** or **library code** can be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":11911,"byte_end":12000,"line_start":77,"line_end":77,"column_start":1,"column_end":90}},{"value":"/ written against this generic API and not constrain users to a specific","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12001,"byte_end":12075,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/ implementation choice.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12076,"byte_end":12102,"line_start":79,"line_end":79,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12103,"byte_end":12106,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ ### Usage in Applications","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12107,"byte_end":12136,"line_start":81,"line_end":81,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12137,"byte_end":12140,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Applications configure their tracer either by [installing a metrics pipeline],","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12141,"byte_end":12223,"line_start":83,"line_end":83,"column_start":1,"column_end":83}},{"value":"/ or calling [`set_meter_provider`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12224,"byte_end":12262,"line_start":84,"line_end":84,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12263,"byte_end":12266,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12267,"byte_end":12274,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"metrics\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12275,"byte_end":12306,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12307,"byte_end":12314,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::metrics::{Meter, noop::NoopMeterProvider};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12315,"byte_end":12380,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"/ use opentelemetry::{global, KeyValue};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12381,"byte_end":12423,"line_start":90,"line_end":90,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12424,"byte_end":12427,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ fn init_meter() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12428,"byte_end":12449,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/     let provider = NoopMeterProvider::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12450,"byte_end":12498,"line_start":93,"line_end":93,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12499,"byte_end":12502,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/     // Configure the global `MeterProvider` singleton when your app starts","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12503,"byte_end":12581,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/     // (there is a no-op default if this is not set by your application)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12582,"byte_end":12658,"line_start":96,"line_end":96,"column_start":1,"column_end":77}},{"value":"/     global::set_meter_provider(provider)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12659,"byte_end":12703,"line_start":97,"line_end":97,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12704,"byte_end":12709,"line_start":98,"line_end":98,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12710,"byte_end":12713,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ fn do_something_instrumented() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12714,"byte_end":12750,"line_start":100,"line_end":100,"column_start":1,"column_end":37}},{"value":"/     // Then you can get a named tracer instance anywhere in your codebase.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12751,"byte_end":12829,"line_start":101,"line_end":101,"column_start":1,"column_end":79}},{"value":"/     let tracer = global::meter(\"my-component\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12830,"byte_end":12881,"line_start":102,"line_end":102,"column_start":1,"column_end":52}},{"value":"/     let counter = tracer.u64_counter(\"my_counter\").init();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12882,"byte_end":12944,"line_start":103,"line_end":103,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12945,"byte_end":12948,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/     // record metrics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12949,"byte_end":12974,"line_start":105,"line_end":105,"column_start":1,"column_end":26}},{"value":"/     counter.add(1, &[KeyValue::new(\"mykey\", \"myvalue\")]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":12975,"byte_end":13036,"line_start":106,"line_end":106,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13037,"byte_end":13042,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13043,"byte_end":13046,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ // in main or other app start","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13047,"byte_end":13080,"line_start":109,"line_end":109,"column_start":1,"column_end":34}},{"value":"/ init_meter();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13081,"byte_end":13098,"line_start":110,"line_end":110,"column_start":1,"column_end":18}},{"value":"/ do_something_instrumented();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13099,"byte_end":13131,"line_start":111,"line_end":111,"column_start":1,"column_end":33}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13132,"byte_end":13139,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13140,"byte_end":13147,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13148,"byte_end":13151,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ### Usage in Libraries","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13152,"byte_end":13178,"line_start":115,"line_end":115,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13179,"byte_end":13182,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13183,"byte_end":13190,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"metrics\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13191,"byte_end":13222,"line_start":118,"line_end":118,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13223,"byte_end":13230,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::trace::Tracer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13231,"byte_end":13268,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"/ use opentelemetry::{global, KeyValue};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13269,"byte_end":13311,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13312,"byte_end":13315,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ pub fn my_traced_library_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13316,"byte_end":13357,"line_start":123,"line_end":123,"column_start":1,"column_end":42}},{"value":"/     // End users of your library will configure their global meter provider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13358,"byte_end":13437,"line_start":124,"line_end":124,"column_start":1,"column_end":80}},{"value":"/     // so you can use the global meter without any setup","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13438,"byte_end":13498,"line_start":125,"line_end":125,"column_start":1,"column_end":61}},{"value":"/     let tracer = global::meter(\"my-library-name\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13499,"byte_end":13553,"line_start":126,"line_end":126,"column_start":1,"column_end":55}},{"value":"/     let counter = tracer.u64_counter(\"my_counter\").init();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13554,"byte_end":13616,"line_start":127,"line_end":127,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13617,"byte_end":13620,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/     // record metrics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13621,"byte_end":13646,"line_start":129,"line_end":129,"column_start":1,"column_end":26}},{"value":"/     counter.add(1, &[KeyValue::new(\"mykey\", \"myvalue\")]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13647,"byte_end":13708,"line_start":130,"line_end":130,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13709,"byte_end":13714,"line_start":131,"line_end":131,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13715,"byte_end":13722,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13723,"byte_end":13730,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13731,"byte_end":13734,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ [installing a metrics pipeline]: crate::sdk::export::metrics::stdout::StdoutExporterBuilder::try_init","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13735,"byte_end":13840,"line_start":135,"line_end":135,"column_start":1,"column_end":106}},{"value":"/ [`MeterProvider`]: crate::metrics::MeterProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13841,"byte_end":13893,"line_start":136,"line_end":136,"column_start":1,"column_end":53}},{"value":"/ [`set_meter_provider`]: crate::global::set_meter_provider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/mod.rs","byte_start":13894,"byte_end":13955,"line_start":137,"line_end":137,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1940},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15356,"byte_end":15361,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"Trace","qualname":"::global::error_handler::Error::Trace","value":"Error::Trace(TraceError)","parent":{"krate":0,"index":1921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15247,"byte_end":15272,"line_start":18,"line_end":18,"column_start":5,"column_end":30}},{"value":"error(transparent)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15330,"byte_end":15351,"line_start":20,"line_end":20,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1943},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15554,"byte_end":15559,"line_start":27,"line_end":27,"column_start":5,"column_end":10},"name":"Other","qualname":"::global::error_handler::Error::Other","value":"Error::Other(String)","parent":{"krate":0,"index":1921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"{0}\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15534,"byte_end":15549,"line_start":26,"line_end":26,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1921},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15235,"byte_end":15240,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::global::error_handler::Error","value":"pub enum Error { Trace(TraceError), Other(String), }","parent":null,"children":[{"krate":0,"index":1940},{"krate":0,"index":1943}],"decl_id":null,"docs":" Wrapper for error from both tracing and metrics part of open telemetry.\n","sig":null,"attributes":[{"value":"/ Wrapper for error from both tracing and metrics part of open telemetry.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15097,"byte_end":15172,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"non_exhaustive","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15208,"byte_end":15225,"line_start":16,"line_end":16,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15863,"byte_end":15875,"line_start":41,"line_end":41,"column_start":8,"column_end":20},"name":"handle_error","qualname":"::global::error_handler::handle_error","value":"pub fn handle_error<T: Into<Error>>(T)","parent":null,"children":[],"decl_id":null,"docs":" Handle error using the globally configured error handler.","sig":null,"attributes":[{"value":"/ Handle error using the globally configured error handler.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15759,"byte_end":15820,"line_start":38,"line_end":38,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15821,"byte_end":15824,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Writes to stderr if unset.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15825,"byte_end":15855,"line_start":40,"line_end":40,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":16599,"byte_end":16616,"line_start":57,"line_end":57,"column_start":8,"column_end":25},"name":"set_error_handler","qualname":"::global::error_handler::set_error_handler","value":"pub fn set_error_handler<F>(F) -> std::result::Result<(), Error> where\nF: Fn(Error) -> () + Send + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Set global error handler.\n","sig":null,"attributes":[{"value":"/ Set global error handler.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":16562,"byte_end":16591,"line_start":56,"line_end":56,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":35},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17797,"byte_end":17820,"line_start":25,"line_end":25,"column_start":8,"column_end":31},"name":"set_text_map_propagator","qualname":"::global::propagation::set_text_map_propagator","value":"pub fn set_text_map_propagator<P: TextMapPropagator + Send + Sync +\n                               'static>(P)","parent":null,"children":[],"decl_id":null,"docs":" Sets the given [`TextMapPropagator`] propagator as the current global propagator.","sig":null,"attributes":[{"value":"/ Sets the given [`TextMapPropagator`] propagator as the current global propagator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17400,"byte_end":17485,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17486,"byte_end":17489,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17490,"byte_end":17504,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17505,"byte_end":17508,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17509,"byte_end":17516,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, sdk::propagation::TraceContextPropagator};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17517,"byte_end":17591,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17592,"byte_end":17595,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // create your text map propagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17596,"byte_end":17634,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/ let propagator = TraceContextPropagator::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17635,"byte_end":17686,"line_start":20,"line_end":20,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17687,"byte_end":17690,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // assign it as the global propagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17691,"byte_end":17732,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ global::set_text_map_propagator(propagator);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17733,"byte_end":17781,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":17782,"byte_end":17789,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18695,"byte_end":18718,"line_start":49,"line_end":49,"column_start":8,"column_end":31},"name":"get_text_map_propagator","qualname":"::global::propagation::get_text_map_propagator","value":"pub fn get_text_map_propagator<T, F>(F) -> T where\nF: FnMut(&dyn TextMapPropagator) -> T","parent":null,"children":[],"decl_id":null,"docs":" Executes a closure with a reference to the current global [`TextMapPropagator`] propagator.","sig":null,"attributes":[{"value":"/ Executes a closure with a reference to the current global [`TextMapPropagator`] propagator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18028,"byte_end":18123,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18124,"byte_end":18127,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18128,"byte_end":18142,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18143,"byte_end":18146,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18147,"byte_end":18154,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{propagation::TextMapPropagator, global};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18155,"byte_end":18219,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/ use opentelemetry::sdk::propagation::TraceContextPropagator;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18220,"byte_end":18284,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18285,"byte_end":18319,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18320,"byte_end":18323,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let example_carrier = HashMap::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18324,"byte_end":18365,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18366,"byte_end":18369,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // create your text map propagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18370,"byte_end":18408,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ let tc_propagator = TraceContextPropagator::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18409,"byte_end":18463,"line_start":43,"line_end":43,"column_start":1,"column_end":55}},{"value":"/ global::set_text_map_propagator(tc_propagator);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18464,"byte_end":18515,"line_start":44,"line_end":44,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18516,"byte_end":18519,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // use the global text map propagator to extract contexts","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18520,"byte_end":18581,"line_start":46,"line_end":46,"column_start":1,"column_end":62}},{"value":"/ let _cx = global::get_text_map_propagator(|propagator| propagator.extract(&example_carrier));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18582,"byte_end":18679,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/propagation.rs","byte_start":18680,"byte_end":18687,"line_start":48,"line_end":48,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1968},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":19352,"byte_end":19361,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"BoxedSpan","qualname":"::global::trace::BoxedSpan","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps the [`BoxedTracer`]'s [`Span`] so it can be used generically by\n applications without knowing the underlying type.","sig":null,"attributes":[{"value":"/ Wraps the [`BoxedTracer`]'s [`Span`] so it can be used generically by","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":19159,"byte_end":19232,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ applications without knowing the underlying type.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":19233,"byte_end":19286,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":19287,"byte_end":19290,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`Span`]: crate::trace::Span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":19291,"byte_end":19323,"line_start":11,"line_end":11,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1973},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":21700,"byte_end":21711,"line_start":75,"line_end":75,"column_start":12,"column_end":23},"name":"BoxedTracer","qualname":"::global::trace::BoxedTracer","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps the [`GlobalTracerProvider`]'s [`Tracer`] so it can be used generically by\n applications without knowing the underlying type.","sig":null,"attributes":[{"value":"/ Wraps the [`GlobalTracerProvider`]'s [`Tracer`] so it can be used generically by","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":21426,"byte_end":21510,"line_start":69,"line_end":69,"column_start":1,"column_end":85}},{"value":"/ applications without knowing the underlying type.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":21511,"byte_end":21564,"line_start":70,"line_end":70,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":21565,"byte_end":21568,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Tracer`]: crate::trace::Tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":21569,"byte_end":21605,"line_start":72,"line_end":72,"column_start":1,"column_end":37}},{"value":"/ [`GlobalTracerProvider`]: crate::global::GlobalTracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":21606,"byte_end":21671,"line_start":73,"line_end":73,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":91},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23366,"byte_end":23379,"line_start":116,"line_end":116,"column_start":11,"column_end":24},"name":"GenericTracer","qualname":"::global::trace::GenericTracer","value":"GenericTracer: fmt::Debug + 'static","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"decl_id":null,"docs":" Allows a specific [`Tracer`] to be used generically by [`BoxedTracer`]\n instances by mirroring the interface and boxing the return types.","sig":null,"attributes":[{"value":"/ Allows a specific [`Tracer`] to be used generically by [`BoxedTracer`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23170,"byte_end":23244,"line_start":112,"line_end":112,"column_start":1,"column_end":75}},{"value":"/ instances by mirroring the interface and boxing the return types.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23245,"byte_end":23314,"line_start":113,"line_end":113,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23315,"byte_end":23318,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ [`Tracer`]: crate::trace::Tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23319,"byte_end":23355,"line_start":115,"line_end":115,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23495,"byte_end":23508,"line_start":118,"line_end":118,"column_start":8,"column_end":21},"name":"invalid_boxed","qualname":"::global::trace::GenericTracer::invalid_boxed","value":"pub fn invalid_boxed(&Self) -> Box<DynSpan>","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Create a new invalid span for use in cases where there are no active spans.\n","sig":null,"attributes":[{"value":"/ Create a new invalid span for use in cases where there are no active spans.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23408,"byte_end":23487,"line_start":117,"line_end":117,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23644,"byte_end":23668,"line_start":122,"line_end":122,"column_start":8,"column_end":32},"name":"start_with_context_boxed","qualname":"::global::trace::GenericTracer::start_with_context_boxed","value":"pub fn start_with_context_boxed(&Self, &str, Context) -> Box<DynSpan>","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Returns a trait object so the underlying implementation can be swapped\n out at runtime.\n","sig":null,"attributes":[{"value":"/ Returns a trait object so the underlying implementation can be swapped","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23538,"byte_end":23612,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ out at runtime.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23617,"byte_end":23636,"line_start":121,"line_end":121,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23829,"byte_end":23840,"line_start":126,"line_end":126,"column_start":8,"column_end":19},"name":"build_boxed","qualname":"::global::trace::GenericTracer::build_boxed","value":"pub fn build_boxed(&Self, trace::SpanBuilder) -> Box<DynSpan>","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Returns a trait object so the underlying implementation can be swapped\n out at runtime.\n","sig":null,"attributes":[{"value":"/ Returns a trait object so the underlying implementation can be swapped","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23723,"byte_end":23797,"line_start":124,"line_end":124,"column_start":5,"column_end":79}},{"value":"/ out at runtime.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23802,"byte_end":23821,"line_start":125,"line_end":125,"column_start":5,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":24928,"byte_end":24949,"line_start":157,"line_end":157,"column_start":11,"column_end":32},"name":"GenericTracerProvider","qualname":"::global::trace::GenericTracerProvider","value":"GenericTracerProvider: fmt::Debug + 'static","parent":null,"children":[{"krate":0,"index":102}],"decl_id":null,"docs":" Allows a specific [`TracerProvider`] to be used generically by the\n [`GlobalTracerProvider`] by mirroring the interface and boxing the return types.","sig":null,"attributes":[{"value":"/ Allows a specific [`TracerProvider`] to be used generically by the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":24639,"byte_end":24709,"line_start":152,"line_end":152,"column_start":1,"column_end":71}},{"value":"/ [`GlobalTracerProvider`] by mirroring the interface and boxing the return types.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":24710,"byte_end":24794,"line_start":153,"line_end":153,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":24795,"byte_end":24798,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":24799,"byte_end":24851,"line_start":155,"line_end":155,"column_start":1,"column_end":53}},{"value":"/ [`GlobalTracerProvider`]: crate::global::GlobalTracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":24852,"byte_end":24917,"line_start":156,"line_end":156,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25085,"byte_end":25101,"line_start":159,"line_end":159,"column_start":8,"column_end":24},"name":"get_tracer_boxed","qualname":"::global::trace::GenericTracerProvider::get_tracer_boxed","value":"pub fn get_tracer_boxed(&Self, &'static str, Option<&'static str>)\n-> Box<dyn GenericTracer + Send + Sync>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Creates a named tracer instance that is a trait object through the underlying `TracerProvider`.\n","sig":null,"attributes":[{"value":"/ Creates a named tracer instance that is a trait object through the underlying `TracerProvider`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":24978,"byte_end":25077,"line_start":158,"line_end":158,"column_start":5,"column_end":104}}]},{"kind":"Struct","id":{"krate":0,"index":1978},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25923,"byte_end":25943,"line_start":188,"line_end":188,"column_start":12,"column_end":32},"name":"GlobalTracerProvider","qualname":"::global::trace::GlobalTracerProvider","value":"GlobalTracerProvider {  }","parent":null,"children":[{"krate":0,"index":1979}],"decl_id":null,"docs":" Represents the globally configured [`TracerProvider`] instance for this\n application. This allows generic tracing through the returned\n [`BoxedTracer`] instances.","sig":null,"attributes":[{"value":"/ Represents the globally configured [`TracerProvider`] instance for this","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25658,"byte_end":25733,"line_start":182,"line_end":182,"column_start":1,"column_end":76}},{"value":"/ application. This allows generic tracing through the returned","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25734,"byte_end":25799,"line_start":183,"line_end":183,"column_start":1,"column_end":66}},{"value":"/ [`BoxedTracer`] instances.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25800,"byte_end":25830,"line_start":184,"line_end":184,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25831,"byte_end":25834,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25835,"byte_end":25887,"line_start":186,"line_end":186,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":116},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27223,"byte_end":27238,"line_start":225,"line_end":225,"column_start":8,"column_end":23},"name":"tracer_provider","qualname":"::global::trace::tracer_provider","value":"pub fn tracer_provider() -> GlobalTracerProvider","parent":null,"children":[],"decl_id":null,"docs":" Returns an instance of the currently configured global [`TracerProvider`] through\n [`GlobalTracerProvider`].","sig":null,"attributes":[{"value":"/ Returns an instance of the currently configured global [`TracerProvider`] through","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":26977,"byte_end":27062,"line_start":220,"line_end":220,"column_start":1,"column_end":86}},{"value":"/ [`GlobalTracerProvider`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27063,"byte_end":27092,"line_start":221,"line_end":221,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27093,"byte_end":27096,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27097,"byte_end":27149,"line_start":223,"line_end":223,"column_start":1,"column_end":53}},{"value":"/ [`GlobalTracerProvider`]: crate::global::GlobalTracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27150,"byte_end":27215,"line_start":224,"line_end":224,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27706,"byte_end":27712,"line_start":239,"line_end":239,"column_start":8,"column_end":14},"name":"tracer","qualname":"::global::trace::tracer","value":"pub fn tracer(&'static str) -> BoxedTracer","parent":null,"children":[],"decl_id":null,"docs":" Creates a named instance of [`Tracer`] via the configured [`GlobalTracerProvider`].","sig":null,"attributes":[{"value":"/ Creates a named instance of [`Tracer`] via the configured [`GlobalTracerProvider`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27388,"byte_end":27475,"line_start":232,"line_end":232,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27476,"byte_end":27479,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ If the name is an empty string, the provider will use a default name.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27480,"byte_end":27553,"line_start":234,"line_end":234,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27554,"byte_end":27557,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ This is a more convenient way of expressing `global::tracer_provider().get_tracer(name, None)`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27558,"byte_end":27657,"line_start":236,"line_end":236,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27658,"byte_end":27661,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ [`Tracer`]: crate::trace::Tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27662,"byte_end":27698,"line_start":238,"line_end":238,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":118},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28132,"byte_end":28151,"line_start":249,"line_end":249,"column_start":8,"column_end":27},"name":"tracer_with_version","qualname":"::global::trace::tracer_with_version","value":"pub fn tracer_with_version(&'static str, &'static str) -> BoxedTracer","parent":null,"children":[],"decl_id":null,"docs":" Creates a named instance of [`Tracer`] with version info via the configured [`GlobalTracerProvider`]","sig":null,"attributes":[{"value":"/ Creates a named instance of [`Tracer`] with version info via the configured [`GlobalTracerProvider`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27798,"byte_end":27902,"line_start":243,"line_end":243,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27903,"byte_end":27906,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ If the name is an empty string, the provider will use a default name.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27907,"byte_end":27980,"line_start":245,"line_end":245,"column_start":1,"column_end":74}},{"value":"/ If the version is an empty string, it will be used as part of instrumentation library information.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":27981,"byte_end":28083,"line_start":246,"line_end":246,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28084,"byte_end":28087,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ [`Tracer`]: crate::trace::Tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28088,"byte_end":28124,"line_start":248,"line_end":248,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":119},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28424,"byte_end":28443,"line_start":257,"line_end":257,"column_start":8,"column_end":27},"name":"set_tracer_provider","qualname":"::global::trace::set_tracer_provider","value":"pub fn set_tracer_provider<P, T, S>(P) -> GlobalTracerProvider where\nS: trace::Span + Send + Sync, T: trace::Tracer<Span = S> + Send + Sync,\nP: trace::TracerProvider<Tracer = T> + Send + Sync","parent":null,"children":[],"decl_id":null,"docs":" Sets the given [`TracerProvider`] instance as the current global provider.","sig":null,"attributes":[{"value":"/ Sets the given [`TracerProvider`] instance as the current global provider.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28269,"byte_end":28347,"line_start":253,"line_end":253,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28348,"byte_end":28351,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28352,"byte_end":28404,"line_start":255,"line_end":255,"column_start":1,"column_end":53}},{"value":"must_use","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28405,"byte_end":28416,"line_start":256,"line_end":256,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":29049,"byte_end":29073,"line_start":274,"line_end":274,"column_start":8,"column_end":32},"name":"shutdown_tracer_provider","qualname":"::global::trace::shutdown_tracer_provider","value":"pub fn shutdown_tracer_provider()","parent":null,"children":[],"decl_id":null,"docs":" Shut down the current tracer provider. This will invoke the shutdown method on all span processors.\n span processors should export remaining spans before return\n","sig":null,"attributes":[{"value":"/ Shut down the current tracer provider. This will invoke the shutdown method on all span processors.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28874,"byte_end":28977,"line_start":272,"line_end":272,"column_start":1,"column_end":104}},{"value":"/ span processors should export remaining spans before return","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":28978,"byte_end":29041,"line_start":273,"line_end":273,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":169},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sdk","qualname":"::sdk","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":196},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":453},{"krate":0,"index":510},{"krate":0,"index":1107},{"krate":0,"index":1110},{"krate":0,"index":1113}],"decl_id":null,"docs":" # OpenTelemetry SDK","sig":null,"attributes":[{"value":"/ # OpenTelemetry SDK","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":37775,"byte_end":37798,"line_start":1,"line_end":1,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":37799,"byte_end":37802,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This SDK provides an opinionated reference implementation of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":37803,"byte_end":37867,"line_start":3,"line_end":3,"column_start":1,"column_end":65}},{"value":"/ the OpenTelemetry API. The SDK implements the specifics of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":37868,"byte_end":37930,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/ deciding which data to collect through `Sampler`s, and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":37931,"byte_end":37989,"line_start":5,"line_end":5,"column_start":1,"column_end":59}},{"value":"/ facilitates the delivery of telemetry data to storage systems","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":37990,"byte_end":38055,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ through `Exporter`s. These can be configured on `Tracer` and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38056,"byte_end":38120,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ `Meter` creation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38121,"byte_end":38142,"line_start":8,"line_end":8,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"env","qualname":"::sdk::env","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":1995},{"krate":0,"index":1997},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194}],"decl_id":null,"docs":" EnvResourceDetector","sig":null,"attributes":[{"value":"/ EnvResourceDetector","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":38610,"byte_end":38633,"line_start":1,"line_end":1,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":38634,"byte_end":38637,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Implementation of `ResourceDetector` to extract a `Resource` from environment","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":38638,"byte_end":38719,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ variables.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":38720,"byte_end":38734,"line_start":4,"line_end":4,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1995},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39259,"byte_end":39278,"line_start":19,"line_end":19,"column_start":12,"column_end":31},"name":"EnvResourceDetector","qualname":"::sdk::env::EnvResourceDetector","value":"EnvResourceDetector {  }","parent":null,"children":[{"krate":0,"index":1996}],"decl_id":null,"docs":" Resource detector implements ResourceDetector and is used to extract\n general SDK configuration from environment.","sig":null,"attributes":[{"value":"/ Resource detector implements ResourceDetector and is used to extract","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":38921,"byte_end":38993,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ general SDK configuration from environment.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":38994,"byte_end":39041,"line_start":13,"line_end":13,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39042,"byte_end":39045,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ See","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39046,"byte_end":39053,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ [semantic conventions](https://github.com/open-telemetry/opentelemetry-specification/tree/master/specification/resource/semantic_conventions#telemetry-sdk)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39054,"byte_end":39213,"line_start":16,"line_end":16,"column_start":1,"column_end":160}},{"value":"/ for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39214,"byte_end":39230,"line_start":17,"line_end":17,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39705,"byte_end":39708,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<EnvResourceDetector>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create `EnvResourceDetector` instance.\n","sig":null,"attributes":[{"value":"/ Create `EnvResourceDetector` instance.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39651,"byte_end":39693,"line_start":33,"line_end":33,"column_start":5,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":196},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"export","qualname":"::sdk::export","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":295}],"decl_id":null,"docs":" Metrics Export\n","sig":null,"attributes":[{"value":"/ Metrics Export","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41607,"byte_end":41625,"line_start":1,"line_end":1,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":197},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"trace","qualname":"::sdk::export::trace","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":294},{"krate":0,"index":2034},{"krate":0,"index":2039},{"krate":0,"index":2053},{"krate":0,"index":2055},{"krate":0,"index":2057},{"krate":0,"index":2058}],"decl_id":null,"docs":" Trace exporters\n","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41722,"byte_end":41747,"line_start":5,"line_end":5,"column_start":1,"column_end":26}},{"value":"/ Trace exporters","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42032,"byte_end":42051,"line_start":1,"line_end":1,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":236},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stdout","qualname":"::sdk::export::trace::stdout","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":1999},{"krate":0,"index":2004},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":286},{"krate":0,"index":2007},{"krate":0,"index":2011},{"krate":0,"index":289},{"krate":0,"index":2014},{"krate":0,"index":2031},{"krate":0,"index":2020},{"krate":0,"index":2025},{"krate":0,"index":2027},{"krate":0,"index":2029},{"krate":0,"index":292}],"decl_id":null,"docs":" # Stdout Span Exporter","sig":null,"attributes":[{"value":"/ # Stdout Span Exporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47129,"byte_end":47155,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47156,"byte_end":47159,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The stdout [`SpanExporter`] writes debug printed [`Span`]s to its configured","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47160,"byte_end":47240,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ [`Write`] instance. By default it will write to [`Stdout`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47241,"byte_end":47304,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47305,"byte_end":47308,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [`SpanExporter`]: super::SpanExporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47309,"byte_end":47350,"line_start":6,"line_end":6,"column_start":1,"column_end":42}},{"value":"/ [`Span`]: crate::trace::Span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47351,"byte_end":47383,"line_start":7,"line_end":7,"column_start":1,"column_end":33}},{"value":"/ [`Write`]: std::io::Write","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47384,"byte_end":47413,"line_start":8,"line_end":8,"column_start":1,"column_end":30}},{"value":"/ [`Stdout`]: std::io::Stdout","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47414,"byte_end":47445,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47446,"byte_end":47449,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47450,"byte_end":47464,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47465,"byte_end":47468,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47469,"byte_end":47482,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ use opentelemetry::trace::Tracer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47483,"byte_end":47520,"line_start":14,"line_end":14,"column_start":1,"column_end":38}},{"value":"/ use opentelemetry::sdk::export::trace::stdout;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47521,"byte_end":47571,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/ use opentelemetry::global::shutdown_tracer_provider;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47572,"byte_end":47628,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47629,"byte_end":47632,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47633,"byte_end":47648,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/     let tracer = stdout::new_pipeline()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47649,"byte_end":47692,"line_start":19,"line_end":19,"column_start":1,"column_end":44}},{"value":"/         .with_pretty_print(true)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47693,"byte_end":47729,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/         .install_simple();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47730,"byte_end":47760,"line_start":21,"line_end":21,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47761,"byte_end":47764,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_work\", |cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47765,"byte_end":47808,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/         // Traced app logic here...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47809,"byte_end":47848,"line_start":24,"line_end":24,"column_start":1,"column_end":40}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47849,"byte_end":47860,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47861,"byte_end":47864,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/     shutdown_tracer_provider(); // sending remaining spans","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47865,"byte_end":47927,"line_start":27,"line_end":27,"column_start":1,"column_end":63}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47928,"byte_end":47933,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":47934,"byte_end":47941,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1999},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48243,"byte_end":48258,"line_start":44,"line_end":44,"column_start":12,"column_end":27},"name":"PipelineBuilder","qualname":"::sdk::export::trace::stdout::PipelineBuilder","value":"PipelineBuilder {  }","parent":null,"children":[{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003}],"decl_id":null,"docs":" Pipeline builder\n","sig":null,"attributes":[{"value":"/ Pipeline builder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48194,"byte_end":48214,"line_start":42,"line_end":42,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48417,"byte_end":48429,"line_start":51,"line_end":51,"column_start":8,"column_end":20},"name":"new_pipeline","qualname":"::sdk::export::trace::stdout::new_pipeline","value":"pub fn new_pipeline() -> PipelineBuilder<Stdout>","parent":null,"children":[],"decl_id":null,"docs":" Create a new stdout exporter pipeline builder.\n","sig":null,"attributes":[{"value":"/ Create a new stdout exporter pipeline builder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48359,"byte_end":48409,"line_start":50,"line_end":50,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48828,"byte_end":48845,"line_start":68,"line_end":68,"column_start":12,"column_end":29},"name":"with_pretty_print","qualname":"<PipelineBuilder<W>>::with_pretty_print","value":"pub fn with_pretty_print(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the pretty print setting.\n","sig":null,"attributes":[{"value":"/ Specify the pretty print setting.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48779,"byte_end":48816,"line_start":67,"line_end":67,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":49003,"byte_end":49020,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"with_trace_config","qualname":"<PipelineBuilder<W>>::with_trace_config","value":"pub fn with_trace_config(Self, sdk::trace::Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign the SDK trace configuration.\n","sig":null,"attributes":[{"value":"/ Assign the SDK trace configuration.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48952,"byte_end":48991,"line_start":73,"line_end":73,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":49177,"byte_end":49188,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"with_writer","qualname":"<PipelineBuilder<W>>::with_writer","value":"pub fn with_writer<T: Write>(Self, T) -> PipelineBuilder<T>","parent":null,"children":[],"decl_id":null,"docs":" Specify the writer to use.\n","sig":null,"attributes":[{"value":"/ Specify the writer to use.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":49135,"byte_end":49165,"line_start":79,"line_end":79,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":49556,"byte_end":49570,"line_start":94,"line_end":94,"column_start":12,"column_end":26},"name":"install_simple","qualname":"<PipelineBuilder<W>>::install_simple","value":"pub fn install_simple(Self) -> sdk::trace::Tracer","parent":null,"children":[],"decl_id":null,"docs":" Install the stdout exporter pipeline with the recommended defaults.\n","sig":null,"attributes":[{"value":"/ Install the stdout exporter pipeline with the recommended defaults.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":49473,"byte_end":49544,"line_start":93,"line_end":93,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2007},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50366,"byte_end":50374,"line_start":116,"line_end":116,"column_start":12,"column_end":20},"name":"Exporter","qualname":"::sdk::export::trace::stdout::Exporter","value":"Exporter {  }","parent":null,"children":[{"krate":0,"index":2009},{"krate":0,"index":2010}],"decl_id":null,"docs":" A [`SpanExporter`] that writes to [`Stdout`] or other configured [`Write`].","sig":null,"attributes":[{"value":"/ A [`SpanExporter`] that writes to [`Stdout`] or other configured [`Write`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50150,"byte_end":50229,"line_start":110,"line_end":110,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50230,"byte_end":50233,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ [`SpanExporter`]: super::SpanExporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50234,"byte_end":50275,"line_start":112,"line_end":112,"column_start":1,"column_end":42}},{"value":"/ [`Write`]: std::io::Write","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50276,"byte_end":50305,"line_start":113,"line_end":113,"column_start":1,"column_end":30}},{"value":"/ [`Stdout`]: std::io::Stdout","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50306,"byte_end":50337,"line_start":114,"line_end":114,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50509,"byte_end":50512,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<Exporter<W>>::new","value":"pub fn new(W, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new stdout `Exporter`.\n","sig":null,"attributes":[{"value":"/ Create a new stdout `Exporter`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50462,"byte_end":50497,"line_start":122,"line_end":122,"column_start":5,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":294},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42391,"byte_end":42403,"line_start":18,"line_end":18,"column_start":10,"column_end":22},"name":"ExportResult","qualname":"::sdk::export::trace::ExportResult","value":"Result<(), TraceError>","parent":null,"children":[],"decl_id":null,"docs":" Describes the result of an export.\n","sig":null,"attributes":[{"value":"/ Describes the result of an export.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42343,"byte_end":42381,"line_start":17,"line_end":17,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":2034},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42868,"byte_end":42880,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"SpanExporter","qualname":"::sdk::export::trace::SpanExporter","value":"SpanExporter: Send + Debug","parent":null,"children":[{"krate":0,"index":2035},{"krate":0,"index":2038}],"decl_id":null,"docs":" `SpanExporter` defines the interface that protocol-specific exporters must\n implement so that they can be plugged into OpenTelemetry SDK and support\n sending of telemetry data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2035},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":43539,"byte_end":43545,"line_start":41,"line_end":41,"column_start":14,"column_end":20},"name":"export","qualname":"::sdk::export::trace::SpanExporter::export","value":"pub fn export<'life0, 'async_trait>(&'life0 mut Self, Vec<SpanData>)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ExportResult> +\n                         ::core::marker::Send + 'async_trait>> where\n'life0:'async_trait, Self: 'async_trait","parent":{"krate":0,"index":2034},"children":[],"decl_id":null,"docs":" Exports a batch of readable spans. Protocol exporters that will\n implement this function are typically expected to serialize and transmit\n the data to the destination.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42843,"byte_end":42857,"line_start":27,"line_end":27,"column_start":1,"column_end":15}},{"value":"allow(clippy :: type_complexity, clippy :: type_repetition_in_bounds)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42843,"byte_end":42857,"line_start":27,"line_end":27,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44188,"byte_end":44196,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"shutdown","qualname":"::sdk::export::trace::SpanExporter::shutdown","value":"pub fn shutdown(&mut Self)","parent":{"krate":0,"index":2034},"children":[],"decl_id":null,"docs":" Shuts down the exporter. Called when SDK is shut down. This is an\n opportunity for exporter to do any cleanup required.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2039},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44447,"byte_end":44455,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"SpanData","qualname":"::sdk::export::trace::SpanData","value":"SpanData { span_context, parent_span_id, span_kind, name, start_time, end_time, attributes, message_events, links, status_code, status_message, resource, instrumentation_lib }","parent":null,"children":[{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052}],"decl_id":null,"docs":" `SpanData` contains all the information collected by a `Span` and can be used\n by exporters as a standard input.\n","sig":null,"attributes":[{"value":"/ `SpanData` contains all the information collected by a `Span` and can be used","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44214,"byte_end":44295,"line_start":57,"line_end":57,"column_start":1,"column_end":82}},{"value":"/ by exporters as a standard input.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44296,"byte_end":44333,"line_start":58,"line_end":58,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":2040},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44499,"byte_end":44511,"line_start":63,"line_end":63,"column_start":9,"column_end":21},"name":"span_context","qualname":"::sdk::export::trace::SpanData::span_context","value":"trace::span_context::SpanContext","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Exportable `SpanContext`\n","sig":null,"attributes":[{"value":"/ Exportable `SpanContext`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44462,"byte_end":44490,"line_start":62,"line_end":62,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2041},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44557,"byte_end":44571,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"name":"parent_span_id","qualname":"::sdk::export::trace::SpanData::parent_span_id","value":"trace::span_context::SpanId","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span parent id\n","sig":null,"attributes":[{"value":"/ Span parent id","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44530,"byte_end":44548,"line_start":64,"line_end":64,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2042},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44607,"byte_end":44616,"line_start":67,"line_end":67,"column_start":9,"column_end":18},"name":"span_kind","qualname":"::sdk::export::trace::SpanData::span_kind","value":"trace::span::SpanKind","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span kind\n","sig":null,"attributes":[{"value":"/ Span kind","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44585,"byte_end":44598,"line_start":66,"line_end":66,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2043},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44654,"byte_end":44658,"line_start":69,"line_end":69,"column_start":9,"column_end":13},"name":"name","qualname":"::sdk::export::trace::SpanData::name","value":"std::string::String","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span name\n","sig":null,"attributes":[{"value":"/ Span name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44632,"byte_end":44645,"line_start":68,"line_end":68,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2044},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44700,"byte_end":44710,"line_start":71,"line_end":71,"column_start":9,"column_end":19},"name":"start_time","qualname":"::sdk::export::trace::SpanData::start_time","value":"std::time::SystemTime","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span start time\n","sig":null,"attributes":[{"value":"/ Span start time","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44672,"byte_end":44691,"line_start":70,"line_end":70,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2045},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44754,"byte_end":44762,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"end_time","qualname":"::sdk::export::trace::SpanData::end_time","value":"std::time::SystemTime","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span end time\n","sig":null,"attributes":[{"value":"/ Span end time","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44728,"byte_end":44745,"line_start":72,"line_end":72,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2046},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44808,"byte_end":44818,"line_start":75,"line_end":75,"column_start":9,"column_end":19},"name":"attributes","qualname":"::sdk::export::trace::SpanData::attributes","value":"sdk::trace::evicted_hash_map::EvictedHashMap","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span attributes\n","sig":null,"attributes":[{"value":"/ Span attributes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44780,"byte_end":44799,"line_start":74,"line_end":74,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2047},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44884,"byte_end":44898,"line_start":77,"line_end":77,"column_start":9,"column_end":23},"name":"message_events","qualname":"::sdk::export::trace::SpanData::message_events","value":"sdk::trace::evicted_queue::EvictedQueue<trace::event::Event>","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span Message events\n","sig":null,"attributes":[{"value":"/ Span Message events","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44852,"byte_end":44875,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2048},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44960,"byte_end":44965,"line_start":79,"line_end":79,"column_start":9,"column_end":14},"name":"links","qualname":"::sdk::export::trace::SpanData::links","value":"sdk::trace::evicted_queue::EvictedQueue<trace::link::Link>","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span Links\n","sig":null,"attributes":[{"value":"/ Span Links","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":44937,"byte_end":44951,"line_start":78,"line_end":78,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2049},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":45032,"byte_end":45043,"line_start":81,"line_end":81,"column_start":9,"column_end":20},"name":"status_code","qualname":"::sdk::export::trace::SpanData::status_code","value":"trace::span::StatusCode","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span status code\n","sig":null,"attributes":[{"value":"/ Span status code","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":45003,"byte_end":45023,"line_start":80,"line_end":80,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2050},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":45093,"byte_end":45107,"line_start":83,"line_end":83,"column_start":9,"column_end":23},"name":"status_message","qualname":"::sdk::export::trace::SpanData::status_message","value":"std::string::String","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Span status message\n","sig":null,"attributes":[{"value":"/ Span status message","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":45061,"byte_end":45084,"line_start":82,"line_end":82,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2051},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":45210,"byte_end":45218,"line_start":85,"line_end":85,"column_start":9,"column_end":17},"name":"resource","qualname":"::sdk::export::trace::SpanData::resource","value":"std::sync::Arc<sdk::resource::Resource>","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Resource contains attributes representing an entity that produced this span.\n","sig":null,"attributes":[{"value":"/ Resource contains attributes representing an entity that produced this span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":45121,"byte_end":45201,"line_start":84,"line_end":84,"column_start":5,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":2052},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":45356,"byte_end":45375,"line_start":88,"line_end":88,"column_start":9,"column_end":28},"name":"instrumentation_lib","qualname":"::sdk::export::trace::SpanData::instrumentation_lib","value":"sdk::instrumentation::InstrumentationLibrary","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" Instrumentation library that produced this span\n","sig":null,"attributes":[{"value":"/ Instrumentation library that produced this span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":45244,"byte_end":45295,"line_start":86,"line_end":86,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":295},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41873,"byte_end":41884,"line_start":10,"line_end":10,"column_start":11,"column_end":22},"name":"ExportError","qualname":"::sdk::export::ExportError","value":"ExportError: std::error::Error + Send + Sync + 'static","parent":null,"children":[{"krate":0,"index":296}],"decl_id":null,"docs":" Marker trait for errors returned by exporters\n","sig":null,"attributes":[{"value":"/ Marker trait for errors returned by exporters","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41813,"byte_end":41862,"line_start":9,"line_end":9,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41991,"byte_end":42004,"line_start":12,"line_end":12,"column_start":8,"column_end":21},"name":"exporter_name","qualname":"::sdk::export::ExportError::exporter_name","value":"pub fn exporter_name(&Self) -> &'static str","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" The name of exporter that returned this error\n","sig":null,"attributes":[{"value":"/ The name of exporter that returned this error","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41934,"byte_end":41983,"line_start":11,"line_end":11,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":297},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"instrumentation","qualname":"::sdk::instrumentation","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","parent":null,"children":[{"krate":0,"index":2061},{"krate":0,"index":2064},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":298}],"decl_id":null,"docs":" Provides instrumentation information for both tracing and metric.\n See `OTEPS-0083` for details.","sig":null,"attributes":[{"value":"/ Provides instrumentation information for both tracing and metric.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51494,"byte_end":51563,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ See `OTEPS-0083` for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51564,"byte_end":51597,"line_start":2,"line_end":2,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51598,"byte_end":51601,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ [OTEPS-0083](https://github.com/open-telemetry/oteps/blob/master/text/0083-component.md)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51602,"byte_end":51694,"line_start":4,"line_end":4,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":2061},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52091,"byte_end":52113,"line_start":13,"line_end":13,"column_start":12,"column_end":34},"name":"InstrumentationLibrary","qualname":"::sdk::instrumentation::InstrumentationLibrary","value":"InstrumentationLibrary { name, version }","parent":null,"children":[{"krate":0,"index":2062},{"krate":0,"index":2063}],"decl_id":null,"docs":" InstrumentationLibrary contains information about instrumentation library.","sig":null,"attributes":[{"value":"/ InstrumentationLibrary contains information about instrumentation library.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51696,"byte_end":51774,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51775,"byte_end":51778,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ See `Instrumentation Libraries` for more information.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51779,"byte_end":51836,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51837,"byte_end":51840,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`Instrumentation Libraries`](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#instrumentation-libraries)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":51841,"byte_end":52001,"line_start":10,"line_end":10,"column_start":1,"column_end":161}},{"value":"non_exhaustive","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52062,"byte_end":52079,"line_start":12,"line_end":12,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2062},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52178,"byte_end":52182,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"name","qualname":"::sdk::instrumentation::InstrumentationLibrary::name","value":"&'static str","parent":{"krate":0,"index":2061},"children":[],"decl_id":null,"docs":" instrumentation library name, cannot be empty\n","sig":null,"attributes":[{"value":"/ instrumentation library name, cannot be empty","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52120,"byte_end":52169,"line_start":14,"line_end":14,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2063},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52260,"byte_end":52267,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"name":"version","qualname":"::sdk::instrumentation::InstrumentationLibrary::version","value":"std::option::Option<&'static str>","parent":{"krate":0,"index":2061},"children":[],"decl_id":null,"docs":" instrumentation library version, can be empty\n","sig":null,"attributes":[{"value":"/ instrumentation library version, can be empty","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52202,"byte_end":52251,"line_start":16,"line_end":16,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52399,"byte_end":52402,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<InstrumentationLibrary>::new","value":"pub fn new(&'static str, Option<&'static str>) -> InstrumentationLibrary","parent":null,"children":[],"decl_id":null,"docs":" Create an InstrumentationLibrary from name and version.\n","sig":null,"attributes":[{"value":"/ Create an InstrumentationLibrary from name and version.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52328,"byte_end":52387,"line_start":21,"line_end":21,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":300},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"propagation","qualname":"::sdk::propagation","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/mod.rs","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":356},{"krate":0,"index":384},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450}],"decl_id":null,"docs":" OpenTelemetry Propagators\n","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38293,"byte_end":38318,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"/ OpenTelemetry Propagators","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/mod.rs","byte_start":52540,"byte_end":52569,"line_start":1,"line_end":1,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2097},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56657,"byte_end":56674,"line_start":101,"line_end":101,"column_start":12,"column_end":29},"name":"BaggagePropagator","qualname":"::sdk::propagation::baggage::BaggagePropagator","value":"BaggagePropagator {  }","parent":null,"children":[{"krate":0,"index":2098}],"decl_id":null,"docs":" Propagates name-value pairs in [W3C Baggage] format.","sig":null,"attributes":[{"value":"/ Propagates name-value pairs in [W3C Baggage] format.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":54924,"byte_end":54980,"line_start":58,"line_end":58,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":54981,"byte_end":54984,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Baggage is used to annotate telemetry, adding context and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":54985,"byte_end":55046,"line_start":60,"line_end":60,"column_start":1,"column_end":62}},{"value":"/ information to metrics, traces, and logs. It is an abstract data type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55047,"byte_end":55120,"line_start":61,"line_end":61,"column_start":1,"column_end":74}},{"value":"/ represented by a set of name-value pairs describing user-defined properties.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55121,"byte_end":55201,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/ Each name in a [`Baggage`] is associated with exactly one value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55202,"byte_end":55270,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/ `Baggage`s are serialized according to the editor's draft of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55271,"byte_end":55335,"line_start":64,"line_end":64,"column_start":1,"column_end":65}},{"value":"/ the [W3C Baggage] specification.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55336,"byte_end":55372,"line_start":65,"line_end":65,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55373,"byte_end":55376,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55377,"byte_end":55391,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55392,"byte_end":55395,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55396,"byte_end":55403,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Key, propagation::TextMapPropagator};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55404,"byte_end":55486,"line_start":70,"line_end":70,"column_start":1,"column_end":83}},{"value":"/ use opentelemetry::sdk::propagation::BaggagePropagator;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55487,"byte_end":55546,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55547,"byte_end":55581,"line_start":72,"line_end":72,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55582,"byte_end":55585,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // Example baggage value passed in externally via http headers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55586,"byte_end":55652,"line_start":74,"line_end":74,"column_start":1,"column_end":67}},{"value":"/ let mut headers = HashMap::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55653,"byte_end":55690,"line_start":75,"line_end":75,"column_start":1,"column_end":38}},{"value":"/ headers.insert(\"baggage\".to_string(), \"user_id=1\".to_string());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55691,"byte_end":55758,"line_start":76,"line_end":76,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55759,"byte_end":55762,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ let propagator = BaggagePropagator::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55763,"byte_end":55809,"line_start":78,"line_end":78,"column_start":1,"column_end":47}},{"value":"/ // can extract from any type that impls `Extractor`, usually an HTTP header map","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55810,"byte_end":55893,"line_start":79,"line_end":79,"column_start":1,"column_end":84}},{"value":"/ let cx = propagator.extract(&headers);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55894,"byte_end":55936,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55937,"byte_end":55940,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Iterate over extracted name-value pairs","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55941,"byte_end":55987,"line_start":82,"line_end":82,"column_start":1,"column_end":47}},{"value":"/ for (name, value) in cx.baggage() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":55988,"byte_end":56027,"line_start":83,"line_end":83,"column_start":1,"column_end":40}},{"value":"/     // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56028,"byte_end":56042,"line_start":84,"line_end":84,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56043,"byte_end":56048,"line_start":85,"line_end":85,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56049,"byte_end":56052,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ // Add new baggage","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56053,"byte_end":56075,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"/ let cx_with_additions = cx.with_baggage(vec![Key::new(\"server_id\").i64(42)]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56076,"byte_end":56157,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56158,"byte_end":56161,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // Inject baggage into http request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56162,"byte_end":56201,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"/ propagator.inject_context(&cx_with_additions, &mut headers);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56202,"byte_end":56266,"line_start":91,"line_end":91,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56267,"byte_end":56270,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ let header_value = headers.get(\"baggage\").expect(\"header is injected\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56271,"byte_end":56346,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/ assert!(header_value.contains(\"user_id=1\"), \"still contains previous name-value\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56347,"byte_end":56433,"line_start":94,"line_end":94,"column_start":1,"column_end":87}},{"value":"/ assert!(header_value.contains(\"server_id=42\"), \"contains new name-value pair\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56434,"byte_end":56517,"line_start":95,"line_end":95,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56518,"byte_end":56525,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56526,"byte_end":56529,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [W3C Baggage]: https://w3c.github.io/baggage","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56530,"byte_end":56578,"line_start":98,"line_end":98,"column_start":1,"column_end":49}},{"value":"/ [`Baggage`]: crate::baggage::Baggage","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56579,"byte_end":56619,"line_start":99,"line_end":99,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56778,"byte_end":56781,"line_start":107,"line_end":107,"column_start":12,"column_end":15},"name":"new","qualname":"<BaggagePropagator>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new baggage propagator.\n","sig":null,"attributes":[{"value":"/ Construct a new baggage propagator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56727,"byte_end":56766,"line_start":106,"line_end":106,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":2103},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69069,"byte_end":69095,"line_start":62,"line_end":62,"column_start":12,"column_end":38},"name":"TextMapCompositePropagator","qualname":"::sdk::propagation::composite::TextMapCompositePropagator","value":"TextMapCompositePropagator {  }","parent":null,"children":[{"krate":0,"index":2104},{"krate":0,"index":2105}],"decl_id":null,"docs":" Composite propagator","sig":null,"attributes":[{"value":"/ Composite propagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67151,"byte_end":67175,"line_start":7,"line_end":7,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67176,"byte_end":67179,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ A propagator that chains multiple [`TextMapPropagator`] propagators together,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67180,"byte_end":67261,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/ injecting or extracting by their respective HTTP header names.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67262,"byte_end":67328,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67329,"byte_end":67332,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Injection and extraction from this propagator will preserve the order of the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67333,"byte_end":67413,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ injectors and extractors passed in during initialization.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67414,"byte_end":67475,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67476,"byte_end":67479,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`TextMapPropagator`]: crate::propagation::TextMapPropagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67480,"byte_end":67544,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67545,"byte_end":67548,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67549,"byte_end":67563,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67564,"byte_end":67567,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67568,"byte_end":67575,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67576,"byte_end":67600,"line_start":20,"line_end":20,"column_start":1,"column_end":25}},{"value":"/     baggage::BaggageExt,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67601,"byte_end":67629,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/     propagation::TextMapPropagator,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67630,"byte_end":67669,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/     trace::{TraceContextExt, Tracer, TracerProvider},","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67670,"byte_end":67727,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"/     Context, KeyValue,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67728,"byte_end":67754,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/ };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67755,"byte_end":67761,"line_start":25,"line_end":25,"column_start":1,"column_end":7}},{"value":"/ use opentelemetry::sdk::propagation::{","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67762,"byte_end":67804,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/     BaggagePropagator, TextMapCompositePropagator, TraceContextPropagator,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67805,"byte_end":67883,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67884,"byte_end":67890,"line_start":28,"line_end":28,"column_start":1,"column_end":7}},{"value":"/ use opentelemetry::sdk::trace as sdktrace;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67891,"byte_end":67937,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67938,"byte_end":67972,"line_start":30,"line_end":30,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67973,"byte_end":67976,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // First create 1 or more propagators","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":67977,"byte_end":68018,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ let baggage_propagator = BaggagePropagator::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68019,"byte_end":68073,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/ let trace_context_propagator = TraceContextPropagator::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68074,"byte_end":68139,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68140,"byte_end":68143,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // Then create a composite propagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68144,"byte_end":68185,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/ let composite_propagator = TextMapCompositePropagator::new(vec![","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68186,"byte_end":68254,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/     Box::new(baggage_propagator),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68255,"byte_end":68292,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/     Box::new(trace_context_propagator),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68293,"byte_end":68336,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ ]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68337,"byte_end":68344,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68345,"byte_end":68348,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Then for a given implementation of `Injector`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68349,"byte_end":68401,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/ let mut injector = HashMap::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68402,"byte_end":68440,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68441,"byte_end":68444,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // And a given span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68445,"byte_end":68468,"line_start":45,"line_end":45,"column_start":1,"column_end":24}},{"value":"/ let example_span = sdktrace::TracerProvider::default()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68469,"byte_end":68527,"line_start":46,"line_end":46,"column_start":1,"column_end":59}},{"value":"/     .get_tracer(\"example-component\", None)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68528,"byte_end":68574,"line_start":47,"line_end":47,"column_start":1,"column_end":47}},{"value":"/     .start(\"span-name\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68575,"byte_end":68603,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68604,"byte_end":68607,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // with the current context, call inject to add the headers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68608,"byte_end":68671,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ composite_propagator.inject_context(","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68672,"byte_end":68712,"line_start":51,"line_end":51,"column_start":1,"column_end":41}},{"value":"/     &Context::current_with_span(example_span)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68713,"byte_end":68762,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/         .with_baggage(vec![KeyValue::new(\"test\", \"example\")]),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68763,"byte_end":68829,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/     &mut injector,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68830,"byte_end":68852,"line_start":54,"line_end":54,"column_start":1,"column_end":23}},{"value":"/ );","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68853,"byte_end":68859,"line_start":55,"line_end":55,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68860,"byte_end":68863,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // The injector now has both `baggage` and `traceparent` headers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68864,"byte_end":68932,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ assert!(injector.get(\"baggage\").is_some());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68933,"byte_end":68980,"line_start":58,"line_end":58,"column_start":1,"column_end":48}},{"value":"/ assert!(injector.get(\"traceparent\").is_some());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":68981,"byte_end":69032,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69033,"byte_end":69040,"line_start":60,"line_end":60,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69391,"byte_end":69394,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<TextMapCompositePropagator>::new","value":"pub fn new(Vec<Box<dyn TextMapPropagator + Send + Sync>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new propagator out of instances of [`TextMapPropagator`].","sig":null,"attributes":[{"value":"/ Constructs a new propagator out of instances of [`TextMapPropagator`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69228,"byte_end":69302,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69307,"byte_end":69310,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ [`TextMapPropagator`]: crate::propagation::TextMapPropagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69315,"byte_end":69379,"line_start":70,"line_end":70,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":2124},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":78321,"byte_end":78343,"line_start":43,"line_end":43,"column_start":12,"column_end":34},"name":"TraceContextPropagator","qualname":"::sdk::propagation::trace_context::TraceContextPropagator","value":"TraceContextPropagator {  }","parent":null,"children":[{"krate":0,"index":2125}],"decl_id":null,"docs":" Propagates `SpanContext`s in [W3C TraceContext] format.","sig":null,"attributes":[{"value":"/ Propagates `SpanContext`s in [W3C TraceContext] format.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":78152,"byte_end":78211,"line_start":39,"line_end":39,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":78212,"byte_end":78215,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [W3C TraceContext]: https://www.w3.org/TR/trace-context/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":78216,"byte_end":78276,"line_start":41,"line_end":41,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":78455,"byte_end":78458,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<TraceContextPropagator>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TraceContextPropagator`.\n","sig":null,"attributes":[{"value":"/ Create a new `TraceContextPropagator`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":78401,"byte_end":78443,"line_start":48,"line_end":48,"column_start":5,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":453},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"resource","qualname":"::sdk::resource","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":2132},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":2142},{"krate":0,"index":2145},{"krate":0,"index":492},{"krate":0,"index":495},{"krate":0,"index":2147},{"krate":0,"index":2151},{"krate":0,"index":499},{"krate":0,"index":503},{"krate":0,"index":508}],"decl_id":null,"docs":" # Resource","sig":null,"attributes":[{"value":"/ # Resource","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90029,"byte_end":90043,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90044,"byte_end":90047,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A `Resource` is an immutable representation of the entity producing telemetry. For example, a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90048,"byte_end":90145,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ process producing telemetry that is running in a container on Kubernetes has a Pod name, it is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90146,"byte_end":90244,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ in a namespace, and possibly is part of a Deployment which also has a name. All three of these","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90245,"byte_end":90343,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ attributes can be included in the `Resource`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90344,"byte_end":90393,"line_start":6,"line_end":6,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90394,"byte_end":90397,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The primary purpose of resources as a first-class concept in the SDK is decoupling of discovery","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90398,"byte_end":90497,"line_start":8,"line_end":8,"column_start":1,"column_end":100}},{"value":"/ of resource information from exporters. This allows for independent development and easy","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90498,"byte_end":90590,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ customization for users that need to integrate with closed source environments. When used with","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90591,"byte_end":90689,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ distributed tracing, a resource can be associated with the [`TracerProvider`] when it is created.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90690,"byte_end":90791,"line_start":11,"line_end":11,"column_start":1,"column_end":102}},{"value":"/ That association cannot be changed later. When associated with a `TracerProvider`, all `Span`s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90792,"byte_end":90890,"line_start":12,"line_end":12,"column_start":1,"column_end":99}},{"value":"/ produced by any `Tracer` from the provider are associated with this `Resource`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90891,"byte_end":90974,"line_start":13,"line_end":13,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90975,"byte_end":90978,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":90979,"byte_end":91031,"line_start":15,"line_end":15,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2132},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91602,"byte_end":91610,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"Resource","qualname":"::sdk::resource::Resource","value":"Resource {  }","parent":null,"children":[{"krate":0,"index":2133}],"decl_id":null,"docs":" Describes an entity about which identifying information and metadata is exposed.","sig":null,"attributes":[{"value":"/ Describes an entity about which identifying information and metadata is exposed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91307,"byte_end":91391,"line_start":25,"line_end":25,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91392,"byte_end":91395,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Items are sorted by their key, and are only overwritten if the value is an empty string.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91396,"byte_end":91488,"line_start":27,"line_end":27,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91907,"byte_end":91912,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"empty","qualname":"<Resource>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty resource.\n","sig":null,"attributes":[{"value":"/ Creates an empty resource.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91865,"byte_end":91895,"line_start":44,"line_end":44,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92194,"byte_end":92197,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"new","qualname":"<Resource>::new","value":"pub fn new<T: IntoIterator<Item = KeyValue>>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Resource` from key value pairs.","sig":null,"attributes":[{"value":"/ Create a new `Resource` from key value pairs.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92000,"byte_end":92049,"line_start":51,"line_end":51,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92054,"byte_end":92057,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Values are de-duplicated by key, and the first key-value pair with a non-empty string value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92062,"byte_end":92157,"line_start":53,"line_end":53,"column_start":5,"column_end":100}},{"value":"/ will be retained","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92162,"byte_end":92182,"line_start":54,"line_end":54,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92527,"byte_end":92541,"line_start":68,"line_end":68,"column_start":12,"column_end":26},"name":"from_detectors","qualname":"<Resource>::from_detectors","value":"pub fn from_detectors(Duration, Vec<Box<dyn ResourceDetector>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Resource` from resource detectors.","sig":null,"attributes":[{"value":"/ Create a new `Resource` from resource detectors.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92405,"byte_end":92457,"line_start":65,"line_end":65,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92462,"byte_end":92465,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ timeout will be applied to each detector.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92470,"byte_end":92515,"line_start":67,"line_end":67,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":93147,"byte_end":93152,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"merge","qualname":"<Resource>::merge","value":"pub fn merge(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Resource` by combining two resources.","sig":null,"attributes":[{"value":"/ Create a new `Resource` by combining two resources.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":92990,"byte_end":93045,"line_start":81,"line_end":81,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":93050,"byte_end":93053,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Keys from this resource have priority over keys from the merged resource.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":93058,"byte_end":93135,"line_start":83,"line_end":83,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":93901,"byte_end":93904,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"len","qualname":"<Resource>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of attributes for this resource\n","sig":null,"attributes":[{"value":"/ Returns the number of attributes for this resource","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":93835,"byte_end":93889,"line_start":111,"line_end":111,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":94029,"byte_end":94037,"line_start":117,"line_end":117,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Resource>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the resource contains no attributes.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the resource contains no attributes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":93959,"byte_end":94017,"line_start":116,"line_end":116,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":94181,"byte_end":94185,"line_start":122,"line_end":122,"column_start":12,"column_end":16},"name":"iter","qualname":"<Resource>::iter","value":"pub fn iter(&Self) -> Iter","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the attributes of this resource, sorted by key.\n","sig":null,"attributes":[{"value":"/ Gets an iterator over the attributes of this resource, sorted by key.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":94096,"byte_end":94169,"line_start":121,"line_end":121,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":2142},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95062,"byte_end":95070,"line_start":152,"line_end":152,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::sdk::resource::IntoIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An owned iterator over the entries of a `Resource`.\n","sig":null,"attributes":[{"value":"/ An owned iterator over the entries of a `Resource`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":94978,"byte_end":95033,"line_start":150,"line_end":150,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":2147},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95509,"byte_end":95513,"line_start":173,"line_end":173,"column_start":12,"column_end":16},"name":"Iter","qualname":"::sdk::resource::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the entries of a `Resource`.\n","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `Resource`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95431,"byte_end":95480,"line_start":171,"line_end":171,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":508},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96122,"byte_end":96138,"line_start":196,"line_end":196,"column_start":11,"column_end":27},"name":"ResourceDetector","qualname":"::sdk::resource::ResourceDetector","value":"ResourceDetector","parent":null,"children":[{"krate":0,"index":509}],"decl_id":null,"docs":" ResourceDetector detects OpenTelemetry resource information","sig":null,"attributes":[{"value":"/ ResourceDetector detects OpenTelemetry resource information","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95897,"byte_end":95960,"line_start":192,"line_end":192,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95961,"byte_end":95964,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait can be passed to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95965,"byte_end":96015,"line_start":194,"line_end":194,"column_start":1,"column_end":51}},{"value":"/ the `Resource::from_detectors` function to generate a Resource from the merged information.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96016,"byte_end":96111,"line_start":195,"line_end":195,"column_start":1,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96585,"byte_end":96591,"line_start":205,"line_end":205,"column_start":8,"column_end":14},"name":"detect","qualname":"::sdk::resource::ResourceDetector::detect","value":"pub fn detect(&Self, Duration) -> Resource","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" detect returns an initialized Resource based on gathered information.","sig":null,"attributes":[{"value":"/ detect returns an initialized Resource based on gathered information.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96145,"byte_end":96218,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96223,"byte_end":96226,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ timeout is used in case the detection operation takes too much time.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96231,"byte_end":96303,"line_start":199,"line_end":199,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96308,"byte_end":96311,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If source information to construct a Resource is inaccessible, an empty Resource should be returned","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96316,"byte_end":96419,"line_start":201,"line_end":201,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96424,"byte_end":96427,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ If source information to construct a Resource is invalid, for example,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96432,"byte_end":96506,"line_start":203,"line_end":203,"column_start":5,"column_end":79}},{"value":"/ missing required values. an empty Resource should be returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":96511,"byte_end":96577,"line_start":204,"line_end":204,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":510},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"trace","qualname":"::sdk::trace","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":546},{"krate":0,"index":594},{"krate":0,"index":632},{"krate":0,"index":680},{"krate":0,"index":725},{"krate":0,"index":755},{"krate":0,"index":818},{"krate":0,"index":949},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1062},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1069},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1104}],"decl_id":null,"docs":" # OpenTelemetry Trace SDK","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38407,"byte_end":38432,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/ # OpenTelemetry Trace SDK","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":98606,"byte_end":98635,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":98636,"byte_end":98639,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The tracing SDK consist of a few main structs:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":98640,"byte_end":98690,"line_start":3,"line_end":3,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":98691,"byte_end":98694,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * The `Tracer` struct which performs all tracing operations.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":98695,"byte_end":98759,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ * The `Span` struct with is a mutable object storing information about the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":98760,"byte_end":98838,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ current operation execution.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":98839,"byte_end":98871,"line_start":7,"line_end":7,"column_start":1,"column_end":33}},{"value":"/ * The `TracerProvider` struct which configures and produces `Tracer`s.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/mod.rs","byte_start":98872,"byte_end":98946,"line_start":8,"line_end":8,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":99875,"byte_end":99881,"line_start":11,"line_end":11,"column_start":8,"column_end":14},"name":"config","qualname":"::sdk::trace::config::config","value":"pub fn config() -> Config","parent":null,"children":[],"decl_id":null,"docs":" Default trace configuration\n","sig":null,"attributes":[{"value":"/ Default trace configuration","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":99836,"byte_end":99867,"line_start":10,"line_end":10,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2154},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":99974,"byte_end":99980,"line_start":17,"line_end":17,"column_start":12,"column_end":18},"name":"Config","qualname":"::sdk::trace::config::Config","value":"Config { default_sampler, id_generator, max_events_per_span, max_attributes_per_span, max_links_per_span, resource }","parent":null,"children":[{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":2158},{"krate":0,"index":2159},{"krate":0,"index":2160}],"decl_id":null,"docs":" Tracer configuration\n","sig":null,"attributes":[{"value":"/ Tracer configuration","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":99921,"byte_end":99945,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2155},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100035,"byte_end":100050,"line_start":19,"line_end":19,"column_start":9,"column_end":24},"name":"default_sampler","qualname":"::sdk::trace::config::Config::default_sampler","value":"std::boxed::Box<(dyn sdk::trace::sampler::ShouldSample + 'static)>","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" The sampler that the sdk should use\n","sig":null,"attributes":[{"value":"/ The sampler that the sdk should use","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":99987,"byte_end":100026,"line_start":18,"line_end":18,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2156},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100144,"byte_end":100156,"line_start":21,"line_end":21,"column_start":9,"column_end":21},"name":"id_generator","qualname":"::sdk::trace::config::Config::id_generator","value":"std::boxed::Box<(dyn trace::id_generator::IdGenerator + 'static)>","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" The id generator that the sdk should use\n","sig":null,"attributes":[{"value":"/ The id generator that the sdk should use","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100091,"byte_end":100135,"line_start":20,"line_end":20,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2157},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100242,"byte_end":100261,"line_start":23,"line_end":23,"column_start":9,"column_end":28},"name":"max_events_per_span","qualname":"::sdk::trace::config::Config::max_events_per_span","value":"u32","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" The max events that can be added to a `Span`.\n","sig":null,"attributes":[{"value":"/ The max events that can be added to a `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100184,"byte_end":100233,"line_start":22,"line_end":22,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2158},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100334,"byte_end":100357,"line_start":25,"line_end":25,"column_start":9,"column_end":32},"name":"max_attributes_per_span","qualname":"::sdk::trace::config::Config::max_attributes_per_span","value":"u32","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" The max attributes that can be added to a `Span`.\n","sig":null,"attributes":[{"value":"/ The max attributes that can be added to a `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100272,"byte_end":100325,"line_start":24,"line_end":24,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2159},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100425,"byte_end":100443,"line_start":27,"line_end":27,"column_start":9,"column_end":27},"name":"max_links_per_span","qualname":"::sdk::trace::config::Config::max_links_per_span","value":"u32","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" The max links that can be added to a `Span`.\n","sig":null,"attributes":[{"value":"/ The max links that can be added to a `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100368,"byte_end":100416,"line_start":26,"line_end":26,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2160},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100534,"byte_end":100542,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"name":"resource","qualname":"::sdk::trace::config::Config::resource","value":"std::sync::Arc<sdk::resource::Resource>","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" Contains attributes representing an entity that produces telemetry.\n","sig":null,"attributes":[{"value":"/ Contains attributes representing an entity that produces telemetry.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100454,"byte_end":100525,"line_start":28,"line_end":28,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100640,"byte_end":100652,"line_start":34,"line_end":34,"column_start":12,"column_end":24},"name":"with_sampler","qualname":"<Config>::with_sampler","value":"pub fn with_sampler<T: sdk::trace::ShouldSample + 'static>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the default sampler to be used.\n","sig":null,"attributes":[{"value":"/ Specify the default sampler to be used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100585,"byte_end":100628,"line_start":33,"line_end":33,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100850,"byte_end":100867,"line_start":40,"line_end":40,"column_start":12,"column_end":29},"name":"with_id_generator","qualname":"<Config>::with_id_generator","value":"pub fn with_id_generator<T: IdGenerator + 'static>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the id generator to be used.\n","sig":null,"attributes":[{"value":"/ Specify the id generator to be used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100798,"byte_end":100838,"line_start":39,"line_end":39,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101076,"byte_end":101100,"line_start":46,"line_end":46,"column_start":12,"column_end":36},"name":"with_max_events_per_span","qualname":"<Config>::with_max_events_per_span","value":"pub fn with_max_events_per_span(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of events to be recorded per span.\n","sig":null,"attributes":[{"value":"/ Specify the number of events to be recorded per span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101007,"byte_end":101064,"line_start":45,"line_end":45,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101282,"byte_end":101310,"line_start":52,"line_end":52,"column_start":12,"column_end":40},"name":"with_max_attributes_per_span","qualname":"<Config>::with_max_attributes_per_span","value":"pub fn with_max_attributes_per_span(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of attributes to be recorded per span.\n","sig":null,"attributes":[{"value":"/ Specify the number of attributes to be recorded per span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101209,"byte_end":101270,"line_start":51,"line_end":51,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101500,"byte_end":101523,"line_start":58,"line_end":58,"column_start":12,"column_end":35},"name":"with_max_links_per_span","qualname":"<Config>::with_max_links_per_span","value":"pub fn with_max_links_per_span(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of events to be recorded per span.\n","sig":null,"attributes":[{"value":"/ Specify the number of events to be recorded per span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101431,"byte_end":101488,"line_start":57,"line_end":57,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101715,"byte_end":101728,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"with_resource","qualname":"<Config>::with_resource","value":"pub fn with_resource(Self, sdk::Resource) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the attributes representing the entity that produces telemetry\n","sig":null,"attributes":[{"value":"/ Specify the attributes representing the entity that produces telemetry","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101629,"byte_end":101703,"line_start":63,"line_end":63,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2163},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":103534,"byte_end":103548,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"EvictedHashMap","qualname":"::sdk::trace::evicted_hash_map::EvictedHashMap","value":"EvictedHashMap {  }","parent":null,"children":[{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167}],"decl_id":null,"docs":" A hash map with a capped number of attributes that retains the most\n recently set entries.\n","sig":null,"attributes":[{"value":"/ A hash map with a capped number of attributes that retains the most","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":103323,"byte_end":103394,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ recently set entries.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":103395,"byte_end":103420,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":103768,"byte_end":103771,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<EvictedHashMap>::new","value":"pub fn new(u32, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EvictedHashMap` with a given max length and capacity.\n","sig":null,"attributes":[{"value":"/ Create a new `EvictedHashMap` with a given max length and capacity.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":103685,"byte_end":103756,"line_start":21,"line_end":21,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":104058,"byte_end":104064,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"insert","qualname":"<EvictedHashMap>::insert","value":"pub fn insert(&mut Self, KeyValue)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.\n","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":104004,"byte_end":104046,"line_start":31,"line_end":31,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":104910,"byte_end":104913,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"len","qualname":"<EvictedHashMap>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":104852,"byte_end":104898,"line_start":60,"line_end":60,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":105017,"byte_end":105025,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EvictedHashMap>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the map is empty.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":104966,"byte_end":105005,"line_start":65,"line_end":65,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":105133,"byte_end":105146,"line_start":71,"line_end":71,"column_start":12,"column_end":25},"name":"dropped_count","qualname":"<EvictedHashMap>::dropped_count","value":"pub fn dropped_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the dropped attribute count\n","sig":null,"attributes":[{"value":"/ Returns the dropped attribute count","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":105082,"byte_end":105121,"line_start":70,"line_end":70,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":105250,"byte_end":105254,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"iter","qualname":"<EvictedHashMap>::iter","value":"pub fn iter(&Self) -> Iter","parent":null,"children":[],"decl_id":null,"docs":" Returns a front-to-back iterator.\n","sig":null,"attributes":[{"value":"/ Returns a front-to-back iterator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":105201,"byte_end":105238,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":105403,"byte_end":105406,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"get","qualname":"<EvictedHashMap>::get","value":"pub fn get(&Self, &Key) -> Option<&Value>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key if it exists\n","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key if it exists","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":105317,"byte_end":105391,"line_start":80,"line_end":80,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2176},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":106500,"byte_end":106508,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::sdk::trace::evicted_hash_map::IntoIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An owned iterator over the entries of a `EvictedHashMap`.\n","sig":null,"attributes":[{"value":"/ An owned iterator over the entries of a `EvictedHashMap`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":106410,"byte_end":106471,"line_start":112,"line_end":112,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2181},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":107173,"byte_end":107177,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"Iter","qualname":"::sdk::trace::evicted_hash_map::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the entries of an `EvictedHashMap`.\n","sig":null,"attributes":[{"value":"/ An iterator over the entries of an `EvictedHashMap`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":107088,"byte_end":107144,"line_start":142,"line_end":142,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":2188},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":108417,"byte_end":108429,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"EvictedQueue","qualname":"::sdk::trace::evicted_queue::EvictedQueue","value":"EvictedQueue {  }","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192}],"decl_id":null,"docs":" This queue maintains an ordered list of elements, and a count of\n dropped elements. Elements are removed from the queue in a first\n in first out fashion.\n","sig":null,"attributes":[{"value":"/ This queue maintains an ordered list of elements, and a count of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":108140,"byte_end":108208,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ dropped elements. Elements are removed from the queue in a first","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":108209,"byte_end":108277,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"/ in first out fashion.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":108278,"byte_end":108303,"line_start":9,"line_end":9,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":108610,"byte_end":108613,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<EvictedQueue<T>>::new","value":"pub fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EvictedQueue` with a given max length.\n","sig":null,"attributes":[{"value":"/ Create a new `EvictedQueue` with a given max length.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":108542,"byte_end":108598,"line_start":19,"line_end":19,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109238,"byte_end":109248,"line_start":40,"line_end":40,"column_start":12,"column_end":22},"name":"append_vec","qualname":"<EvictedQueue<T>>::append_vec","value":"pub fn append_vec(&mut Self, &mut Vec<T>)","parent":null,"children":[],"decl_id":null,"docs":" Moves all the elements of other into self, leaving other empty.\n","sig":null,"attributes":[{"value":"/ Moves all the elements of other into self, leaving other empty.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109159,"byte_end":109226,"line_start":39,"line_end":39,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109393,"byte_end":109401,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EvictedQueue<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `EvictedQueue` is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the `EvictedQueue` is empty.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109331,"byte_end":109381,"line_start":44,"line_end":44,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109546,"byte_end":109550,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"iter","qualname":"<EvictedQueue<T>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a front-to-back iterator.\n","sig":null,"attributes":[{"value":"/ Returns a front-to-back iterator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109497,"byte_end":109534,"line_start":49,"line_end":49,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109715,"byte_end":109718,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"len","qualname":"<EvictedQueue<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the `EvictedQueue`.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the `EvictedQueue`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109646,"byte_end":109703,"line_start":54,"line_end":54,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109850,"byte_end":109863,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"dropped_count","qualname":"<EvictedQueue<T>>::dropped_count","value":"pub fn dropped_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Count of dropped attributes\n","sig":null,"attributes":[{"value":"/ Count of dropped attributes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109807,"byte_end":109838,"line_start":59,"line_end":59,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2205},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110004,"byte_end":110012,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::sdk::trace::evicted_queue::IntoIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An owned iterator over the entries of a `EvictedQueue`.\n","sig":null,"attributes":[{"value":"/ An owned iterator over the entries of a `EvictedQueue`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":109916,"byte_end":109975,"line_start":65,"line_end":65,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2212},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110523,"byte_end":110527,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"Iter","qualname":"::sdk::trace::evicted_queue::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the entries of an `EvictedQueue`.\n","sig":null,"attributes":[{"value":"/ An iterator over the entries of an `EvictedQueue`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110440,"byte_end":110494,"line_start":86,"line_end":86,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2221},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":114117,"byte_end":114132,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"XrayIdGenerator","qualname":"::sdk::trace::id_generator::aws::XrayIdGenerator","value":"XrayIdGenerator {  }","parent":null,"children":[{"krate":0,"index":2222}],"decl_id":null,"docs":" Generates AWS X-Ray compliant Trace and Span ids.","sig":null,"attributes":[{"value":"/ Generates AWS X-Ray compliant Trace and Span ids.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112460,"byte_end":112513,"line_start":5,"line_end":5,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112514,"byte_end":112517,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Generates OpenTelemetry formatted `TraceId`'s and `SpanId`'s. The `TraceId`'s are generated so","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112518,"byte_end":112616,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ they can be backed out into X-Ray format by the [AWS X-Ray Exporter][xray-exporter] in the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112617,"byte_end":112711,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ [OpenTelemetry Collector][otel-collector].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112712,"byte_end":112758,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112759,"byte_end":112762,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Trace ID Format","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112763,"byte_end":112785,"line_start":11,"line_end":11,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112786,"byte_end":112789,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ A `trace_id` consists of three numbers separated by hyphens. For example, `1-58406520-a006649127e371903a2de979`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112790,"byte_end":112906,"line_start":13,"line_end":13,"column_start":1,"column_end":117}},{"value":"/ This includes:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112907,"byte_end":112925,"line_start":14,"line_end":14,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112926,"byte_end":112929,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * The version number, that is, 1.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112930,"byte_end":112967,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/ * The time of the original request, in Unix epoch time, in 8 hexadecimal digits.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":112968,"byte_end":113052,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/ * For example, 10:00AM December 1st, 2016 PST in epoch time is 1480615200 seconds, or 58406520 in hexadecimal digits.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113053,"byte_end":113174,"line_start":18,"line_end":18,"column_start":1,"column_end":122}},{"value":"/ * A 96-bit identifier for the trace, globally unique, in 24 hexadecimal digits.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113175,"byte_end":113258,"line_start":19,"line_end":19,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113259,"byte_end":113262,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See the [AWS X-Ray Documentation][xray-trace-id] for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113263,"byte_end":113333,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113334,"byte_end":113337,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113338,"byte_end":113352,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113353,"byte_end":113356,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113357,"byte_end":113364,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::trace::NoopSpanExporter;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113365,"byte_end":113412,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ use opentelemetry::sdk::trace::{self, TracerProvider, XrayIdGenerator};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113413,"byte_end":113488,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113489,"byte_end":113492,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let _provider: TracerProvider = TracerProvider::builder()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113493,"byte_end":113554,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/     .with_simple_exporter(NoopSpanExporter::new())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113555,"byte_end":113609,"line_start":30,"line_end":30,"column_start":1,"column_end":55}},{"value":"/     .with_config(trace::config().with_id_generator(XrayIdGenerator::default()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113610,"byte_end":113693,"line_start":31,"line_end":31,"column_start":1,"column_end":84}},{"value":"/     .build();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113694,"byte_end":113711,"line_start":32,"line_end":32,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113712,"byte_end":113719,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113720,"byte_end":113723,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [otel-collector]: https://github.com/open-telemetry/opentelemetry-collector-contrib#opentelemetry-collector-contrib","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113724,"byte_end":113843,"line_start":35,"line_end":35,"column_start":1,"column_end":120}},{"value":"/ [xray-exporter]: https://godoc.org/github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsxrayexporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113844,"byte_end":113965,"line_start":36,"line_end":36,"column_start":1,"column_end":122}},{"value":"/ [xray-trace-id]: https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":113966,"byte_end":114079,"line_start":37,"line_end":37,"column_start":1,"column_end":114}}]},{"kind":"Struct","id":{"krate":0,"index":2227},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","byte_start":111755,"byte_end":111766,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"IdGenerator","qualname":"::sdk::trace::id_generator::IdGenerator","value":"IdGenerator {  }","parent":null,"children":[{"krate":0,"index":2228}],"decl_id":null,"docs":" Default [`crate::trace::IdGenerator`] implementation.\n Generates Trace and Span ids using a random number generator.\n","sig":null,"attributes":[{"value":"/ Default [`crate::trace::IdGenerator`] implementation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","byte_start":111587,"byte_end":111644,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/ Generates Trace and Span ids using a random number generator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","byte_start":111645,"byte_end":111710,"line_start":9,"line_end":9,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2244},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117063,"byte_end":117077,"line_start":40,"line_end":40,"column_start":12,"column_end":26},"name":"TracerProvider","qualname":"::sdk::trace::provider::TracerProvider","value":"TracerProvider {  }","parent":null,"children":[{"krate":0,"index":2245}],"decl_id":null,"docs":" Creator and registry of named `Tracer` instances.\n","sig":null,"attributes":[{"value":"/ Creator and registry of named `Tracer` instances.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":116974,"byte_end":117027,"line_start":38,"line_end":38,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117453,"byte_end":117460,"line_start":57,"line_end":57,"column_start":12,"column_end":19},"name":"builder","qualname":"<TracerProvider>::builder","value":"pub fn builder() -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TracerProvider` builder.\n","sig":null,"attributes":[{"value":"/ Create a new `TracerProvider` builder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117399,"byte_end":117441,"line_start":56,"line_end":56,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117575,"byte_end":117590,"line_start":62,"line_end":62,"column_start":12,"column_end":27},"name":"span_processors","qualname":"<TracerProvider>::span_processors","value":"pub fn span_processors(&Self) -> &Vec<Box<dyn SpanProcessor>>","parent":null,"children":[],"decl_id":null,"docs":" Span processors associated with this provider\n","sig":null,"attributes":[{"value":"/ Span processors associated with this provider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117514,"byte_end":117563,"line_start":61,"line_end":61,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117724,"byte_end":117730,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"config","qualname":"<TracerProvider>::config","value":"pub fn config(&Self) -> &sdk::trace::Config","parent":null,"children":[],"decl_id":null,"docs":" Config associated with this tracer\n","sig":null,"attributes":[{"value":"/ Config associated with this tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117674,"byte_end":117712,"line_start":66,"line_end":66,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2250},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":118564,"byte_end":118571,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"Builder","qualname":"::sdk::trace::provider::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":2251},{"krate":0,"index":2252}],"decl_id":null,"docs":" Builder for provider attributes.\n","sig":null,"attributes":[{"value":"/ Builder for provider attributes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":118490,"byte_end":118526,"line_start":90,"line_end":90,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":118738,"byte_end":118758,"line_start":99,"line_end":99,"column_start":12,"column_end":32},"name":"with_simple_exporter","qualname":"<Builder>::with_simple_exporter","value":"pub fn with_simple_exporter<T: SpanExporter + 'static>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The `SpanExporter` that this provider should use.\n","sig":null,"attributes":[{"value":"/ The `SpanExporter` that this provider should use.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":118673,"byte_end":118726,"line_start":98,"line_end":98,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":119095,"byte_end":119114,"line_start":109,"line_end":109,"column_start":12,"column_end":31},"name":"with_batch_exporter","qualname":"<Builder>::with_batch_exporter","value":"pub fn with_batch_exporter(Self, sdk::trace::BatchSpanProcessor) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The `BatchProcessor` that this provider should use.\n","sig":null,"attributes":[{"value":"/ The `BatchProcessor` that this provider should use.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":119028,"byte_end":119083,"line_start":108,"line_end":108,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":119425,"byte_end":119452,"line_start":117,"line_end":117,"column_start":12,"column_end":39},"name":"with_default_batch_exporter","qualname":"<Builder>::with_default_batch_exporter","value":"pub fn with_default_batch_exporter<T: SpanExporter + 'static,\n                                   R: Runtime>(Self, T, R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The `SpanExporter` setup using a default `BatchSpanProcessor` that this provider should use.\n","sig":null,"attributes":[{"value":"/ The `SpanExporter` setup using a default `BatchSpanProcessor` that this provider should use.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":119317,"byte_end":119413,"line_start":116,"line_end":116,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":119769,"byte_end":119788,"line_start":127,"line_end":127,"column_start":12,"column_end":31},"name":"with_span_processor","qualname":"<Builder>::with_span_processor","value":"pub fn with_span_processor<T: SpanProcessor + 'static>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The `SpanProcessor` that this provider should use.\n","sig":null,"attributes":[{"value":"/ The `SpanProcessor` that this provider should use.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":119703,"byte_end":119757,"line_start":126,"line_end":126,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":120051,"byte_end":120062,"line_start":135,"line_end":135,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Builder>::with_config","value":"pub fn with_config(Self, sdk::trace::Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The sdk `Config` that this provider will use.\n","sig":null,"attributes":[{"value":"/ The sdk `Config` that this provider will use.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":119990,"byte_end":120039,"line_start":134,"line_end":134,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":120215,"byte_end":120220,"line_start":140,"line_end":140,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"pub fn build(Self) -> TracerProvider","parent":null,"children":[],"decl_id":null,"docs":" Create a new provider from this configuration.\n","sig":null,"attributes":[{"value":"/ Create a new provider from this configuration.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":120153,"byte_end":120203,"line_start":139,"line_end":139,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":749},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122766,"byte_end":122778,"line_start":48,"line_end":48,"column_start":11,"column_end":23},"name":"ShouldSample","qualname":"::sdk::trace::sampler::ShouldSample","value":"ShouldSample: Send + Sync + std::fmt::Debug","parent":null,"children":[{"krate":0,"index":750}],"decl_id":null,"docs":" The `ShouldSample` interface allows implementations to provide samplers\n which will return a sampling `SamplingResult` based on information that\n is typically available just before the `Span` was created.\n","sig":null,"attributes":[{"value":"/ The `ShouldSample` interface allows implementations to provide samplers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122541,"byte_end":122616,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ which will return a sampling `SamplingResult` based on information that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122617,"byte_end":122692,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ is typically available just before the `Span` was created.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122693,"byte_end":122755,"line_start":47,"line_end":47,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122927,"byte_end":122940,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"should_sample","qualname":"::sdk::trace::sampler::ShouldSample::should_sample","value":"pub fn should_sample(&Self, Option<&Context>, TraceId, &str, &SpanKind,\n                     &[KeyValue], &[Link]) -> SamplingResult","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":" Returns the `SamplingDecision` for a `Span` to be created.\n","sig":null,"attributes":[{"value":"/ Returns the `SamplingDecision` for a `Span` to be created.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122816,"byte_end":122878,"line_start":49,"line_end":49,"column_start":5,"column_end":67}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122883,"byte_end":122919,"line_start":50,"line_end":50,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2257},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123260,"byte_end":123274,"line_start":64,"line_end":64,"column_start":12,"column_end":26},"name":"SamplingResult","qualname":"::sdk::trace::sampler::SamplingResult","value":"SamplingResult { decision, attributes, trace_state }","parent":null,"children":[{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2260}],"decl_id":null,"docs":" The result of sampling logic for a given `Span`.\n","sig":null,"attributes":[{"value":"/ The result of sampling logic for a given `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123161,"byte_end":123213,"line_start":62,"line_end":62,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2258},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123335,"byte_end":123343,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"name":"decision","qualname":"::sdk::trace::sampler::SamplingResult::decision","value":"sdk::trace::sampler::SamplingDecision","parent":{"krate":0,"index":2257},"children":[],"decl_id":null,"docs":" `SamplingDecision` reached by this result\n","sig":null,"attributes":[{"value":"/ `SamplingDecision` reached by this result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123281,"byte_end":123326,"line_start":65,"line_end":65,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2259},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123417,"byte_end":123427,"line_start":68,"line_end":68,"column_start":9,"column_end":19},"name":"attributes","qualname":"::sdk::trace::sampler::SamplingResult::attributes","value":"std::vec::Vec<core::KeyValue>","parent":{"krate":0,"index":2257},"children":[],"decl_id":null,"docs":" Extra attributes added by this result\n","sig":null,"attributes":[{"value":"/ Extra attributes added by this result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123367,"byte_end":123408,"line_start":67,"line_end":67,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2260},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123522,"byte_end":123533,"line_start":70,"line_end":70,"column_start":9,"column_end":20},"name":"trace_state","qualname":"::sdk::trace::sampler::SamplingResult::trace_state","value":"trace::span_context::TraceState","parent":{"krate":0,"index":2257},"children":[],"decl_id":null,"docs":" Trace state from parent context, might be modified by sampler\n","sig":null,"attributes":[{"value":"/ Trace state from parent context, might be modified by sampler","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123448,"byte_end":123513,"line_start":69,"line_end":69,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2270},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123777,"byte_end":123781,"line_start":78,"line_end":78,"column_start":5,"column_end":9},"name":"Drop","qualname":"::sdk::trace::sampler::SamplingDecision::Drop","value":"SamplingDecision::Drop","parent":{"krate":0,"index":2269},"children":[],"decl_id":null,"docs":" `is_recording() == false`, span will not be recorded and all events and\n attributes will be dropped.\n","sig":null,"attributes":[{"value":"/ `is_recording() == false`, span will not be recorded and all events and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123661,"byte_end":123736,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ attributes will be dropped.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123741,"byte_end":123772,"line_start":77,"line_end":77,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2272},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123857,"byte_end":123867,"line_start":80,"line_end":80,"column_start":5,"column_end":15},"name":"RecordOnly","qualname":"::sdk::trace::sampler::SamplingDecision::RecordOnly","value":"SamplingDecision::RecordOnly","parent":{"krate":0,"index":2269},"children":[],"decl_id":null,"docs":" `is_recording() == true`, but `Sampled` flag MUST NOT be set.\n","sig":null,"attributes":[{"value":"/ `is_recording() == true`, but `Sampled` flag MUST NOT be set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123787,"byte_end":123852,"line_start":79,"line_end":79,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2274},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123939,"byte_end":123954,"line_start":82,"line_end":82,"column_start":5,"column_end":20},"name":"RecordAndSample","qualname":"::sdk::trace::sampler::SamplingDecision::RecordAndSample","value":"SamplingDecision::RecordAndSample","parent":{"krate":0,"index":2269},"children":[],"decl_id":null,"docs":" `is_recording() == true` AND `Sampled` flag` MUST be set.\n","sig":null,"attributes":[{"value":"/ `is_recording() == true` AND `Sampled` flag` MUST be set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123873,"byte_end":123934,"line_start":81,"line_end":81,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":2269},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123638,"byte_end":123654,"line_start":75,"line_end":75,"column_start":10,"column_end":26},"name":"SamplingDecision","qualname":"::sdk::trace::sampler::SamplingDecision","value":"pub enum SamplingDecision { Drop, RecordOnly, RecordAndSample, }","parent":null,"children":[{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2274}],"decl_id":null,"docs":" Decision about whether or not to sample\n","sig":null,"attributes":[{"value":"/ Decision about whether or not to sample","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123550,"byte_end":123593,"line_start":73,"line_end":73,"column_start":1,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2284},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124059,"byte_end":124067,"line_start":89,"line_end":89,"column_start":5,"column_end":13},"name":"AlwaysOn","qualname":"::sdk::trace::sampler::Sampler::AlwaysOn","value":"Sampler::AlwaysOn","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":" Always sample the trace\n","sig":null,"attributes":[{"value":"/ Always sample the trace","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124027,"byte_end":124054,"line_start":88,"line_end":88,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2286},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124104,"byte_end":124113,"line_start":91,"line_end":91,"column_start":5,"column_end":14},"name":"AlwaysOff","qualname":"::sdk::trace::sampler::Sampler::AlwaysOff","value":"Sampler::AlwaysOff","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":" Never sample the trace\n","sig":null,"attributes":[{"value":"/ Never sample the trace","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124073,"byte_end":124099,"line_start":90,"line_end":90,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2288},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124220,"byte_end":124231,"line_start":93,"line_end":93,"column_start":5,"column_end":16},"name":"ParentBased","qualname":"::sdk::trace::sampler::Sampler::ParentBased","value":"Sampler::ParentBased(Box<Sampler>)","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":" Respects the parent span's sampling decision or delegates a delegate sampler for root spans.\n","sig":null,"attributes":[{"value":"/ Respects the parent span's sampling decision or delegates a delegate sampler for root spans.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124119,"byte_end":124215,"line_start":92,"line_end":92,"column_start":5,"column_end":101}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2291},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124515,"byte_end":124532,"line_start":97,"line_end":97,"column_start":5,"column_end":22},"name":"TraceIdRatioBased","qualname":"::sdk::trace::sampler::Sampler::TraceIdRatioBased","value":"Sampler::TraceIdRatioBased(f64)","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":" Sample a given fraction of traces. Fractions >= 1 will always sample. If the parent span is\n sampled, then it's child spans will automatically be sampled. Fractions < 0 are treated as\n zero, but spans may still be sampled if their parent is.\n","sig":null,"attributes":[{"value":"/ Sample a given fraction of traces. Fractions >= 1 will always sample. If the parent span is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124251,"byte_end":124346,"line_start":94,"line_end":94,"column_start":5,"column_end":100}},{"value":"/ sampled, then it's child spans will automatically be sampled. Fractions < 0 are treated as","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124351,"byte_end":124445,"line_start":95,"line_end":95,"column_start":5,"column_end":99}},{"value":"/ zero, but spans may still be sampled if their parent is.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124450,"byte_end":124510,"line_start":96,"line_end":96,"column_start":5,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":2283},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124013,"byte_end":124020,"line_start":87,"line_end":87,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::sdk::trace::sampler::Sampler","value":"pub enum Sampler {\n    AlwaysOn,\n    AlwaysOff,\n    ParentBased(Box<Sampler>),\n    TraceIdRatioBased(f64),\n}","parent":null,"children":[{"krate":0,"index":2284},{"krate":0,"index":2286},{"krate":0,"index":2288},{"krate":0,"index":2291}],"decl_id":null,"docs":" Sampling options\n","sig":null,"attributes":[{"value":"/ Sampling options","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":123959,"byte_end":123979,"line_start":85,"line_end":85,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2298},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":134367,"byte_end":134371,"line_start":18,"line_end":18,"column_start":12,"column_end":16},"name":"Span","qualname":"::sdk::trace::span::Span","value":"Span {  }","parent":null,"children":[{"krate":0,"index":2299}],"decl_id":null,"docs":" Single operation within a trace.\n","sig":null,"attributes":[{"value":"/ Single operation within a trace.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":134295,"byte_end":134331,"line_start":16,"line_end":16,"column_start":1,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":892},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":152905,"byte_end":152918,"line_start":69,"line_end":69,"column_start":11,"column_end":24},"name":"SpanProcessor","qualname":"::sdk::trace::span_processor::SpanProcessor","value":"SpanProcessor: Send + Sync + std::fmt::Debug","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896}],"decl_id":null,"docs":" `SpanProcessor` is an interface which allows hooks for span start and end\n method invocations. The span processors are invoked only when is_recording\n is true.\n","sig":null,"attributes":[{"value":"/ `SpanProcessor` is an interface which allows hooks for span start and end","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":152725,"byte_end":152802,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/ method invocations. The span processors are invoked only when is_recording","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":152803,"byte_end":152881,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ is true.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":152882,"byte_end":152894,"line_start":68,"line_end":68,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153155,"byte_end":153163,"line_start":73,"line_end":73,"column_start":8,"column_end":16},"name":"on_start","qualname":"::sdk::trace::span_processor::SpanProcessor::on_start","value":"pub fn on_start(&Self, &Span, &Context)","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" `on_start` is called when a `Span` is started.  This method is called\n synchronously on the thread that started the span, therefore it should\n not block or throw exceptions.\n","sig":null,"attributes":[{"value":"/ `on_start` is called when a `Span` is started.  This method is called","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":152956,"byte_end":153029,"line_start":70,"line_end":70,"column_start":5,"column_end":78}},{"value":"/ synchronously on the thread that started the span, therefore it should","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153034,"byte_end":153108,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"/ not block or throw exceptions.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153113,"byte_end":153147,"line_start":72,"line_end":72,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153432,"byte_end":153438,"line_start":77,"line_end":77,"column_start":8,"column_end":14},"name":"on_end","qualname":"::sdk::trace::span_processor::SpanProcessor::on_end","value":"pub fn on_end(&Self, SpanData)","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" `on_end` is called after a `Span` is ended (i.e., the end timestamp is\n already set). This method is called synchronously within the `Span::end`\n API, therefore it should not block or throw an exception.\n","sig":null,"attributes":[{"value":"/ `on_end` is called after a `Span` is ended (i.e., the end timestamp is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153203,"byte_end":153277,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ already set). This method is called synchronously within the `Span::end`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153282,"byte_end":153358,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ API, therefore it should not block or throw an exception.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153363,"byte_end":153424,"line_start":76,"line_end":76,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153529,"byte_end":153540,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"force_flush","qualname":"::sdk::trace::span_processor::SpanProcessor::force_flush","value":"pub fn force_flush(&Self) -> TraceResult<()>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Force the spans lying in the cache to be exported.\n","sig":null,"attributes":[{"value":"/ Force the spans lying in the cache to be exported.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153467,"byte_end":153521,"line_start":78,"line_end":78,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153713,"byte_end":153721,"line_start":82,"line_end":82,"column_start":8,"column_end":16},"name":"shutdown","qualname":"::sdk::trace::span_processor::SpanProcessor::shutdown","value":"pub fn shutdown(&mut Self) -> TraceResult<()>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Shuts down the processor. Called when SDK is shut down. This is an\n opportunity for processors to do any cleanup required.\n","sig":null,"attributes":[{"value":"/ Shuts down the processor. Called when SDK is shut down. This is an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153572,"byte_end":153642,"line_start":80,"line_end":80,"column_start":5,"column_end":75}},{"value":"/ opportunity for processors to do any cleanup required.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153647,"byte_end":153705,"line_start":81,"line_end":81,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2330},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154517,"byte_end":154536,"line_start":106,"line_end":106,"column_start":12,"column_end":31},"name":"SimpleSpanProcessor","qualname":"::sdk::trace::span_processor::SimpleSpanProcessor","value":"SimpleSpanProcessor {  }","parent":null,"children":[{"krate":0,"index":2331}],"decl_id":null,"docs":" A [`SpanProcessor`] that exports synchronously when spans are finished.","sig":null,"attributes":[{"value":"/ A [`SpanProcessor`] that exports synchronously when spans are finished.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153756,"byte_end":153831,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153832,"byte_end":153835,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153836,"byte_end":153850,"line_start":87,"line_end":87,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153851,"byte_end":153854,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ Note that the simple processor exports synchronously every time a span is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153855,"byte_end":153932,"line_start":89,"line_end":89,"column_start":1,"column_end":78}},{"value":"/ ended. If you find this limiting, consider the batch processor instead.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":153933,"byte_end":154008,"line_start":90,"line_end":90,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154009,"byte_end":154012,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154013,"byte_end":154020,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{trace as apitrace, sdk::trace as sdktrace, global};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154021,"byte_end":154096,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154097,"byte_end":154100,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ // Configure your preferred exporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154101,"byte_end":154141,"line_start":95,"line_end":95,"column_start":1,"column_end":41}},{"value":"/ let exporter = apitrace::NoopSpanExporter::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154142,"byte_end":154195,"line_start":96,"line_end":96,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154196,"byte_end":154199,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // Then use the `with_simple_exporter` method to have the provider export when spans finish.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154200,"byte_end":154296,"line_start":98,"line_end":98,"column_start":1,"column_end":97}},{"value":"/ let provider = sdktrace::TracerProvider::builder()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154297,"byte_end":154351,"line_start":99,"line_end":99,"column_start":1,"column_end":55}},{"value":"/     .with_simple_exporter(exporter)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154352,"byte_end":154391,"line_start":100,"line_end":100,"column_start":1,"column_end":40}},{"value":"/     .build();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154392,"byte_end":154409,"line_start":101,"line_end":101,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154410,"byte_end":154413,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ let previous_provider = global::set_tracer_provider(provider);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154414,"byte_end":154480,"line_start":103,"line_end":103,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154481,"byte_end":154488,"line_start":104,"line_end":104,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":906},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157497,"byte_end":157515,"line_start":196,"line_end":196,"column_start":12,"column_end":30},"name":"BatchSpanProcessor","qualname":"::sdk::trace::span_processor::BatchSpanProcessor","value":"BatchSpanProcessor {  }","parent":null,"children":[{"krate":0,"index":907}],"decl_id":null,"docs":" A [`SpanProcessor`] that asynchronously buffers finished spans and reports\n them at a preconfigured interval.","sig":null,"attributes":[{"value":"/ A [`SpanProcessor`] that asynchronously buffers finished spans and reports","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":155801,"byte_end":155879,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ them at a preconfigured interval.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":155880,"byte_end":155917,"line_start":154,"line_end":154,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":155918,"byte_end":155921,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":155922,"byte_end":155936,"line_start":156,"line_end":156,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":155937,"byte_end":155940,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ This processor can be configured with an [`executor`] of your choice to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":155941,"byte_end":156016,"line_start":158,"line_end":158,"column_start":1,"column_end":76}},{"value":"/ batch and upload spans asynchronously when they end. If you have added a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156017,"byte_end":156093,"line_start":159,"line_end":159,"column_start":1,"column_end":77}},{"value":"/ library like [`tokio`] or [`async-std`], you can pass in their respective","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156094,"byte_end":156171,"line_start":160,"line_end":160,"column_start":1,"column_end":78}},{"value":"/ `spawn` and `interval` functions to have batching performed in those","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156172,"byte_end":156244,"line_start":161,"line_end":161,"column_start":1,"column_end":73}},{"value":"/ contexts.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156245,"byte_end":156258,"line_start":162,"line_end":162,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156259,"byte_end":156262,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156263,"byte_end":156270,"line_start":164,"line_end":164,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"tokio\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156271,"byte_end":156300,"line_start":165,"line_end":165,"column_start":1,"column_end":30}},{"value":"/ # {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156301,"byte_end":156308,"line_start":166,"line_end":166,"column_start":1,"column_end":8}},{"value":"/ use futures::{stream};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156309,"byte_end":156335,"line_start":167,"line_end":167,"column_start":1,"column_end":27}},{"value":"/ use opentelemetry::{trace as apitrace, sdk::trace as sdktrace, global, runtime};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156336,"byte_end":156420,"line_start":168,"line_end":168,"column_start":1,"column_end":85}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156421,"byte_end":156449,"line_start":169,"line_end":169,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156450,"byte_end":156453,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156454,"byte_end":156472,"line_start":171,"line_end":171,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156473,"byte_end":156494,"line_start":172,"line_end":172,"column_start":1,"column_end":22}},{"value":"/     // Configure your preferred exporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156495,"byte_end":156539,"line_start":173,"line_end":173,"column_start":1,"column_end":45}},{"value":"/     let exporter = apitrace::NoopSpanExporter::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156540,"byte_end":156597,"line_start":174,"line_end":174,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156598,"byte_end":156601,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/     // Then build a batch processor. You can use whichever executor you have available, for","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156602,"byte_end":156697,"line_start":176,"line_end":176,"column_start":1,"column_end":96}},{"value":"/     // example if you are using `async-std` instead of `tokio` you can replace the spawn and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156698,"byte_end":156794,"line_start":177,"line_end":177,"column_start":1,"column_end":97}},{"value":"/     // interval functions with `async_std::task::spawn` and `async_std::stream::interval`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156795,"byte_end":156889,"line_start":178,"line_end":178,"column_start":1,"column_end":95}},{"value":"/     let batch = sdktrace::BatchSpanProcessor::builder(exporter, runtime::Tokio)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156890,"byte_end":156973,"line_start":179,"line_end":179,"column_start":1,"column_end":84}},{"value":"/         .with_max_queue_size(4096)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":156974,"byte_end":157012,"line_start":180,"line_end":180,"column_start":1,"column_end":39}},{"value":"/         .build();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157013,"byte_end":157034,"line_start":181,"line_end":181,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157035,"byte_end":157038,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/     // Then use the `with_batch_exporter` method to have the provider export spans in batches.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157039,"byte_end":157137,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"/     let provider = sdktrace::TracerProvider::builder()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157138,"byte_end":157196,"line_start":184,"line_end":184,"column_start":1,"column_end":59}},{"value":"/         .with_batch_exporter(batch)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157197,"byte_end":157236,"line_start":185,"line_end":185,"column_start":1,"column_end":40}},{"value":"/         .build();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157237,"byte_end":157258,"line_start":186,"line_end":186,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157259,"byte_end":157262,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/     let _ = global::set_tracer_provider(provider);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157263,"byte_end":157317,"line_start":188,"line_end":188,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157318,"byte_end":157323,"line_start":189,"line_end":189,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157324,"byte_end":157331,"line_start":190,"line_end":190,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157332,"byte_end":157339,"line_start":191,"line_end":191,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157340,"byte_end":157343,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ [`executor`]: https://docs.rs/futures/0.3/futures/executor/index.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157344,"byte_end":157417,"line_start":193,"line_end":193,"column_start":1,"column_end":74}},{"value":"/ [`tokio`]: https://tokio.rs","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157418,"byte_end":157449,"line_start":194,"line_end":194,"column_start":1,"column_end":32}},{"value":"/ [`async-std`]: https://async.rs","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157450,"byte_end":157485,"line_start":195,"line_end":195,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":164234,"byte_end":164241,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"builder","qualname":"<BatchSpanProcessor>::builder","value":"pub fn builder<E, R>(E, R) -> BatchSpanProcessorBuilder<E, R> where\nE: SpanExporter, R: Runtime","parent":null,"children":[],"decl_id":null,"docs":" Create a new batch processor builder\n","sig":null,"attributes":[{"value":"/ Create a new batch processor builder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":164182,"byte_end":164222,"line_start":361,"line_end":361,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":2346},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":165115,"byte_end":165126,"line_start":397,"line_end":397,"column_start":12,"column_end":23},"name":"BatchConfig","qualname":"::sdk::trace::span_processor::BatchConfig","value":"BatchConfig {  }","parent":null,"children":[{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"decl_id":null,"docs":" Batch span processor configuration\n","sig":null,"attributes":[{"value":"/ Batch span processor configuration","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":165048,"byte_end":165086,"line_start":395,"line_end":395,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2353},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":167845,"byte_end":167870,"line_start":468,"line_end":468,"column_start":12,"column_end":37},"name":"BatchSpanProcessorBuilder","qualname":"::sdk::trace::span_processor::BatchSpanProcessorBuilder","value":"BatchSpanProcessorBuilder {  }","parent":null,"children":[{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358}],"decl_id":null,"docs":" A builder for creating [`BatchSpanProcessor`] instances.","sig":null,"attributes":[{"value":"/ A builder for creating [`BatchSpanProcessor`] instances.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":167752,"byte_end":167812,"line_start":465,"line_end":465,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":167813,"byte_end":167816,"line_start":466,"line_end":466,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168088,"byte_end":168107,"line_start":480,"line_end":480,"column_start":12,"column_end":31},"name":"with_max_queue_size","qualname":"<BatchSpanProcessorBuilder<E, R>>::with_max_queue_size","value":"pub fn with_max_queue_size(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set max queue size for batches\n","sig":null,"attributes":[{"value":"/ Set max queue size for batches","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168042,"byte_end":168076,"line_start":479,"line_end":479,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168325,"byte_end":168345,"line_start":488,"line_end":488,"column_start":12,"column_end":32},"name":"with_scheduled_delay","qualname":"<BatchSpanProcessorBuilder<E, R>>::with_scheduled_delay","value":"pub fn with_scheduled_delay(Self, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set scheduled delay for batches\n","sig":null,"attributes":[{"value":"/ Set scheduled delay for batches","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168278,"byte_end":168313,"line_start":487,"line_end":487,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168568,"byte_end":168584,"line_start":496,"line_end":496,"column_start":12,"column_end":28},"name":"with_max_timeout","qualname":"<BatchSpanProcessorBuilder<E, R>>::with_max_timeout","value":"pub fn with_max_timeout(Self, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set max timeout for exporting.\n","sig":null,"attributes":[{"value":"/ Set max timeout for exporting.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168522,"byte_end":168556,"line_start":495,"line_end":495,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168969,"byte_end":168995,"line_start":506,"line_end":506,"column_start":12,"column_end":38},"name":"with_max_export_batch_size","qualname":"<BatchSpanProcessorBuilder<E, R>>::with_max_export_batch_size","value":"pub fn with_max_export_batch_size(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set max export size for batches, should always less than or equals to max queue size.","sig":null,"attributes":[{"value":"/ Set max export size for batches, should always less than or equals to max queue size.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168768,"byte_end":168857,"line_start":503,"line_end":503,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168862,"byte_end":168865,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ If input is larger than max queue size, will lower it to be equal to max queue size","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":168870,"byte_end":168957,"line_start":505,"line_end":505,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":169351,"byte_end":169356,"line_start":518,"line_end":518,"column_start":12,"column_end":17},"name":"build","qualname":"<BatchSpanProcessorBuilder<E, R>>::build","value":"pub fn build(Self) -> BatchSpanProcessor","parent":null,"children":[],"decl_id":null,"docs":" Build a batch processor\n","sig":null,"attributes":[{"value":"/ Build a batch processor","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":169312,"byte_end":169339,"line_start":517,"line_end":517,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2363},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":178558,"byte_end":178564,"line_start":28,"line_end":28,"column_start":12,"column_end":18},"name":"Tracer","qualname":"::sdk::trace::tracer::Tracer","value":"Tracer {  }","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2365}],"decl_id":null,"docs":" `Tracer` implementation to create and manage spans\n","sig":null,"attributes":[{"value":"/ `Tracer` implementation to create and manage spans","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":178475,"byte_end":178529,"line_start":26,"line_end":26,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":179430,"byte_end":179438,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"provider","qualname":"<Tracer>::provider","value":"pub fn provider(&Self) -> Option<TracerProvider>","parent":null,"children":[],"decl_id":null,"docs":" TracerProvider associated with this tracer.\n","sig":null,"attributes":[{"value":"/ TracerProvider associated with this tracer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":179371,"byte_end":179418,"line_start":56,"line_end":56,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":179609,"byte_end":179632,"line_start":62,"line_end":62,"column_start":12,"column_end":35},"name":"instrumentation_library","qualname":"<Tracer>::instrumentation_library","value":"pub fn instrumentation_library(&Self) -> &InstrumentationLibrary","parent":null,"children":[],"decl_id":null,"docs":" instrumentation library information of this tracer.\n","sig":null,"attributes":[{"value":"/ instrumentation library information of this tracer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":179542,"byte_end":179597,"line_start":61,"line_end":61,"column_start":5,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":1116},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"baggage","qualname":"::baggage","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1137},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2376},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":2379},{"krate":0,"index":2382},{"krate":0,"index":2384},{"krate":0,"index":1143},{"krate":0,"index":1164},{"krate":0,"index":2386},{"krate":0,"index":2390},{"krate":0,"index":1165},{"krate":0,"index":1169},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1183},{"krate":0,"index":1192},{"krate":0,"index":2393},{"krate":0,"index":2396},{"krate":0,"index":2398},{"krate":0,"index":2400},{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2406},{"krate":0,"index":1203},{"krate":0,"index":1205},{"krate":0,"index":1207},{"krate":0,"index":2408},{"krate":0,"index":2412},{"krate":0,"index":2414},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":1209},{"krate":0,"index":1214}],"decl_id":null,"docs":" Primitives for sending name-value data across system boundaries.","sig":null,"attributes":[{"value":"/ Primitives for sending name-value data across system boundaries.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":192874,"byte_end":192942,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":192943,"byte_end":192946,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Main types in this module are:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":192947,"byte_end":192981,"line_start":3,"line_end":3,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":192982,"byte_end":192985,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * [`Baggage`]: Baggage is used to annotate telemetry, adding context and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":192986,"byte_end":193062,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/   information to metrics, traces, and logs.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193063,"byte_end":193110,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"/ * [`BaggageExt`]: Extensions for managing `Baggage` in a [`Context`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193111,"byte_end":193184,"line_start":7,"line_end":7,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193185,"byte_end":193188,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Baggage can be sent between systems using the [`BaggagePropagator`] in","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193189,"byte_end":193263,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ accordance with the [W3C Baggage] specification.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193264,"byte_end":193316,"line_start":10,"line_end":10,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193317,"byte_end":193320,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`BaggagePropagator`]: crate::sdk::propagation::BaggagePropagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193321,"byte_end":193390,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"/ [W3C Baggage]: https://w3c.github.io/baggage","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193391,"byte_end":193439,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193440,"byte_end":193443,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193444,"byte_end":193458,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193459,"byte_end":193462,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193463,"byte_end":193470,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193471,"byte_end":193502,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193503,"byte_end":193510,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Key, propagation::TextMapPropagator};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193511,"byte_end":193593,"line_start":20,"line_end":20,"column_start":1,"column_end":83}},{"value":"/ use opentelemetry::sdk::propagation::BaggagePropagator;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193594,"byte_end":193653,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193654,"byte_end":193688,"line_start":22,"line_end":22,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193689,"byte_end":193692,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Example baggage value passed in externally via http headers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193693,"byte_end":193759,"line_start":24,"line_end":24,"column_start":1,"column_end":67}},{"value":"/ let mut headers = HashMap::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193760,"byte_end":193797,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ headers.insert(\"baggage\".to_string(), \"user_id=1\".to_string());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193798,"byte_end":193865,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193866,"byte_end":193869,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let propagator = BaggagePropagator::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193870,"byte_end":193916,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/ // can extract from any type that impls `Extractor`, usually an HTTP header map","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":193917,"byte_end":194000,"line_start":29,"line_end":29,"column_start":1,"column_end":84}},{"value":"/ let cx = propagator.extract(&headers);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194001,"byte_end":194043,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194044,"byte_end":194047,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Iterate over extracted name-value pairs","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194048,"byte_end":194094,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/ for (name, value) in cx.baggage() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194095,"byte_end":194134,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/     // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194135,"byte_end":194149,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194150,"byte_end":194155,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194156,"byte_end":194159,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // Add new baggage","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194160,"byte_end":194182,"line_start":37,"line_end":37,"column_start":1,"column_end":23}},{"value":"/ let cx_with_additions = cx.with_baggage(vec![Key::new(\"server_id\").i64(42)]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194183,"byte_end":194264,"line_start":38,"line_end":38,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194265,"byte_end":194268,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ // Inject baggage into http request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194269,"byte_end":194308,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/ propagator.inject_context(&cx_with_additions, &mut headers);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194309,"byte_end":194373,"line_start":41,"line_end":41,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194374,"byte_end":194377,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let header_value = headers.get(\"baggage\").expect(\"header is injected\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194378,"byte_end":194453,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ assert!(header_value.contains(\"user_id=1\"), \"still contains previous name-value\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194454,"byte_end":194540,"line_start":44,"line_end":44,"column_start":1,"column_end":87}},{"value":"/ assert!(header_value.contains(\"server_id=42\"), \"contains new name-value pair\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194541,"byte_end":194624,"line_start":45,"line_end":45,"column_start":1,"column_end":84}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194625,"byte_end":194632,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":194633,"byte_end":194640,"line_start":47,"line_end":47,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2379},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195835,"byte_end":195842,"line_start":86,"line_end":86,"column_start":12,"column_end":19},"name":"Baggage","qualname":"::baggage::Baggage","value":"Baggage {  }","parent":null,"children":[{"krate":0,"index":2380},{"krate":0,"index":2381}],"decl_id":null,"docs":" A set of name-value pairs describing user-defined properties.","sig":null,"attributes":[{"value":"/ A set of name-value pairs describing user-defined properties.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195045,"byte_end":195110,"line_start":62,"line_end":62,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195111,"byte_end":195114,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ### Baggage Names","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195115,"byte_end":195136,"line_start":64,"line_end":64,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195137,"byte_end":195140,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ * ASCII strings according to the token format, defined in [RFC2616, Section 2.2]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195141,"byte_end":195225,"line_start":66,"line_end":66,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195226,"byte_end":195229,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ### Baggage Values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195230,"byte_end":195252,"line_start":68,"line_end":68,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195253,"byte_end":195256,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ * URL encoded UTF-8 strings.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195257,"byte_end":195289,"line_start":70,"line_end":70,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195290,"byte_end":195293,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ### Baggage Value Metadata","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195294,"byte_end":195324,"line_start":72,"line_end":72,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195325,"byte_end":195328,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ Additional metadata can be added to values in the form of a property set,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195329,"byte_end":195406,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/ represented as semi-colon `;` delimited list of names and/or name-value pairs,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195407,"byte_end":195489,"line_start":75,"line_end":75,"column_start":1,"column_end":83}},{"value":"/ e.g. `;k1=v1;k2;k3=v3`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195490,"byte_end":195517,"line_start":76,"line_end":76,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195518,"byte_end":195521,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ### Limits","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195522,"byte_end":195536,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195537,"byte_end":195540,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * Maximum number of name-value pairs: `180`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195541,"byte_end":195589,"line_start":80,"line_end":80,"column_start":1,"column_end":49}},{"value":"/ * Maximum number of bytes per a single name-value pair: `4096`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195590,"byte_end":195657,"line_start":81,"line_end":81,"column_start":1,"column_end":68}},{"value":"/ * Maximum total length of all name-value pairs: `8192`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195658,"byte_end":195717,"line_start":82,"line_end":82,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195718,"byte_end":195721,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [RFC2616, Section 2.2]: https://tools.ietf.org/html/rfc2616#section-2.2","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195722,"byte_end":195797,"line_start":84,"line_end":84,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196042,"byte_end":196045,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<Baggage>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `Baggage`.\n","sig":null,"attributes":[{"value":"/ Creates an empty `Baggage`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195999,"byte_end":196030,"line_start":92,"line_end":92,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196530,"byte_end":196533,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"get","qualname":"<Baggage>::get","value":"pub fn get<T: Into<Key>>(&Self, T) -> Option<&Value>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value associated with a given name","sig":null,"attributes":[{"value":"/ Returns a reference to the value associated with a given name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196167,"byte_end":196232,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196237,"byte_end":196240,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196245,"byte_end":196259,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196264,"byte_end":196267,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196272,"byte_end":196279,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::Baggage, Value};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196284,"byte_end":196333,"line_start":105,"line_end":105,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196338,"byte_end":196341,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let mut cc = Baggage::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196346,"byte_end":196378,"line_start":107,"line_end":107,"column_start":5,"column_end":37}},{"value":"/ let _ = cc.insert(\"my-name\", \"my-value\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196383,"byte_end":196428,"line_start":108,"line_end":108,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196433,"byte_end":196436,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cc.get(\"my-name\"), Some(&Value::from(\"my-value\")))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196441,"byte_end":196506,"line_start":110,"line_end":110,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196511,"byte_end":196518,"line_start":111,"line_end":111,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197137,"byte_end":197154,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"name":"get_with_metadata","qualname":"<Baggage>::get_with_metadata","value":"pub fn get_with_metadata<T: Into<Key>>(&Self, T)\n-> Option<&(Value, BaggageMetadata)>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value and metadata associated with a given name","sig":null,"attributes":[{"value":"/ Returns a reference to the value and metadata associated with a given name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196662,"byte_end":196740,"line_start":116,"line_end":116,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196745,"byte_end":196748,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196753,"byte_end":196767,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196772,"byte_end":196779,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::{Baggage, BaggageMetadata}, Value};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196784,"byte_end":196852,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196857,"byte_end":196860,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let mut cc = Baggage::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196865,"byte_end":196897,"line_start":122,"line_end":122,"column_start":5,"column_end":37}},{"value":"/ let _ = cc.insert(\"my-name\", \"my-value\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196902,"byte_end":196947,"line_start":123,"line_end":123,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196952,"byte_end":196955,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ // By default, the metadata is empty","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":196960,"byte_end":197000,"line_start":125,"line_end":125,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(cc.get_with_metadata(\"my-name\"), Some(&(Value::from(\"my-value\"), BaggageMetadata::from(\"\"))))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197005,"byte_end":197113,"line_start":126,"line_end":126,"column_start":5,"column_end":113}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197118,"byte_end":197125,"line_start":127,"line_end":127,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197768,"byte_end":197774,"line_start":147,"line_end":147,"column_start":12,"column_end":18},"name":"insert","qualname":"<Baggage>::insert","value":"pub fn insert<K, V>(&mut Self, K, V) -> Option<Value> where K: Into<Key>,\nV: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a name-value pair into the baggage.","sig":null,"attributes":[{"value":"/ Inserts a name-value pair into the baggage.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197270,"byte_end":197317,"line_start":132,"line_end":132,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197322,"byte_end":197325,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ If the name was not present, [`None`] is returned. If the name was present,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197330,"byte_end":197409,"line_start":134,"line_end":134,"column_start":5,"column_end":84}},{"value":"/ the value is updated, and the old value is returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197414,"byte_end":197470,"line_start":135,"line_end":135,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197475,"byte_end":197478,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197483,"byte_end":197497,"line_start":137,"line_end":137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197502,"byte_end":197505,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197510,"byte_end":197517,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::Baggage, Value};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197522,"byte_end":197571,"line_start":140,"line_end":140,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197576,"byte_end":197579,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ let mut cc = Baggage::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197584,"byte_end":197616,"line_start":142,"line_end":142,"column_start":5,"column_end":37}},{"value":"/ let _ = cc.insert(\"my-name\", \"my-value\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197621,"byte_end":197666,"line_start":143,"line_end":143,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197671,"byte_end":197674,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cc.get(\"my-name\"), Some(&Value::from(\"my-value\")))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197679,"byte_end":197744,"line_start":145,"line_end":145,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":197749,"byte_end":197756,"line_start":146,"line_end":146,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198608,"byte_end":198628,"line_start":171,"line_end":171,"column_start":12,"column_end":32},"name":"insert_with_metadata","qualname":"<Baggage>::insert_with_metadata","value":"pub fn insert_with_metadata<K, V, S>(&mut Self, K, V, S)\n-> Option<(Value, BaggageMetadata)> where K: Into<Key>, V: Into<Value>,\nS: Into<BaggageMetadata>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a name-value pair into the baggage.","sig":null,"attributes":[{"value":"/ Inserts a name-value pair into the baggage.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198006,"byte_end":198053,"line_start":156,"line_end":156,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198058,"byte_end":198061,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Same with `insert`, if the name was not present, [`None`] will be returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198066,"byte_end":198145,"line_start":158,"line_end":158,"column_start":5,"column_end":84}},{"value":"/ If the name is present, the old value and metadata will be returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198150,"byte_end":198222,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198227,"byte_end":198230,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198235,"byte_end":198249,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198254,"byte_end":198257,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198262,"byte_end":198269,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::{Baggage, BaggageMetadata}, Value};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198274,"byte_end":198342,"line_start":164,"line_end":164,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198347,"byte_end":198350,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let mut cc = Baggage::new();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198355,"byte_end":198387,"line_start":166,"line_end":166,"column_start":5,"column_end":37}},{"value":"/ let _ = cc.insert_with_metadata(\"my-name\", \"my-value\", \"test\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198392,"byte_end":198459,"line_start":167,"line_end":167,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198464,"byte_end":198467,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cc.get_with_metadata(\"my-name\"), Some(&(Value::from(\"my-value\"), BaggageMetadata::from(\"test\"))))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198472,"byte_end":198584,"line_start":169,"line_end":169,"column_start":5,"column_end":117}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":198589,"byte_end":198596,"line_start":170,"line_end":170,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199237,"byte_end":199243,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"remove","qualname":"<Baggage>::remove","value":"pub fn remove<K: Into<Key>>(&mut Self, K) -> Option<(Value, BaggageMetadata)>","parent":null,"children":[],"decl_id":null,"docs":" Removes a name from the baggage, returning the value\n corresponding to the name if the pair was previously in the map.\n","sig":null,"attributes":[{"value":"/ Removes a name from the baggage, returning the value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199096,"byte_end":199152,"line_start":190,"line_end":190,"column_start":5,"column_end":61}},{"value":"/ corresponding to the name if the pair was previously in the map.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199157,"byte_end":199225,"line_start":191,"line_end":191,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199430,"byte_end":199433,"line_start":197,"line_end":197,"column_start":12,"column_end":15},"name":"len","qualname":"<Baggage>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of attributes for this baggage\n","sig":null,"attributes":[{"value":"/ Returns the number of attributes for this baggage","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199365,"byte_end":199418,"line_start":196,"line_end":196,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199552,"byte_end":199560,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Baggage>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the baggage contains no items.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the baggage contains no items.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199488,"byte_end":199540,"line_start":201,"line_end":201,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199691,"byte_end":199695,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"iter","qualname":"<Baggage>::iter","value":"pub fn iter(&Self) -> Iter","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the baggage items, sorted by name.\n","sig":null,"attributes":[{"value":"/ Gets an iterator over the baggage items, sorted by name.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":199619,"byte_end":199679,"line_start":206,"line_end":206,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":2386},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":202021,"byte_end":202025,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"Iter","qualname":"::baggage::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the entries of a [`Baggage`].\n","sig":null,"attributes":[{"value":"/ An iterator over the entries of a [`Baggage`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":201942,"byte_end":201992,"line_start":266,"line_end":266,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":1183},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203501,"byte_end":203511,"line_start":318,"line_end":318,"column_start":11,"column_end":21},"name":"BaggageExt","qualname":"::baggage::BaggageExt","value":"BaggageExt","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1191}],"decl_id":null,"docs":" Methods for sorting and retrieving baggage data in a context.\n","sig":null,"attributes":[{"value":"/ Methods for sorting and retrieving baggage data in a context.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203425,"byte_end":203490,"line_start":317,"line_end":317,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204003,"byte_end":204015,"line_start":334,"line_end":334,"column_start":8,"column_end":20},"name":"with_baggage","qualname":"::baggage::BaggageExt::with_baggage","value":"pub fn with_baggage<T: IntoIterator<Item = I>,\n                    I: Into<KeyValueMetadata>>(&Self, T) -> Self","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Returns a clone of the given context with the included name-value pairs.","sig":null,"attributes":[{"value":"/ Returns a clone of the given context with the included name-value pairs.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203518,"byte_end":203594,"line_start":319,"line_end":319,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203599,"byte_end":203602,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203607,"byte_end":203621,"line_start":321,"line_end":321,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203626,"byte_end":203629,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203634,"byte_end":203641,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Context, KeyValue, Value};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203646,"byte_end":203717,"line_start":324,"line_end":324,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203722,"byte_end":203725,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ let some_context = Context::current();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203730,"byte_end":203772,"line_start":326,"line_end":326,"column_start":5,"column_end":47}},{"value":"/ let cx = some_context.with_baggage(vec![KeyValue::new(\"my-name\", \"my-value\")]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203777,"byte_end":203860,"line_start":327,"line_end":327,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203865,"byte_end":203868,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203873,"byte_end":203888,"line_start":329,"line_end":329,"column_start":5,"column_end":20}},{"value":"/     cx.baggage().get(\"my-name\"),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203893,"byte_end":203929,"line_start":330,"line_end":330,"column_start":5,"column_end":41}},{"value":"/     Some(&Value::from(\"my-value\")),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203934,"byte_end":203973,"line_start":331,"line_end":331,"column_start":5,"column_end":44}},{"value":"/ )","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203978,"byte_end":203983,"line_start":332,"line_end":332,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203988,"byte_end":203995,"line_start":333,"line_end":333,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204570,"byte_end":204590,"line_start":353,"line_end":353,"column_start":8,"column_end":28},"name":"current_with_baggage","qualname":"::baggage::BaggageExt::current_with_baggage","value":"pub fn current_with_baggage<T: IntoIterator<Item = I>,\n                            I: Into<KeyValueMetadata>>(T) -> Self","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Returns a clone of the current context with the included name-value pairs.","sig":null,"attributes":[{"value":"/ Returns a clone of the current context with the included name-value pairs.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204126,"byte_end":204204,"line_start":339,"line_end":339,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204209,"byte_end":204212,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204217,"byte_end":204231,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204236,"byte_end":204239,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204244,"byte_end":204251,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Context, KeyValue, Value};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204256,"byte_end":204327,"line_start":344,"line_end":344,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204332,"byte_end":204335,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ let cx = Context::current_with_baggage(vec![KeyValue::new(\"my-name\", \"my-value\")]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204340,"byte_end":204427,"line_start":346,"line_end":346,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204432,"byte_end":204435,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204440,"byte_end":204455,"line_start":348,"line_end":348,"column_start":5,"column_end":20}},{"value":"/     cx.baggage().get(\"my-name\"),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204460,"byte_end":204496,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/     Some(&Value::from(\"my-value\")),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204501,"byte_end":204540,"line_start":350,"line_end":350,"column_start":5,"column_end":44}},{"value":"/ )","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204545,"byte_end":204550,"line_start":351,"line_end":351,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204555,"byte_end":204562,"line_start":352,"line_end":352,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":205024,"byte_end":205044,"line_start":368,"line_end":368,"column_start":8,"column_end":28},"name":"with_cleared_baggage","qualname":"::baggage::BaggageExt::with_cleared_baggage","value":"pub fn with_cleared_baggage(&Self) -> Self","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Returns a clone of the given context with the included name-value pairs.","sig":null,"attributes":[{"value":"/ Returns a clone of the given context with the included name-value pairs.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204686,"byte_end":204762,"line_start":357,"line_end":357,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204767,"byte_end":204770,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204775,"byte_end":204789,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204794,"byte_end":204797,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204802,"byte_end":204809,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Context, KeyValue, Value};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204814,"byte_end":204885,"line_start":362,"line_end":362,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204890,"byte_end":204893,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ let cx = Context::current().with_cleared_baggage();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204898,"byte_end":204953,"line_start":364,"line_end":364,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204958,"byte_end":204961,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cx.baggage().len(), 0);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":204966,"byte_end":205004,"line_start":366,"line_end":366,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":205009,"byte_end":205016,"line_start":367,"line_end":367,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":205183,"byte_end":205190,"line_start":372,"line_end":372,"column_start":8,"column_end":15},"name":"baggage","qualname":"::baggage::BaggageExt::baggage","value":"pub fn baggage(&Self) -> &Baggage","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Returns a reference to this context's baggage, or the default\n empty baggage if none has been set.\n","sig":null,"attributes":[{"value":"/ Returns a reference to this context's baggage, or the default","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":205066,"byte_end":205131,"line_start":370,"line_end":370,"column_start":5,"column_end":70}},{"value":"/ empty baggage if none has been set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":205136,"byte_end":205175,"line_start":371,"line_end":371,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":2393},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206549,"byte_end":206564,"line_start":414,"line_end":414,"column_start":12,"column_end":27},"name":"BaggageMetadata","qualname":"::baggage::BaggageMetadata","value":"","parent":null,"children":[],"decl_id":null,"docs":" An optional property set that can be added to [`Baggage`] values.","sig":null,"attributes":[{"value":"/ An optional property set that can be added to [`Baggage`] values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206154,"byte_end":206223,"line_start":407,"line_end":407,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206224,"byte_end":206227,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ `BaggageMetadata` can be added to values in the form of a property set,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206228,"byte_end":206303,"line_start":409,"line_end":409,"column_start":1,"column_end":76}},{"value":"/ represented as semi-colon `;` delimited list of names and/or name-value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206304,"byte_end":206379,"line_start":410,"line_end":410,"column_start":1,"column_end":76}},{"value":"/ pairs, e.g. `;k1=v1;k2;k3=v3`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206380,"byte_end":206414,"line_start":411,"line_end":411,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206642,"byte_end":206648,"line_start":418,"line_end":418,"column_start":12,"column_end":18},"name":"as_str","qualname":"<BaggageMetadata>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return underlying string\n","sig":null,"attributes":[{"value":"/ Return underlying string","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206602,"byte_end":206630,"line_start":417,"line_end":417,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2408},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207140,"byte_end":207156,"line_start":438,"line_end":438,"column_start":12,"column_end":28},"name":"KeyValueMetadata","qualname":"::baggage::KeyValueMetadata","value":"KeyValueMetadata { key, value, metadata }","parent":null,"children":[{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2411}],"decl_id":null,"docs":" [`Baggage`] name-value pairs with their associated metadata.\n","sig":null,"attributes":[{"value":"/ [`Baggage`] name-value pairs with their associated metadata.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206962,"byte_end":207026,"line_start":435,"line_end":435,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2409},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207198,"byte_end":207201,"line_start":440,"line_end":440,"column_start":9,"column_end":12},"name":"key","qualname":"::baggage::KeyValueMetadata::key","value":"core::Key","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" Dimension or event key\n","sig":null,"attributes":[{"value":"/ Dimension or event key","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207163,"byte_end":207189,"line_start":439,"line_end":439,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2410},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207249,"byte_end":207254,"line_start":442,"line_end":442,"column_start":9,"column_end":14},"name":"value","qualname":"::baggage::KeyValueMetadata::value","value":"core::Value","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" Dimension or event value\n","sig":null,"attributes":[{"value":"/ Dimension or event value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207212,"byte_end":207240,"line_start":441,"line_end":441,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2411},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207323,"byte_end":207331,"line_start":444,"line_end":444,"column_start":9,"column_end":17},"name":"metadata","qualname":"::baggage::KeyValueMetadata::metadata","value":"baggage::BaggageMetadata","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" Metadata associate with this key value pair\n","sig":null,"attributes":[{"value":"/ Metadata associate with this key value pair","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207267,"byte_end":207314,"line_start":443,"line_end":443,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207439,"byte_end":207442,"line_start":449,"line_end":449,"column_start":12,"column_end":15},"name":"new","qualname":"<KeyValueMetadata>::new","value":"pub fn new<K, V, S>(K, V, S) -> Self where K: Into<Key>, V: Into<Value>,\nS: Into<BaggageMetadata>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `KeyValue` pair with metadata\n","sig":null,"attributes":[{"value":"/ Create a new `KeyValue` pair with metadata","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207381,"byte_end":207427,"line_start":448,"line_end":448,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":2428},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212709,"byte_end":212716,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"Context","qualname":"::context::Context","value":"Context {  }","parent":null,"children":[{"krate":0,"index":2429}],"decl_id":null,"docs":" An execution-scoped collection of values.","sig":null,"attributes":[{"value":"/ An execution-scoped collection of values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210227,"byte_end":210272,"line_start":14,"line_end":14,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210273,"byte_end":210276,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ A [`Context`] is a propagation mechanism which carries execution-scoped","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210277,"byte_end":210352,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ values across API boundaries and between logically associated execution","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210353,"byte_end":210428,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ units. Cross-cutting concerns access their data in-process using the same","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210429,"byte_end":210506,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ shared context object.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210507,"byte_end":210533,"line_start":19,"line_end":19,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210534,"byte_end":210537,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`Context`]s are immutable, and their write operations result in the creation","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210538,"byte_end":210619,"line_start":21,"line_end":21,"column_start":1,"column_end":82}},{"value":"/ of a new context containing the original values and the new specified values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210620,"byte_end":210701,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210702,"byte_end":210705,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Context state","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210706,"byte_end":210726,"line_start":24,"line_end":24,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210727,"byte_end":210730,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Concerns can create and retrieve their local state in the current execution","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210731,"byte_end":210810,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ state represented by a context through the [`get`] and [`with_value`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210811,"byte_end":210884,"line_start":27,"line_end":27,"column_start":1,"column_end":74}},{"value":"/ methods. It is recommended to use application-specific types when storing new","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210885,"byte_end":210966,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ context values to avoid unintentionally overwriting existing state.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":210967,"byte_end":211038,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211039,"byte_end":211042,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Managing the current context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211043,"byte_end":211078,"line_start":31,"line_end":31,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211079,"byte_end":211082,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Contexts can be associated with the caller's current execution unit on a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211083,"byte_end":211159,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ given thread via the [`attach`] method, and previous contexts can be restored","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211160,"byte_end":211241,"line_start":34,"line_end":34,"column_start":1,"column_end":82}},{"value":"/ by dropping the returned [`ContextGuard`]. Context can be nested, and will","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211242,"byte_end":211320,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ restore their parent outer context when detached on drop. To access the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211321,"byte_end":211396,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ values of the context, a snapshot can be created via the [`Context::current`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211397,"byte_end":211478,"line_start":37,"line_end":37,"column_start":1,"column_end":82}},{"value":"/ method.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211479,"byte_end":211490,"line_start":38,"line_end":38,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211491,"byte_end":211494,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Context::current`]: Context::current()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211495,"byte_end":211539,"line_start":40,"line_end":40,"column_start":1,"column_end":45}},{"value":"/ [`get`]: Context::get()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211540,"byte_end":211567,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/ [`with_value`]: Context::with_value()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211568,"byte_end":211609,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/ [`attach`]: Context::attach()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211610,"byte_end":211643,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211644,"byte_end":211647,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211648,"byte_end":211662,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211663,"byte_end":211666,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211667,"byte_end":211674,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211675,"byte_end":211706,"line_start":48,"line_end":48,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211707,"byte_end":211710,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Application-specific `a` and `b` values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211711,"byte_end":211757,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211758,"byte_end":211789,"line_start":51,"line_end":51,"column_start":1,"column_end":32}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211790,"byte_end":211822,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211823,"byte_end":211854,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/ struct ValueB(u64);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211855,"byte_end":211878,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211879,"byte_end":211882,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ let _outer_guard = Context::new().with_value(ValueA(\"a\")).attach();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211883,"byte_end":211954,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211955,"byte_end":211958,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Only value a has been set","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211959,"byte_end":211991,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/ let current = Context::current();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":211992,"byte_end":212029,"line_start":59,"line_end":59,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(current.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212030,"byte_end":212090,"line_start":60,"line_end":60,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(current.get::<ValueB>(), None);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212091,"byte_end":212137,"line_start":61,"line_end":61,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212138,"byte_end":212141,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212142,"byte_end":212147,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/     let _inner_guard = Context::current_with_value(ValueB(42)).attach();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212148,"byte_end":212224,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/     // Both values are set in inner context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212225,"byte_end":212272,"line_start":65,"line_end":65,"column_start":1,"column_end":48}},{"value":"/     let current = Context::current();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212273,"byte_end":212314,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/     assert_eq!(current.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212315,"byte_end":212379,"line_start":67,"line_end":67,"column_start":1,"column_end":65}},{"value":"/     assert_eq!(current.get::<ValueB>(), Some(&ValueB(42)));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212380,"byte_end":212443,"line_start":68,"line_end":68,"column_start":1,"column_end":64}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212444,"byte_end":212449,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212450,"byte_end":212453,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ // Resets to only the `a` value when inner guard is dropped","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212454,"byte_end":212517,"line_start":71,"line_end":71,"column_start":1,"column_end":64}},{"value":"/ let current = Context::current();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212518,"byte_end":212555,"line_start":72,"line_end":72,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(current.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212556,"byte_end":212616,"line_start":73,"line_end":73,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(current.get::<ValueB>(), None);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212617,"byte_end":212663,"line_start":74,"line_end":74,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212664,"byte_end":212671,"line_start":75,"line_end":75,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213091,"byte_end":213094,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `Context`.","sig":null,"attributes":[{"value":"/ Creates an empty `Context`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212829,"byte_end":212860,"line_start":82,"line_end":82,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212865,"byte_end":212868,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ The context is initially created with a capacity of 0, so it will not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212873,"byte_end":212946,"line_start":84,"line_end":84,"column_start":5,"column_end":78}},{"value":"/ allocate. Use [`with_value`] to create a new context that has entries.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212951,"byte_end":213025,"line_start":85,"line_end":85,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213030,"byte_end":213033,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ [`with_value`]: Context::with_value()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213038,"byte_end":213079,"line_start":87,"line_end":87,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213606,"byte_end":213613,"line_start":109,"line_end":109,"column_start":12,"column_end":19},"name":"current","qualname":"<Context>::current","value":"pub fn current() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable snapshot of the current thread's context.","sig":null,"attributes":[{"value":"/ Returns an immutable snapshot of the current thread's context.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213145,"byte_end":213211,"line_start":92,"line_end":92,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213216,"byte_end":213219,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213224,"byte_end":213238,"line_start":94,"line_end":94,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213243,"byte_end":213246,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213251,"byte_end":213258,"line_start":96,"line_end":96,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213263,"byte_end":213294,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213299,"byte_end":213302,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213307,"byte_end":213338,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213343,"byte_end":213375,"line_start":100,"line_end":100,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213380,"byte_end":213383,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ fn do_work() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213388,"byte_end":213406,"line_start":102,"line_end":102,"column_start":5,"column_end":23}},{"value":"/     assert_eq!(Context::current().get(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213411,"byte_end":213476,"line_start":103,"line_end":103,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213481,"byte_end":213486,"line_start":104,"line_end":104,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213491,"byte_end":213494,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ let _guard = Context::new().with_value(ValueA(\"a\")).attach();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213499,"byte_end":213564,"line_start":106,"line_end":106,"column_start":5,"column_end":70}},{"value":"/ do_work()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213569,"byte_end":213582,"line_start":107,"line_end":107,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213587,"byte_end":213594,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214751,"byte_end":214769,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"current_with_value","qualname":"<Context>::current_with_value","value":"pub fn current_with_value<T: 'static + Send + Sync>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the current thread's context with the given value.","sig":null,"attributes":[{"value":"/ Returns a clone of the current thread's context with the given value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213674,"byte_end":213747,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213752,"byte_end":213755,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ This is a more efficient form of `Context::current().with_value(value)`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213760,"byte_end":213835,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ as it avoids the intermediate context clone.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213840,"byte_end":213888,"line_start":116,"line_end":116,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213893,"byte_end":213896,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213901,"byte_end":213915,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213920,"byte_end":213923,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213928,"byte_end":213935,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213940,"byte_end":213971,"line_start":121,"line_end":121,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213976,"byte_end":213979,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ // Given some value types defined in your application","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":213984,"byte_end":214041,"line_start":123,"line_end":123,"column_start":5,"column_end":62}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214046,"byte_end":214077,"line_start":124,"line_end":124,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214082,"byte_end":214114,"line_start":125,"line_end":125,"column_start":5,"column_end":37}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214119,"byte_end":214150,"line_start":126,"line_end":126,"column_start":5,"column_end":36}},{"value":"/ struct ValueB(u64);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214155,"byte_end":214178,"line_start":127,"line_end":127,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214183,"byte_end":214186,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ // You can create and attach context with the first value set to \"a\"","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214191,"byte_end":214263,"line_start":129,"line_end":129,"column_start":5,"column_end":77}},{"value":"/ let _guard = Context::new().with_value(ValueA(\"a\")).attach();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214268,"byte_end":214333,"line_start":130,"line_end":130,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214338,"byte_end":214341,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ // And create another context based on the fist with a new value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214346,"byte_end":214414,"line_start":132,"line_end":132,"column_start":5,"column_end":73}},{"value":"/ let all_current_and_b = Context::current_with_value(ValueB(42));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214419,"byte_end":214487,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214492,"byte_end":214495,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ // The second context now contains all the current values and the addition","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214500,"byte_end":214578,"line_start":135,"line_end":135,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(all_current_and_b.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214583,"byte_end":214653,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(all_current_and_b.get::<ValueB>(), Some(&ValueB(42)));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214658,"byte_end":214727,"line_start":137,"line_end":137,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214732,"byte_end":214739,"line_start":138,"line_end":138,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215647,"byte_end":215650,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"get","qualname":"<Context>::get","value":"pub fn get<T: 'static>(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the entry for the corresponding value type.","sig":null,"attributes":[{"value":"/ Returns a reference to the entry for the corresponding value type.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":214996,"byte_end":215066,"line_start":148,"line_end":148,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215071,"byte_end":215074,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215079,"byte_end":215093,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215098,"byte_end":215101,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215106,"byte_end":215113,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215118,"byte_end":215149,"line_start":153,"line_end":153,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215154,"byte_end":215157,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ // Given some value types defined in your application","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215162,"byte_end":215219,"line_start":155,"line_end":155,"column_start":5,"column_end":62}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215224,"byte_end":215255,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215260,"byte_end":215292,"line_start":157,"line_end":157,"column_start":5,"column_end":37}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215297,"byte_end":215328,"line_start":158,"line_end":158,"column_start":5,"column_end":36}},{"value":"/ struct MyUser();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215333,"byte_end":215353,"line_start":159,"line_end":159,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215358,"byte_end":215361,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ let cx = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215366,"byte_end":215418,"line_start":161,"line_end":161,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215423,"byte_end":215426,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ // Values can be queried by type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215431,"byte_end":215467,"line_start":163,"line_end":163,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(cx.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215472,"byte_end":215527,"line_start":164,"line_end":164,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215532,"byte_end":215535,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ // And return none if not yet set","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215540,"byte_end":215577,"line_start":166,"line_end":166,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(cx.get::<MyUser>(), None);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215582,"byte_end":215623,"line_start":167,"line_end":167,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215628,"byte_end":215635,"line_start":168,"line_end":168,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216865,"byte_end":216875,"line_start":202,"line_end":202,"column_start":12,"column_end":22},"name":"with_value","qualname":"<Context>::with_value","value":"pub fn with_value<T: 'static + Send + Sync>(&Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the context with the new value included.","sig":null,"attributes":[{"value":"/ Returns a copy of the context with the new value included.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215805,"byte_end":215867,"line_start":175,"line_end":175,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215872,"byte_end":215875,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215880,"byte_end":215894,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215899,"byte_end":215902,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215907,"byte_end":215914,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215919,"byte_end":215950,"line_start":180,"line_end":180,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215955,"byte_end":215958,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ // Given some value types defined in your application","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":215963,"byte_end":216020,"line_start":182,"line_end":182,"column_start":5,"column_end":62}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216025,"byte_end":216056,"line_start":183,"line_end":183,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216061,"byte_end":216093,"line_start":184,"line_end":184,"column_start":5,"column_end":37}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216098,"byte_end":216129,"line_start":185,"line_end":185,"column_start":5,"column_end":36}},{"value":"/ struct ValueB(u64);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216134,"byte_end":216157,"line_start":186,"line_end":186,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216162,"byte_end":216165,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ // You can create a context with the first value set to \"a\"","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216170,"byte_end":216233,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"/ let cx_with_a = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216238,"byte_end":216297,"line_start":189,"line_end":189,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216302,"byte_end":216305,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ // And create another context based on the fist with a new value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216310,"byte_end":216378,"line_start":191,"line_end":191,"column_start":5,"column_end":73}},{"value":"/ let cx_with_a_and_b = cx_with_a.with_value(ValueB(42));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216383,"byte_end":216442,"line_start":192,"line_end":192,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216447,"byte_end":216450,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ // The first context is still available and unmodified","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216455,"byte_end":216513,"line_start":194,"line_end":194,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(cx_with_a.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216518,"byte_end":216580,"line_start":195,"line_end":195,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(cx_with_a.get::<ValueB>(), None);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216585,"byte_end":216633,"line_start":196,"line_end":196,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216638,"byte_end":216641,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ // The second context now contains both values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216646,"byte_end":216696,"line_start":198,"line_end":198,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(cx_with_a_and_b.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216701,"byte_end":216769,"line_start":199,"line_end":199,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(cx_with_a_and_b.get::<ValueB>(), Some(&ValueB(42)));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216774,"byte_end":216841,"line_start":200,"line_end":200,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":216846,"byte_end":216853,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219519,"byte_end":219525,"line_start":285,"line_end":285,"column_start":12,"column_end":18},"name":"attach","qualname":"<Context>::attach","value":"pub fn attach(Self) -> ContextGuard","parent":null,"children":[],"decl_id":null,"docs":" Replaces the current context on this thread with this context.","sig":null,"attributes":[{"value":"/ Replaces the current context on this thread with this context.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217103,"byte_end":217169,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217174,"byte_end":217177,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Dropping the returned [`ContextGuard`] will reset the current context to the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217182,"byte_end":217262,"line_start":213,"line_end":213,"column_start":5,"column_end":85}},{"value":"/ previous value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217267,"byte_end":217286,"line_start":214,"line_end":214,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217291,"byte_end":217294,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217299,"byte_end":217302,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217307,"byte_end":217321,"line_start":217,"line_end":217,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217326,"byte_end":217329,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217334,"byte_end":217341,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217346,"byte_end":217377,"line_start":220,"line_end":220,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217382,"byte_end":217385,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217390,"byte_end":217421,"line_start":222,"line_end":222,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217426,"byte_end":217458,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217463,"byte_end":217466,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ let my_cx = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217471,"byte_end":217526,"line_start":225,"line_end":225,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217531,"byte_end":217534,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ // Set the current thread context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217539,"byte_end":217576,"line_start":227,"line_end":227,"column_start":5,"column_end":42}},{"value":"/ let cx_guard = my_cx.attach();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217581,"byte_end":217615,"line_start":228,"line_end":228,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Context::current().get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217620,"byte_end":217691,"line_start":229,"line_end":229,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217696,"byte_end":217699,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ // Drop the guard to restore the previous context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217704,"byte_end":217757,"line_start":231,"line_end":231,"column_start":5,"column_end":58}},{"value":"/ drop(cx_guard);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217762,"byte_end":217781,"line_start":232,"line_end":232,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(Context::current().get::<ValueA>(), None);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217786,"byte_end":217843,"line_start":233,"line_end":233,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217848,"byte_end":217855,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217860,"byte_end":217863,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Guards do not need to be explicitly dropped:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217868,"byte_end":217916,"line_start":236,"line_end":236,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217921,"byte_end":217924,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217929,"byte_end":217936,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217941,"byte_end":217972,"line_start":239,"line_end":239,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217977,"byte_end":217980,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":217985,"byte_end":218016,"line_start":241,"line_end":241,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218021,"byte_end":218053,"line_start":242,"line_end":242,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218058,"byte_end":218061,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ fn my_function() -> String {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218066,"byte_end":218098,"line_start":244,"line_end":244,"column_start":5,"column_end":37}},{"value":"/     // attach a context the duration of this function.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218103,"byte_end":218161,"line_start":245,"line_end":245,"column_start":5,"column_end":63}},{"value":"/     let my_cx = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218166,"byte_end":218225,"line_start":246,"line_end":246,"column_start":5,"column_end":64}},{"value":"/     // NOTE: a variable name after the underscore is **required** or rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218230,"byte_end":218307,"line_start":247,"line_end":247,"column_start":5,"column_end":82}},{"value":"/     // will drop the guard, restoring the previous context _immediately_.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218312,"byte_end":218389,"line_start":248,"line_end":248,"column_start":5,"column_end":82}},{"value":"/     let _guard = my_cx.attach();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218394,"byte_end":218430,"line_start":249,"line_end":249,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218435,"byte_end":218438,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/     // anything happening in functions we call can still access my_cx...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218443,"byte_end":218519,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/     my_other_function();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218524,"byte_end":218552,"line_start":252,"line_end":252,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218557,"byte_end":218560,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/     // returning from the function drops the guard, exiting the span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218565,"byte_end":218638,"line_start":254,"line_end":254,"column_start":5,"column_end":78}},{"value":"/     return \"Hello world\".to_owned();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218643,"byte_end":218683,"line_start":255,"line_end":255,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218688,"byte_end":218693,"line_start":256,"line_end":256,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218698,"byte_end":218701,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ fn my_other_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218706,"byte_end":218734,"line_start":258,"line_end":258,"column_start":5,"column_end":33}},{"value":"/     // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218739,"byte_end":218753,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218758,"byte_end":218763,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218768,"byte_end":218775,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ Sub-scopes may be created to limit the duration for which the span is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218780,"byte_end":218853,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ entered:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218858,"byte_end":218870,"line_start":263,"line_end":263,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218875,"byte_end":218878,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218883,"byte_end":218890,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218895,"byte_end":218926,"line_start":266,"line_end":266,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218931,"byte_end":218934,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218939,"byte_end":218970,"line_start":268,"line_end":268,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":218975,"byte_end":219007,"line_start":269,"line_end":269,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219012,"byte_end":219015,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let my_cx = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219020,"byte_end":219075,"line_start":271,"line_end":271,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219080,"byte_end":219083,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219088,"byte_end":219093,"line_start":273,"line_end":273,"column_start":5,"column_end":10}},{"value":"/     let _guard = my_cx.attach();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219098,"byte_end":219134,"line_start":274,"line_end":274,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219139,"byte_end":219142,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/     // the current context can access variables in","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219147,"byte_end":219201,"line_start":276,"line_end":276,"column_start":5,"column_end":59}},{"value":"/     assert_eq!(Context::current().get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219206,"byte_end":219281,"line_start":277,"line_end":277,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219286,"byte_end":219289,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/     // exiting the scope drops the guard, detaching the context.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219294,"byte_end":219362,"line_start":279,"line_end":279,"column_start":5,"column_end":73}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219367,"byte_end":219372,"line_start":280,"line_end":280,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219377,"byte_end":219380,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ // this is back in the default empty context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219385,"byte_end":219433,"line_start":282,"line_end":282,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(Context::current().get::<ValueA>(), None);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219438,"byte_end":219495,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219500,"byte_end":219507,"line_start":284,"line_end":284,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1261},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":220107,"byte_end":220119,"line_start":307,"line_end":307,"column_start":12,"column_end":24},"name":"ContextGuard","qualname":"::context::ContextGuard","value":"ContextGuard {  }","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263}],"decl_id":null,"docs":" A guard that resets the current context to the prior context when dropped.\n","sig":null,"attributes":[{"value":"/ A guard that resets the current context to the prior context when dropped.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219977,"byte_end":220055,"line_start":305,"line_end":305,"column_start":1,"column_end":79}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":220056,"byte_end":220095,"line_start":306,"line_end":306,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2443},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":222776,"byte_end":222779,"line_start":10,"line_end":10,"column_start":12,"column_end":15},"name":"Key","qualname":"::core::Key","value":"","parent":null,"children":[],"decl_id":null,"docs":" Key used for metric `LabelSet`s and trace `Span` attributes.\n","sig":null,"attributes":[{"value":"/ Key used for metric `LabelSet`s and trace `Span` attributes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":222571,"byte_end":222635,"line_start":7,"line_end":7,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":222851,"byte_end":222854,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<Key>::new","value":"pub fn new<S: Into<Cow>>(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Key`.\n","sig":null,"attributes":[{"value":"/ Create a new `Key`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":222816,"byte_end":222839,"line_start":13,"line_end":13,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":222987,"byte_end":223002,"line_start":19,"line_end":19,"column_start":18,"column_end":33},"name":"from_static_str","qualname":"<Key>::from_static_str","value":"pub const fn from_static_str(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new const `Key`.\n","sig":null,"attributes":[{"value":"/ Create a new const `Key`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":222940,"byte_end":222969,"line_start":18,"line_end":18,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223138,"byte_end":223142,"line_start":24,"line_end":24,"column_start":12,"column_end":16},"name":"bool","qualname":"<Key>::bool","value":"pub fn bool<T: Into<bool>>(&Self, T) -> KeyValue","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for `bool` values.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for `bool` values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223079,"byte_end":223126,"line_start":23,"line_end":23,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223364,"byte_end":223367,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"i64","qualname":"<Key>::i64","value":"pub fn i64(&Self, i64) -> KeyValue","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for `i64` values.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for `i64` values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223306,"byte_end":223352,"line_start":31,"line_end":31,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223568,"byte_end":223571,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"f64","qualname":"<Key>::f64","value":"pub fn f64(&Self, f64) -> KeyValue","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for `f64` values.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for `f64` values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223510,"byte_end":223556,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223775,"byte_end":223781,"line_start":48,"line_end":48,"column_start":12,"column_end":18},"name":"string","qualname":"<Key>::string","value":"pub fn string<T: Into<Cow>>(&Self, T) -> KeyValue","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for `String` values.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for `String` values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223714,"byte_end":223763,"line_start":47,"line_end":47,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224012,"byte_end":224017,"line_start":56,"line_end":56,"column_start":12,"column_end":17},"name":"array","qualname":"<Key>::array","value":"pub fn array<T: Into<Array>>(&Self, T) -> KeyValue","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for arrays.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for arrays.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":223960,"byte_end":224000,"line_start":55,"line_end":55,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224245,"byte_end":224251,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Key>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying key name\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying key name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224183,"byte_end":224233,"line_start":63,"line_end":63,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2465},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225052,"byte_end":225056,"line_start":101,"line_end":101,"column_start":5,"column_end":9},"name":"Bool","qualname":"::core::Array::Bool","value":"Array::Bool(Vec<bool>)","parent":{"krate":0,"index":2464},"children":[],"decl_id":null,"docs":" Array of bools\n","sig":null,"attributes":[{"value":"/ Array of bools","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225029,"byte_end":225047,"line_start":100,"line_end":100,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2468},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225099,"byte_end":225102,"line_start":103,"line_end":103,"column_start":5,"column_end":8},"name":"I64","qualname":"::core::Array::I64","value":"Array::I64(Vec<i64>)","parent":{"krate":0,"index":2464},"children":[],"decl_id":null,"docs":" Array of integers\n","sig":null,"attributes":[{"value":"/ Array of integers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225073,"byte_end":225094,"line_start":102,"line_end":102,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2471},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225142,"byte_end":225145,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"F64","qualname":"::core::Array::F64","value":"Array::F64(Vec<f64>)","parent":{"krate":0,"index":2464},"children":[],"decl_id":null,"docs":" Array of floats\n","sig":null,"attributes":[{"value":"/ Array of floats","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225118,"byte_end":225137,"line_start":104,"line_end":104,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2474},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225186,"byte_end":225192,"line_start":107,"line_end":107,"column_start":5,"column_end":11},"name":"String","qualname":"::core::Array::String","value":"Array::String(Vec<Cow>)","parent":{"krate":0,"index":2464},"children":[],"decl_id":null,"docs":" Array of strings\n","sig":null,"attributes":[{"value":"/ Array of strings","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225161,"byte_end":225181,"line_start":106,"line_end":106,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":2464},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225017,"byte_end":225022,"line_start":99,"line_end":99,"column_start":10,"column_end":15},"name":"Array","qualname":"::core::Array","value":"pub enum Array {\n    Bool(Vec<bool>),\n    I64(Vec<i64>),\n    F64(Vec<f64>),\n    String(Vec<Cow>),\n}","parent":null,"children":[{"krate":0,"index":2465},{"krate":0,"index":2468},{"krate":0,"index":2471},{"krate":0,"index":2474}],"decl_id":null,"docs":" Array of homogeneous values\n","sig":null,"attributes":[{"value":"/ Array of homogeneous values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224874,"byte_end":224905,"line_start":96,"line_end":96,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2494},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226750,"byte_end":226754,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"Bool","qualname":"::core::Value::Bool","value":"Value::Bool(bool)","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" bool values\n","sig":null,"attributes":[{"value":"/ bool values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226730,"byte_end":226745,"line_start":164,"line_end":164,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2497},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226785,"byte_end":226788,"line_start":167,"line_end":167,"column_start":5,"column_end":8},"name":"I64","qualname":"::core::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" i64 values\n","sig":null,"attributes":[{"value":"/ i64 values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226766,"byte_end":226780,"line_start":166,"line_end":166,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2500},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226818,"byte_end":226821,"line_start":169,"line_end":169,"column_start":5,"column_end":8},"name":"F64","qualname":"::core::Value::F64","value":"Value::F64(f64)","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" f64 values\n","sig":null,"attributes":[{"value":"/ f64 values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226799,"byte_end":226813,"line_start":168,"line_end":168,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2503},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226854,"byte_end":226860,"line_start":171,"line_end":171,"column_start":5,"column_end":11},"name":"String","qualname":"::core::Value::String","value":"Value::String(Cow)","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" String values\n","sig":null,"attributes":[{"value":"/ String values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226832,"byte_end":226849,"line_start":170,"line_end":170,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2506},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226921,"byte_end":226926,"line_start":173,"line_end":173,"column_start":5,"column_end":10},"name":"Array","qualname":"::core::Value::Array","value":"Value::Array(Array)","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Array of homogeneous values\n","sig":null,"attributes":[{"value":"/ Array of homogeneous values","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226885,"byte_end":226916,"line_start":172,"line_end":172,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":2493},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226718,"byte_end":226723,"line_start":163,"line_end":163,"column_start":10,"column_end":15},"name":"Value","qualname":"::core::Value","value":"pub enum Value { Bool(bool), I64(i64), F64(f64), String(Cow), Array(Array), }","parent":null,"children":[{"krate":0,"index":2494},{"krate":0,"index":2497},{"krate":0,"index":2500},{"krate":0,"index":2503},{"krate":0,"index":2506}],"decl_id":null,"docs":" Value types for use in `KeyValue` pairs.\n","sig":null,"attributes":[{"value":"/ Value types for use in `KeyValue` pairs.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226562,"byte_end":226606,"line_start":160,"line_end":160,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":227086,"byte_end":227092,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Value>::as_str","value":"pub fn as_str(&Self) -> Cow<, str>","parent":null,"children":[],"decl_id":null,"docs":" String representation of the `Value`","sig":null,"attributes":[{"value":"/ String representation of the `Value`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226955,"byte_end":226995,"line_start":177,"line_end":177,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":227000,"byte_end":227003,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This will allocate iff the underlying value is not a `String`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":227008,"byte_end":227074,"line_start":179,"line_end":179,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":2525},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228849,"byte_end":228857,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"KeyValue","qualname":"::core::KeyValue","value":"KeyValue { key, value }","parent":null,"children":[{"krate":0,"index":2526},{"krate":0,"index":2527}],"decl_id":null,"docs":" `KeyValue` pairs are used by `LabelSet`s and `Span` attributes.\n","sig":null,"attributes":[{"value":"/ `KeyValue` pairs are used by `LabelSet`s and `Span` attributes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228668,"byte_end":228735,"line_start":240,"line_end":240,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":2526},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228899,"byte_end":228902,"line_start":245,"line_end":245,"column_start":9,"column_end":12},"name":"key","qualname":"::core::KeyValue::key","value":"core::Key","parent":{"krate":0,"index":2525},"children":[],"decl_id":null,"docs":" Dimension or event key\n","sig":null,"attributes":[{"value":"/ Dimension or event key","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228864,"byte_end":228890,"line_start":244,"line_end":244,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2527},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228950,"byte_end":228955,"line_start":247,"line_end":247,"column_start":9,"column_end":14},"name":"value","qualname":"::core::KeyValue::value","value":"core::Value","parent":{"krate":0,"index":2525},"children":[],"decl_id":null,"docs":" Dimension or event value\n","sig":null,"attributes":[{"value":"/ Dimension or event value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228913,"byte_end":228941,"line_start":246,"line_end":246,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229032,"byte_end":229035,"line_start":252,"line_end":252,"column_start":12,"column_end":15},"name":"new","qualname":"<KeyValue>::new","value":"pub fn new<K, V>(K, V) -> Self where K: Into<Key>, V: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `KeyValue` pair.\n","sig":null,"attributes":[{"value":"/ Create a new `KeyValue` pair.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228987,"byte_end":229020,"line_start":251,"line_end":251,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2536},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229351,"byte_end":229355,"line_start":266,"line_end":266,"column_start":12,"column_end":16},"name":"Unit","qualname":"::core::Unit","value":"","parent":null,"children":[],"decl_id":null,"docs":" Units denote underlying data units tracked by `Meter`s.\n","sig":null,"attributes":[{"value":"/ Units denote underlying data units tracked by `Meter`s.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229230,"byte_end":229289,"line_start":264,"line_end":264,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229440,"byte_end":229443,"line_start":270,"line_end":270,"column_start":12,"column_end":15},"name":"new","qualname":"<Unit>::new","value":"pub fn new<S: Into<String>>(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Unit` from an `Into<String>`\n","sig":null,"attributes":[{"value":"/ Create a new `Unit` from an `Into<String>`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229382,"byte_end":229428,"line_start":269,"line_end":269,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229552,"byte_end":229558,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Unit>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" View unit as &str\n","sig":null,"attributes":[{"value":"/ View unit as &str","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229519,"byte_end":229540,"line_start":274,"line_end":274,"column_start":5,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":1352},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"runtime","qualname":"::runtime","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1357},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1367}],"decl_id":null,"docs":" Provides an abstraction of several async runtimes","sig":null,"attributes":[{"value":"/ Provides an abstraction of several async runtimes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":229706,"byte_end":229759,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":229760,"byte_end":229763,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This  allows OpenTelemetry to work with any current or future runtime. There are currently","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":229764,"byte_end":229858,"line_start":3,"line_end":3,"column_start":1,"column_end":95}},{"value":"/ builtin implementations for [Tokio] and [async-std].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":229859,"byte_end":229915,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":229916,"byte_end":229919,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [Tokio]: https://crates.io/crates/tokio","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":229920,"byte_end":229963,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/ [async-std]: https://crates.io/crates/async-std","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":229964,"byte_end":230015,"line_start":7,"line_end":7,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1367},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230392,"byte_end":230399,"line_start":17,"line_end":17,"column_start":11,"column_end":18},"name":"Runtime","qualname":"::runtime::Runtime","value":"Runtime: Clone + Send + Sync + 'static","parent":null,"children":[{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372}],"decl_id":null,"docs":" A runtime is an abstraction of an async runtime like [Tokio] or [async-std]. It allows\n OpenTelemetry to work with any current and hopefully future runtime implementation.","sig":null,"attributes":[{"value":"/ A runtime is an abstraction of an async runtime like [Tokio] or [async-std]. It allows","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230103,"byte_end":230193,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ OpenTelemetry to work with any current and hopefully future runtime implementation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230194,"byte_end":230281,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230282,"byte_end":230285,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [Tokio]: https://crates.io/crates/tokio","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230286,"byte_end":230329,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/ [async-std]: https://crates.io/crates/async-std","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230330,"byte_end":230381,"line_start":16,"line_end":16,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":1368},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230563,"byte_end":230571,"line_start":20,"line_end":20,"column_start":10,"column_end":18},"name":"Interval","qualname":"::runtime::Runtime::Interval","value":"type Interval: Stream + Send;","parent":{"krate":0,"index":1367},"children":[],"decl_id":null,"docs":" A future stream, which returns items in a previously specified interval. The item type is\n not important.\n","sig":null,"attributes":[{"value":"/ A future stream, which returns items in a previously specified interval. The item type is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230437,"byte_end":230530,"line_start":18,"line_end":18,"column_start":5,"column_end":98}},{"value":"/ not important.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230535,"byte_end":230553,"line_start":19,"line_end":19,"column_start":5,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1369},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230718,"byte_end":230723,"line_start":24,"line_end":24,"column_start":10,"column_end":15},"name":"Delay","qualname":"::runtime::Runtime::Delay","value":"type Delay: Future + Send;","parent":{"krate":0,"index":1367},"children":[],"decl_id":null,"docs":" A future, which resolves after a previously specified amount of time. The output type is\n not important.\n","sig":null,"attributes":[{"value":"/ A future, which resolves after a previously specified amount of time. The output type is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230593,"byte_end":230685,"line_start":22,"line_end":22,"column_start":5,"column_end":97}},{"value":"/ not important.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230690,"byte_end":230708,"line_start":23,"line_end":23,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230864,"byte_end":230872,"line_start":28,"line_end":28,"column_start":8,"column_end":16},"name":"interval","qualname":"::runtime::Runtime::interval","value":"pub fn interval(&Self, Duration) -> Self::Interval","parent":{"krate":0,"index":1367},"children":[],"decl_id":null,"docs":" Create a [Stream][futures::Stream], which returns a new item every\n [Duration][std::time::Duration].\n","sig":null,"attributes":[{"value":"/ Create a [Stream][futures::Stream], which returns a new item every","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230745,"byte_end":230815,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/ [Duration][std::time::Duration].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230820,"byte_end":230856,"line_start":27,"line_end":27,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231480,"byte_end":231485,"line_start":39,"line_end":39,"column_start":8,"column_end":13},"name":"spawn","qualname":"::runtime::Runtime::spawn","value":"pub fn spawn(&Self, BoxFuture)","parent":{"krate":0,"index":1367},"children":[],"decl_id":null,"docs":" Spawn a new task or thread, which executes the given future.","sig":null,"attributes":[{"value":"/ Spawn a new task or thread, which executes the given future.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230924,"byte_end":230988,"line_start":30,"line_end":30,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230993,"byte_end":230996,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231001,"byte_end":231011,"line_start":32,"line_end":32,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231016,"byte_end":231019,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ This is mainly used to run batch span processing in the background. Note, that the function","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231024,"byte_end":231119,"line_start":34,"line_end":34,"column_start":5,"column_end":100}},{"value":"/ does not return a handle. OpenTelemetry will use a different way to wait for the future to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231124,"byte_end":231218,"line_start":35,"line_end":35,"column_start":5,"column_end":99}},{"value":"/ finish when TracerProvider gets shutdown. At the moment this happens by blocking the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231223,"byte_end":231311,"line_start":36,"line_end":36,"column_start":5,"column_end":93}},{"value":"/ current thread. This means runtime implementations need to make sure they can still execute","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231316,"byte_end":231411,"line_start":37,"line_end":37,"column_start":5,"column_end":100}},{"value":"/ the given future even if the main thread is blocked.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231416,"byte_end":231472,"line_start":38,"line_end":38,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231631,"byte_end":231636,"line_start":42,"line_end":42,"column_start":8,"column_end":13},"name":"delay","qualname":"::runtime::Runtime::delay","value":"pub fn delay(&Self, Duration) -> Self::Delay","parent":{"krate":0,"index":1367},"children":[],"decl_id":null,"docs":" Return a new future, which resolves after the specified [Duration][std::time::Duration].\n","sig":null,"attributes":[{"value":"/ Return a new future, which resolves after the specified [Duration][std::time::Duration].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":231531,"byte_end":231623,"line_start":41,"line_end":41,"column_start":5,"column_end":97}}]},{"kind":"Mod","id":{"krate":0,"index":1373},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/util.rs","parent":null,"children":[],"decl_id":null,"docs":" Internal utilities\n","sig":null,"attributes":[{"value":"/ Internal utilities","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/util.rs","byte_start":234697,"byte_end":234719,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":1374},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"propagation","qualname":"::propagation","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","parent":null,"children":[{"krate":0,"index":1375},{"krate":0,"index":1378},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1418},{"krate":0,"index":1421}],"decl_id":null,"docs":" # OpenTelemetry Propagator interface","sig":null,"attributes":[{"value":"/ # OpenTelemetry Propagator interface","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235065,"byte_end":235105,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235106,"byte_end":235109,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Propagators API consists of two main formats:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235110,"byte_end":235159,"line_start":3,"line_end":3,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235160,"byte_end":235163,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ - `BinaryFormat` is used to serialize and deserialize a value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235164,"byte_end":235229,"line_start":5,"line_end":5,"column_start":1,"column_end":66}},{"value":"/ into a binary representation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235230,"byte_end":235263,"line_start":6,"line_end":6,"column_start":1,"column_end":34}},{"value":"/ - `TextMapFormat` is used to inject and extract a value as","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235264,"byte_end":235326,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/ text into injectors and extractors that travel in-band across process boundaries.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235327,"byte_end":235412,"line_start":8,"line_end":8,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235413,"byte_end":235416,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Deserializing must set `is_remote` to true on the returned","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235417,"byte_end":235479,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"/ `SpanContext`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235480,"byte_end":235498,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235499,"byte_end":235502,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Binary Format","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235503,"byte_end":235523,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235524,"byte_end":235527,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ `BinaryFormat` is a formatter to serialize and deserialize a value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235528,"byte_end":235598,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ into a binary format.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235599,"byte_end":235624,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235625,"byte_end":235628,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `BinaryFormat` MUST expose the APIs that serializes values into bytes,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235629,"byte_end":235703,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ and deserializes values from bytes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235704,"byte_end":235743,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235744,"byte_end":235747,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ### ToBytes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235748,"byte_end":235763,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235764,"byte_end":235767,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Serializes the given value into the on-the-wire representation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235768,"byte_end":235835,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235836,"byte_end":235839,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235840,"byte_end":235863,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235864,"byte_end":235867,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ - the value to serialize, can be `SpanContext` or `DistributedContext`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235868,"byte_end":235943,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235944,"byte_end":235947,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Returns the on-the-wire byte representation of the value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":235948,"byte_end":236009,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236010,"byte_end":236013,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ### FromBytes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236014,"byte_end":236031,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236032,"byte_end":236035,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Creates a value from the given on-the-wire encoded representation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236036,"byte_end":236106,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236107,"byte_end":236110,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the value could not be parsed, the underlying implementation","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236111,"byte_end":236178,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ SHOULD decide to return ether an empty value, an invalid value, or","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236179,"byte_end":236249,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/ a valid value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236250,"byte_end":236268,"line_start":37,"line_end":37,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236269,"byte_end":236272,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236273,"byte_end":236296,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236297,"byte_end":236300,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - on-the-wire byte representation of the value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236301,"byte_end":236352,"line_start":41,"line_end":41,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236353,"byte_end":236356,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Returns a value deserialized from bytes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236357,"byte_end":236401,"line_start":43,"line_end":43,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236402,"byte_end":236405,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ## TextMap Format","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236406,"byte_end":236427,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236428,"byte_end":236431,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ `TextMapFormat` is a formatter that injects and extracts a value","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236432,"byte_end":236500,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ as text into injectors and extractors that travel in-band across process boundaries.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236501,"byte_end":236589,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236590,"byte_end":236593,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Encoding is expected to conform to the HTTP Header Field semantics.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236594,"byte_end":236665,"line_start":50,"line_end":50,"column_start":1,"column_end":72}},{"value":"/ Values are often encoded as RPC/HTTP request headers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236666,"byte_end":236723,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236724,"byte_end":236727,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The carrier of propagated data on both the client (injector) and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236728,"byte_end":236796,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ server (extractor) side is usually a http request. Propagation is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236797,"byte_end":236866,"line_start":54,"line_end":54,"column_start":1,"column_end":70}},{"value":"/ usually implemented via library-specific request interceptors, where","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236867,"byte_end":236939,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ the client-side injects values and the server-side extracts them.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":236940,"byte_end":237009,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237010,"byte_end":237013,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ `TextMapFormat` MUST expose the APIs that injects values into injectors,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237014,"byte_end":237090,"line_start":58,"line_end":58,"column_start":1,"column_end":77}},{"value":"/ and extracts values from extractors.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237091,"byte_end":237131,"line_start":59,"line_end":59,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237132,"byte_end":237135,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ### Fields","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237136,"byte_end":237150,"line_start":61,"line_end":61,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237151,"byte_end":237154,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ The propagation fields defined. If your injector is reused, you should","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237155,"byte_end":237229,"line_start":63,"line_end":63,"column_start":1,"column_end":75}},{"value":"/ delete the fields here before calling `inject`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237230,"byte_end":237281,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237282,"byte_end":237285,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ For example, if the injector is a single-use or immutable request object,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237286,"byte_end":237363,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/ you don't need to clear fields as they couldn't have been set before.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237364,"byte_end":237437,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ If it is a mutable, retryable object, successive calls should clear","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237438,"byte_end":237509,"line_start":68,"line_end":68,"column_start":1,"column_end":72}},{"value":"/ these fields first.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237510,"byte_end":237533,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237534,"byte_end":237537,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The use cases of this are:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237538,"byte_end":237568,"line_start":71,"line_end":71,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237569,"byte_end":237572,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - allow pre-allocation of fields, especially in systems like gRPC","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237573,"byte_end":237642,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"/ Metadata","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237643,"byte_end":237655,"line_start":74,"line_end":74,"column_start":1,"column_end":13}},{"value":"/ - allow a single-pass over an iterator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237656,"byte_end":237698,"line_start":75,"line_end":75,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237699,"byte_end":237702,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Returns list of fields that will be used by this formatter.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237703,"byte_end":237766,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237767,"byte_end":237770,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ### Inject","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237771,"byte_end":237785,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237786,"byte_end":237789,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ Injects the value downstream. For example, as http headers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237790,"byte_end":237853,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237854,"byte_end":237857,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237858,"byte_end":237881,"line_start":83,"line_end":83,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237882,"byte_end":237885,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ - the `SpanContext` to be injected.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237886,"byte_end":237925,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ - the injector that holds propagation fields. For example, an outgoing","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":237926,"byte_end":238000,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ message or http request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238001,"byte_end":238029,"line_start":87,"line_end":87,"column_start":1,"column_end":29}},{"value":"/ - the `Setter` invoked for each propagation key to add or remove.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238030,"byte_end":238099,"line_start":88,"line_end":88,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238100,"byte_end":238103,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ #### Setter argument","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238104,"byte_end":238128,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238129,"byte_end":238132,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Setter is an argument in `Inject` that puts value into given field.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238133,"byte_end":238204,"line_start":92,"line_end":92,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238205,"byte_end":238208,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ `Setter` allows a `TextMapFormat` to set propagated fields into a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238209,"byte_end":238278,"line_start":94,"line_end":94,"column_start":1,"column_end":70}},{"value":"/ injector.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238279,"byte_end":238292,"line_start":95,"line_end":95,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238293,"byte_end":238296,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ `Setter` MUST be stateless and allowed to be saved as a constant to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238297,"byte_end":238368,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/ avoid runtime allocations. One of the ways to implement it is `Setter`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238369,"byte_end":238443,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/ class with `Put` method as described below.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238444,"byte_end":238491,"line_start":99,"line_end":99,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238492,"byte_end":238495,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ##### Put","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238496,"byte_end":238509,"line_start":101,"line_end":101,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238510,"byte_end":238513,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Replaces a propagated field with the given value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238514,"byte_end":238567,"line_start":103,"line_end":103,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238568,"byte_end":238571,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238572,"byte_end":238595,"line_start":105,"line_end":105,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238596,"byte_end":238599,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ - the injector holds propagation fields. For example, an outgoing message","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238600,"byte_end":238677,"line_start":107,"line_end":107,"column_start":1,"column_end":78}},{"value":"/ or http request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238678,"byte_end":238698,"line_start":108,"line_end":108,"column_start":1,"column_end":21}},{"value":"/ - the key of the field.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238699,"byte_end":238726,"line_start":109,"line_end":109,"column_start":1,"column_end":28}},{"value":"/ - the value of the field.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238727,"byte_end":238756,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238757,"byte_end":238760,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ The implementation SHOULD preserve casing (e.g. it should not transform","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238761,"byte_end":238836,"line_start":112,"line_end":112,"column_start":1,"column_end":76}},{"value":"/ `Content-Type` to `content-type`) if the used protocol is case insensitive,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238837,"byte_end":238916,"line_start":113,"line_end":113,"column_start":1,"column_end":80}},{"value":"/ otherwise it MUST preserve casing.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238917,"byte_end":238955,"line_start":114,"line_end":114,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238956,"byte_end":238959,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ ### Extract","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238960,"byte_end":238975,"line_start":116,"line_end":116,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238976,"byte_end":238979,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Extracts the value from upstream. For example, as http headers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":238980,"byte_end":239047,"line_start":118,"line_end":118,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239048,"byte_end":239051,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ If the value could not be parsed, the underlying implementation will","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239052,"byte_end":239124,"line_start":120,"line_end":120,"column_start":1,"column_end":73}},{"value":"/ decide to return an object representing either an empty value, an invalid","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239125,"byte_end":239202,"line_start":121,"line_end":121,"column_start":1,"column_end":78}},{"value":"/ value, or a valid value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239203,"byte_end":239231,"line_start":122,"line_end":122,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239232,"byte_end":239235,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239236,"byte_end":239259,"line_start":124,"line_end":124,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239260,"byte_end":239263,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ - the extractor holds propagation fields. For example, an outgoing message","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239264,"byte_end":239342,"line_start":126,"line_end":126,"column_start":1,"column_end":79}},{"value":"/ or http request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239343,"byte_end":239363,"line_start":127,"line_end":127,"column_start":1,"column_end":21}},{"value":"/ - the instance of `Getter` invoked for each propagation key to get.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239364,"byte_end":239435,"line_start":128,"line_end":128,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239436,"byte_end":239439,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Returns the non-null extracted value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239440,"byte_end":239481,"line_start":130,"line_end":130,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239482,"byte_end":239485,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ #### Getter argument","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239486,"byte_end":239510,"line_start":132,"line_end":132,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239511,"byte_end":239514,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Getter is an argument in `Extract` that get value from given field","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239515,"byte_end":239585,"line_start":134,"line_end":134,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239586,"byte_end":239589,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ `Getter` allows a `TextMapFormat` to read propagated fields from a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239590,"byte_end":239660,"line_start":136,"line_end":136,"column_start":1,"column_end":71}},{"value":"/ extractor.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239661,"byte_end":239675,"line_start":137,"line_end":137,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239676,"byte_end":239679,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ `Getter` MUST be stateless and allowed to be saved as a constant to avoid","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239680,"byte_end":239757,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ runtime allocations. One of the ways to implement it is `Getter` class","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239758,"byte_end":239832,"line_start":140,"line_end":140,"column_start":1,"column_end":75}},{"value":"/ with `Get` method as described below.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239833,"byte_end":239874,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239875,"byte_end":239878,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ ##### Get","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239879,"byte_end":239892,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239893,"byte_end":239896,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ The Get function MUST return the first value of the given propagation","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239897,"byte_end":239970,"line_start":145,"line_end":145,"column_start":1,"column_end":74}},{"value":"/ key or return `None` if the key doesn't exist.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":239971,"byte_end":240021,"line_start":146,"line_end":146,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240022,"byte_end":240025,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240026,"byte_end":240049,"line_start":148,"line_end":148,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240050,"byte_end":240053,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ - the extractor of propagation fields, such as an HTTP request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240054,"byte_end":240121,"line_start":150,"line_end":150,"column_start":1,"column_end":68}},{"value":"/ - the key of the field.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240122,"byte_end":240149,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240150,"byte_end":240153,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ The `get` function is responsible for handling case sensitivity. If","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240154,"byte_end":240225,"line_start":153,"line_end":153,"column_start":1,"column_end":72}},{"value":"/ the getter is intended to work with an HTTP request object, the getter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240226,"byte_end":240300,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/ MUST be case insensitive. To improve compatibility with other text-based","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240301,"byte_end":240377,"line_start":155,"line_end":155,"column_start":1,"column_end":77}},{"value":"/ protocols, text format implementations MUST ensure to always use the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240378,"byte_end":240450,"line_start":156,"line_end":156,"column_start":1,"column_end":73}},{"value":"/ canonical casing for their attributes. NOTE: Canonical casing for HTTP","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240451,"byte_end":240525,"line_start":157,"line_end":157,"column_start":1,"column_end":75}},{"value":"/ headers is usually title case (e.g. `Content-Type` instead of `content-type`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240526,"byte_end":240608,"line_start":158,"line_end":158,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240609,"byte_end":240612,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ ##### Keys","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240613,"byte_end":240627,"line_start":160,"line_end":160,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240628,"byte_end":240631,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The Keys function returns a vector of the propagation keys.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240632,"byte_end":240695,"line_start":162,"line_end":162,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240696,"byte_end":240699,"line_start":163,"line_end":163,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1378},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"text_map_propagator","qualname":"::propagation::text_map_propagator","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","parent":null,"children":[{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1384},{"krate":0,"index":1387},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1396},{"krate":0,"index":2552},{"krate":0,"index":2556},{"krate":0,"index":1402},{"krate":0,"index":1405}],"decl_id":null,"docs":" # Text Propagator","sig":null,"attributes":[{"value":"/ # Text Propagator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":242705,"byte_end":242726,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":242727,"byte_end":242730,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ `TextMapPropagator` is a formatter to serialize and deserialize a value into a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":242731,"byte_end":242813,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/ text format.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":242814,"byte_end":242830,"line_start":4,"line_end":4,"column_start":1,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":1396},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243079,"byte_end":243096,"line_start":14,"line_end":14,"column_start":11,"column_end":28},"name":"TextMapPropagator","qualname":"::propagation::text_map_propagator::TextMapPropagator","value":"TextMapPropagator: Debug","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401}],"decl_id":null,"docs":" Methods to inject and extract a value as text into injectors and extractors that travel\n in-band across process boundaries.\n","sig":null,"attributes":[{"value":"/ Methods to inject and extract a value as text into injectors and extractors that travel","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":242938,"byte_end":243029,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ in-band across process boundaries.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243030,"byte_end":243068,"line_start":13,"line_end":13,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243319,"byte_end":243325,"line_start":20,"line_end":20,"column_start":8,"column_end":14},"name":"inject","qualname":"::propagation::text_map_propagator::TextMapPropagator::inject","value":"pub fn inject(&Self, &mut dyn Injector)","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Properly encodes the values of the current [`Context`] and injects them into\n the [`Injector`].","sig":null,"attributes":[{"value":"/ Properly encodes the values of the current [`Context`] and injects them into","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243110,"byte_end":243190,"line_start":15,"line_end":15,"column_start":5,"column_end":85}},{"value":"/ the [`Injector`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243195,"byte_end":243216,"line_start":16,"line_end":16,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243221,"byte_end":243224,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243229,"byte_end":243260,"line_start":18,"line_end":18,"column_start":5,"column_end":36}},{"value":"/ [`Injector`]: crate::propagation::Injector","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243265,"byte_end":243311,"line_start":19,"line_end":19,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243635,"byte_end":243649,"line_start":29,"line_end":29,"column_start":8,"column_end":22},"name":"inject_context","qualname":"::propagation::text_map_propagator::TextMapPropagator::inject_context","value":"pub fn inject_context(&Self, &Context, &mut dyn Injector)","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Properly encodes the values of the [`Context`] and injects them into the\n [`Injector`].","sig":null,"attributes":[{"value":"/ Properly encodes the values of the [`Context`] and injects them into the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243434,"byte_end":243510,"line_start":24,"line_end":24,"column_start":5,"column_end":81}},{"value":"/ [`Injector`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243515,"byte_end":243532,"line_start":25,"line_end":25,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243537,"byte_end":243540,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243545,"byte_end":243576,"line_start":27,"line_end":27,"column_start":5,"column_end":36}},{"value":"/ [`Injector`]: crate::propagation::Injector","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243581,"byte_end":243627,"line_start":28,"line_end":28,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244006,"byte_end":244013,"line_start":37,"line_end":37,"column_start":8,"column_end":15},"name":"extract","qualname":"::propagation::text_map_propagator::TextMapPropagator::extract","value":"pub fn extract(&Self, &dyn Extractor) -> Context","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Retrieves encoded data using the provided [`Extractor`]. If no data for this\n format was retrieved OR if the retrieved data is invalid, then the current\n [`Context`] is returned.","sig":null,"attributes":[{"value":"/ Retrieves encoded data using the provided [`Extractor`]. If no data for this","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243706,"byte_end":243786,"line_start":31,"line_end":31,"column_start":5,"column_end":85}},{"value":"/ format was retrieved OR if the retrieved data is invalid, then the current","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243791,"byte_end":243869,"line_start":32,"line_end":32,"column_start":5,"column_end":83}},{"value":"/ [`Context`] is returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243874,"byte_end":243902,"line_start":33,"line_end":33,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243907,"byte_end":243910,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243915,"byte_end":243946,"line_start":35,"line_end":35,"column_start":5,"column_end":36}},{"value":"/ [`Injector`]: crate::propagation::Extractor","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243951,"byte_end":243998,"line_start":36,"line_end":36,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244436,"byte_end":244456,"line_start":47,"line_end":47,"column_start":8,"column_end":28},"name":"extract_with_context","qualname":"::propagation::text_map_propagator::TextMapPropagator::extract_with_context","value":"pub fn extract_with_context(&Self, &Context, &dyn Extractor) -> Context","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Retrieves encoded data using the provided [`Extractor`]. If no data for this\n format was retrieved OR if the retrieved data is invalid, then the given\n [`Context`] is returned.","sig":null,"attributes":[{"value":"/ Retrieves encoded data using the provided [`Extractor`]. If no data for this","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244138,"byte_end":244218,"line_start":41,"line_end":41,"column_start":5,"column_end":85}},{"value":"/ format was retrieved OR if the retrieved data is invalid, then the given","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244223,"byte_end":244299,"line_start":42,"line_end":42,"column_start":5,"column_end":81}},{"value":"/ [`Context`] is returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244304,"byte_end":244332,"line_start":43,"line_end":43,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244337,"byte_end":244340,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244345,"byte_end":244376,"line_start":45,"line_end":45,"column_start":5,"column_end":36}},{"value":"/ [`Injector`]: crate::propagation::Extractor","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244381,"byte_end":244428,"line_start":46,"line_end":46,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244594,"byte_end":244600,"line_start":51,"line_end":51,"column_start":8,"column_end":14},"name":"fields","qualname":"::propagation::text_map_propagator::TextMapPropagator::fields","value":"pub fn fields(&Self) -> FieldIter","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Returns iter of fields used by [`TextMapPropagator`]","sig":null,"attributes":[{"value":"/ Returns iter of fields used by [`TextMapPropagator`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244522,"byte_end":244578,"line_start":49,"line_end":49,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244583,"byte_end":244586,"line_start":50,"line_end":50,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2552},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244716,"byte_end":244725,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"FieldIter","qualname":"::propagation::text_map_propagator::FieldIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over fields of a [`TextMapPropagator`]","sig":null,"attributes":[{"value":"/ An iterator over fields of a [`TextMapPropagator`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244629,"byte_end":244683,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244684,"byte_end":244687,"line_start":55,"line_end":55,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244860,"byte_end":244863,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<FieldIter>::new","value":"pub fn new(&'a [String]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FieldIter` from a slice of propagator fields\n","sig":null,"attributes":[{"value":"/ Create a new `FieldIter` from a slice of propagator fields","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244786,"byte_end":244848,"line_start":60,"line_end":60,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":1413},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240915,"byte_end":240923,"line_start":171,"line_end":171,"column_start":11,"column_end":19},"name":"Injector","qualname":"::propagation::Injector","value":"Injector","parent":null,"children":[{"krate":0,"index":1414}],"decl_id":null,"docs":" Injector provides an interface for adding fields from an underlying struct like `HashMap`\n","sig":null,"attributes":[{"value":"/ Injector provides an interface for adding fields from an underlying struct like `HashMap`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240811,"byte_end":240904,"line_start":170,"line_end":170,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240985,"byte_end":240988,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"set","qualname":"::propagation::Injector::set","value":"pub fn set(&mut Self, &str, String)","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Add a key and value to the underlying data.\n","sig":null,"attributes":[{"value":"/ Add a key and value to the underlying data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240930,"byte_end":240977,"line_start":172,"line_end":172,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1415},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241137,"byte_end":241146,"line_start":177,"line_end":177,"column_start":11,"column_end":20},"name":"Extractor","qualname":"::propagation::Extractor","value":"Extractor","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417}],"decl_id":null,"docs":" Extractor provides an interface for removing fields from an underlying struct like `HashMap`\n","sig":null,"attributes":[{"value":"/ Extractor provides an interface for removing fields from an underlying struct like `HashMap`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241030,"byte_end":241126,"line_start":176,"line_end":176,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241213,"byte_end":241216,"line_start":179,"line_end":179,"column_start":8,"column_end":11},"name":"get","qualname":"::propagation::Extractor::get","value":"pub fn get(&Self, &str) -> Option<&str>","parent":{"krate":0,"index":1415},"children":[],"decl_id":null,"docs":" Get a value from a key from the underlying data.\n","sig":null,"attributes":[{"value":"/ Get a value from a key from the underlying data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241153,"byte_end":241205,"line_start":178,"line_end":178,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241315,"byte_end":241319,"line_start":182,"line_end":182,"column_start":8,"column_end":12},"name":"keys","qualname":"::propagation::Extractor::keys","value":"pub fn keys(&Self) -> Vec<&str>","parent":{"krate":0,"index":1415},"children":[],"decl_id":null,"docs":" Collect all the keys from the underlying data.\n","sig":null,"attributes":[{"value":"/ Collect all the keys from the underlying data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241257,"byte_end":241307,"line_start":181,"line_end":181,"column_start":5,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":1427},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"trace","qualname":"::trace","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","parent":null,"children":[{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1435},{"krate":0,"index":1438},{"krate":0,"index":1476},{"krate":0,"index":1491},{"krate":0,"index":1530},{"krate":0,"index":1544},{"krate":0,"index":1556},{"krate":0,"index":1619},{"krate":0,"index":1629},{"krate":0,"index":1662},{"krate":0,"index":1727},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1809},{"krate":0,"index":1812},{"krate":0,"index":1815},{"krate":0,"index":1818},{"krate":0,"index":1821},{"krate":0,"index":1824},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1847},{"krate":0,"index":1850},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1872},{"krate":0,"index":1875},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2803},{"krate":0,"index":2812},{"krate":0,"index":2814},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1899},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":2837},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2835}],"decl_id":null,"docs":" # OpenTelemetry Tracing API.","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8754,"byte_end":8779,"line_start":206,"line_end":206,"column_start":1,"column_end":26}},{"value":"/ # OpenTelemetry Tracing API.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245107,"byte_end":245139,"line_start":1,"line_end":1,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245140,"byte_end":245143,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The tracing API consists of a few main traits:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245144,"byte_end":245194,"line_start":3,"line_end":3,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245195,"byte_end":245198,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * The `Tracer` trait which describes all tracing operations.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245199,"byte_end":245263,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ * The `Span` trait with is a mutable object storing information about the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245264,"byte_end":245341,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ current operation execution.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245342,"byte_end":245374,"line_start":7,"line_end":7,"column_start":1,"column_end":33}},{"value":"/ * The `SpanContext` struct is the portion of a `Span` which must be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245375,"byte_end":245446,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/ serialized and propagated along side of a distributed context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245447,"byte_end":245512,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245513,"byte_end":245516,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245517,"byte_end":245530,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245531,"byte_end":245534,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The OpenTelemetry library achieves in-process context propagation of `Span`s by","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245535,"byte_end":245618,"line_start":13,"line_end":13,"column_start":1,"column_end":84}},{"value":"/ way of the `Tracer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245619,"byte_end":245643,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245644,"byte_end":245647,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The `Tracer` is responsible for tracking the currently active `Span`, and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245648,"byte_end":245725,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ exposes methods for creating and activating new `Span`s. The `Tracer` is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245726,"byte_end":245802,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ configured with `Propagator`s which support transferring span context across","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245803,"byte_end":245883,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ process boundaries.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245884,"byte_end":245907,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245908,"byte_end":245911,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `Tracer`s are generally expected to be used as singletons. Implementations","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245912,"byte_end":245990,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ SHOULD provide a single global default `Tracer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":245991,"byte_end":246043,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246044,"byte_end":246047,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Some applications may require multiple `Tracer` instances, e.g. to create","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246048,"byte_end":246125,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ `Span`s on behalf of other applications. Implementations MAY provide a global","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246126,"byte_end":246207,"line_start":25,"line_end":25,"column_start":1,"column_end":82}},{"value":"/ registry of `Tracer`s for such applications.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246208,"byte_end":246256,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246257,"byte_end":246260,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ## Span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246261,"byte_end":246272,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246273,"byte_end":246276,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ A `Span` represents a single operation within a trace. Spans can be nested to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246277,"byte_end":246358,"line_start":30,"line_end":30,"column_start":1,"column_end":82}},{"value":"/ form a trace tree. Each trace contains a root span, which typically describes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246359,"byte_end":246440,"line_start":31,"line_end":31,"column_start":1,"column_end":82}},{"value":"/ the end-to-end latency and, optionally, one or more sub-spans for its","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246441,"byte_end":246514,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ sub-operations.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246515,"byte_end":246534,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246535,"byte_end":246538,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ `Span`s encapsulate:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246539,"byte_end":246563,"line_start":35,"line_end":35,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246564,"byte_end":246567,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ - The span name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246568,"byte_end":246587,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/ - An immutable `SpanContext` that uniquely identifies the `Span`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246588,"byte_end":246656,"line_start":38,"line_end":38,"column_start":1,"column_end":69}},{"value":"/ - A parent span in the form of a `SpanContext`, or None","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246657,"byte_end":246716,"line_start":39,"line_end":39,"column_start":1,"column_end":60}},{"value":"/ - A start timestamp","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246717,"byte_end":246740,"line_start":40,"line_end":40,"column_start":1,"column_end":24}},{"value":"/ - An end timestamp","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246741,"byte_end":246763,"line_start":41,"line_end":41,"column_start":1,"column_end":23}},{"value":"/ - An ordered mapping of `Attribute`s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246764,"byte_end":246804,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ - A list of `Link`s to other `Span`s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246805,"byte_end":246845,"line_start":43,"line_end":43,"column_start":1,"column_end":41}},{"value":"/ - A list of timestamped `Event`s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246846,"byte_end":246882,"line_start":44,"line_end":44,"column_start":1,"column_end":37}},{"value":"/ - A `Status`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246883,"byte_end":246900,"line_start":45,"line_end":45,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246901,"byte_end":246904,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The _span name_ is a human-readable string which concisely identifies the work","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246905,"byte_end":246987,"line_start":47,"line_end":47,"column_start":1,"column_end":83}},{"value":"/ represented by the `Span`, for example, an RPC method name, a function name,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":246988,"byte_end":247068,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ or the name of a subtask or stage within a larger computation. The span name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247069,"byte_end":247149,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ should be the most general string that identifies a (statistically) interesting","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247150,"byte_end":247233,"line_start":50,"line_end":50,"column_start":1,"column_end":84}},{"value":"/ _class of Spans_, rather than individual Span instances. That is, \"get_user\" is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247234,"byte_end":247317,"line_start":51,"line_end":51,"column_start":1,"column_end":84}},{"value":"/ a reasonable name, while \"get_user/314159\", where \"314159\" is a user ID, is not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247318,"byte_end":247401,"line_start":52,"line_end":52,"column_start":1,"column_end":84}},{"value":"/ a good name due to its high cardinality.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247402,"byte_end":247446,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247447,"byte_end":247450,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ For example, here are potential span names for an endpoint that gets a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247451,"byte_end":247525,"line_start":55,"line_end":55,"column_start":1,"column_end":75}},{"value":"/ hypothetical account information:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247526,"byte_end":247563,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247564,"byte_end":247567,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ | Span Name                 | Guidance     |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247568,"byte_end":247616,"line_start":58,"line_end":58,"column_start":1,"column_end":49}},{"value":"/ | ------------------------- | ------------ |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247617,"byte_end":247665,"line_start":59,"line_end":59,"column_start":1,"column_end":49}},{"value":"/ | `get`                     | Too general  |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247666,"byte_end":247714,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/ | `get_account/42`          | Too specific |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247715,"byte_end":247763,"line_start":61,"line_end":61,"column_start":1,"column_end":49}},{"value":"/ | `get_account`             | Good, and account_id=42 would make a nice Span attribute |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247764,"byte_end":247856,"line_start":62,"line_end":62,"column_start":1,"column_end":93}},{"value":"/ | `get_account/{accountId}` | Also good (using the \"HTTP route\") |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247857,"byte_end":247927,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247928,"byte_end":247931,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ The `Span`'s start and end timestamps reflect the elapsed real time of the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":247932,"byte_end":248010,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/ operation. A `Span`'s start time SHOULD be set to the current time on span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248011,"byte_end":248089,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ creation. After the `Span` is created, it SHOULD be possible to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248090,"byte_end":248157,"line_start":67,"line_end":67,"column_start":1,"column_end":68}},{"value":"/ change the its name, set its `Attribute`s, and add `Link`s and `Event`s. These","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248158,"byte_end":248240,"line_start":68,"line_end":68,"column_start":1,"column_end":83}},{"value":"/ MUST NOT be changed after the `Span`'s end time has been set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248241,"byte_end":248306,"line_start":69,"line_end":69,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248307,"byte_end":248310,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ `Span`s are not meant to be used to propagate information within a process. To","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248311,"byte_end":248393,"line_start":71,"line_end":71,"column_start":1,"column_end":83}},{"value":"/ prevent misuse, implementations SHOULD NOT provide access to a `Span`'s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248394,"byte_end":248469,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/ attributes besides its `SpanContext`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248470,"byte_end":248511,"line_start":73,"line_end":73,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248512,"byte_end":248515,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Vendors may implement the `Span` interface to effect vendor-specific logic.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248516,"byte_end":248595,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ However, alternative implementations MUST NOT allow callers to create `Span`s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248596,"byte_end":248677,"line_start":76,"line_end":76,"column_start":1,"column_end":82}},{"value":"/ directly. All `Span`s MUST be created via a `Tracer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248678,"byte_end":248735,"line_start":77,"line_end":77,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248736,"byte_end":248739,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ## SpanContext","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248740,"byte_end":248758,"line_start":79,"line_end":79,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248759,"byte_end":248762,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ A `SpanContext` represents the portion of a `Span` which must be serialized and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248763,"byte_end":248846,"line_start":81,"line_end":81,"column_start":1,"column_end":84}},{"value":"/ propagated along side of a distributed context. `SpanContext`s are immutable.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248847,"byte_end":248928,"line_start":82,"line_end":82,"column_start":1,"column_end":82}},{"value":"/ `SpanContext`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248929,"byte_end":248947,"line_start":83,"line_end":83,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248948,"byte_end":248951,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The OpenTelemetry `SpanContext` representation conforms to the [w3c TraceContext","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":248952,"byte_end":249036,"line_start":85,"line_end":85,"column_start":1,"column_end":85}},{"value":"/ specification](https://www.w3.org/TR/trace-context/). It contains two","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249037,"byte_end":249110,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ identifiers - a `TraceId` and a `SpanId` - along with a set of common","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249111,"byte_end":249184,"line_start":87,"line_end":87,"column_start":1,"column_end":74}},{"value":"/ `TraceFlags` and system-specific `TraceState` values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249185,"byte_end":249242,"line_start":88,"line_end":88,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249243,"byte_end":249246,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ `TraceId` A valid trace identifier is a non-zero `u128`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249247,"byte_end":249306,"line_start":90,"line_end":90,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249307,"byte_end":249310,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ `SpanId` A valid span identifier is a non-zero `u64` byte.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249311,"byte_end":249373,"line_start":92,"line_end":92,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249374,"byte_end":249377,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ `TraceFlags` contain details about the trace. Unlike Tracestate values,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249378,"byte_end":249453,"line_start":94,"line_end":94,"column_start":1,"column_end":76}},{"value":"/ TraceFlags are present in all traces. Currently, the only `TraceFlags` is a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249454,"byte_end":249533,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/ boolean `sampled`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249534,"byte_end":249555,"line_start":96,"line_end":96,"column_start":1,"column_end":22}},{"value":"/ [flag](https://www.w3.org/TR/trace-context/#trace-flags).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249556,"byte_end":249617,"line_start":97,"line_end":97,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249618,"byte_end":249621,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ `Tracestate` carries system-specific configuration data, represented as a list","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249622,"byte_end":249704,"line_start":99,"line_end":99,"column_start":1,"column_end":83}},{"value":"/ of key-value pairs. TraceState allows multiple tracing systems to participate in","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249705,"byte_end":249789,"line_start":100,"line_end":100,"column_start":1,"column_end":85}},{"value":"/ the same trace.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249790,"byte_end":249809,"line_start":101,"line_end":101,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249810,"byte_end":249813,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ `IsValid` is a boolean flag which returns true if the SpanContext has a non-zero","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249814,"byte_end":249898,"line_start":103,"line_end":103,"column_start":1,"column_end":85}},{"value":"/ TraceID and a non-zero SpanID.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249899,"byte_end":249933,"line_start":104,"line_end":104,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249934,"byte_end":249937,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ `IsRemote` is a boolean flag which returns true if the SpanContext was propagated","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":249938,"byte_end":250023,"line_start":106,"line_end":106,"column_start":1,"column_end":86}},{"value":"/ from a remote parent. When creating children from remote spans, their IsRemote","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250024,"byte_end":250106,"line_start":107,"line_end":107,"column_start":1,"column_end":83}},{"value":"/ flag MUST be set to false.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250107,"byte_end":250137,"line_start":108,"line_end":108,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250138,"byte_end":250141,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ Please review the W3C specification for details on the [Tracestate","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250142,"byte_end":250212,"line_start":110,"line_end":110,"column_start":1,"column_end":71}},{"value":"/ field](https://www.w3.org/TR/trace-context/#tracestate-field).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250213,"byte_end":250279,"line_start":111,"line_end":111,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":250280,"byte_end":250283,"line_start":112,"line_end":112,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1452},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":252994,"byte_end":253009,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"TraceContextExt","qualname":"::trace::context::TraceContextExt","value":"TraceContextExt","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1455},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460}],"decl_id":null,"docs":" Methods for storing and retrieving trace data in a context.\n","sig":null,"attributes":[{"value":"/ Methods for storing and retrieving trace data in a context.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":252920,"byte_end":252983,"line_start":11,"line_end":11,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253143,"byte_end":253160,"line_start":16,"line_end":16,"column_start":8,"column_end":25},"name":"current_with_span","qualname":"::trace::context::TraceContextExt::current_with_span","value":"pub fn current_with_span<T: crate::trace::Span + Send + Sync>(T) -> Self","parent":{"krate":0,"index":1452},"children":[],"decl_id":null,"docs":" Returns a clone of the current context with the included span.","sig":null,"attributes":[{"value":"/ Returns a clone of the current context with the included span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253016,"byte_end":253082,"line_start":13,"line_end":13,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253087,"byte_end":253090,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ This is useful for building tracers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253095,"byte_end":253135,"line_start":15,"line_end":15,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253341,"byte_end":253350,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"with_span","qualname":"::trace::context::TraceContextExt::with_span","value":"pub fn with_span<T: crate::trace::Span + Send + Sync>(&Self, T) -> Self","parent":{"krate":0,"index":1452},"children":[],"decl_id":null,"docs":" Returns a clone of this context with the included span.","sig":null,"attributes":[{"value":"/ Returns a clone of this context with the included span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253221,"byte_end":253280,"line_start":18,"line_end":18,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253285,"byte_end":253288,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ This is useful for building tracers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253293,"byte_end":253333,"line_start":20,"line_end":20,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254186,"byte_end":254190,"line_start":43,"line_end":43,"column_start":8,"column_end":12},"name":"span","qualname":"::trace::context::TraceContextExt::span","value":"pub fn span(&Self) -> &dyn crate::trace::Span","parent":{"krate":0,"index":1452},"children":[],"decl_id":null,"docs":" Returns a reference to this context's span, or the default no-op span if\n none has been set.","sig":null,"attributes":[{"value":"/ Returns a reference to this context's span, or the default no-op span if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253418,"byte_end":253494,"line_start":23,"line_end":23,"column_start":5,"column_end":81}},{"value":"/ none has been set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253499,"byte_end":253521,"line_start":24,"line_end":24,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253526,"byte_end":253529,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253534,"byte_end":253548,"line_start":26,"line_end":26,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253553,"byte_end":253556,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253561,"byte_end":253568,"line_start":28,"line_end":28,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253573,"byte_end":253597,"line_start":29,"line_end":29,"column_start":5,"column_end":29}},{"value":"/     sdk::trace as sdktrace,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253602,"byte_end":253633,"line_start":30,"line_end":30,"column_start":5,"column_end":36}},{"value":"/     trace::{SpanContext, TraceContextExt, Tracer, TracerProvider},","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253638,"byte_end":253708,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/     Context,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253713,"byte_end":253729,"line_start":32,"line_end":32,"column_start":5,"column_end":21}},{"value":"/ };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253734,"byte_end":253740,"line_start":33,"line_end":33,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253745,"byte_end":253748,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ // returns a reference to an empty span by default","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253753,"byte_end":253807,"line_start":35,"line_end":35,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(Context::current().span().span_context(), &SpanContext::empty_context());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253812,"byte_end":253900,"line_start":36,"line_end":36,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253905,"byte_end":253908,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ sdktrace::TracerProvider::default().get_tracer(\"my-component\", None).in_span(\"my-span\", |cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":253913,"byte_end":254011,"line_start":38,"line_end":38,"column_start":5,"column_end":103}},{"value":"/     // Returns a reference to the current span if set","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254016,"byte_end":254073,"line_start":39,"line_end":39,"column_start":5,"column_end":62}},{"value":"/     assert_ne!(cx.span().span_context(), &SpanContext::empty_context());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254078,"byte_end":254154,"line_start":40,"line_end":40,"column_start":5,"column_end":81}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254159,"byte_end":254166,"line_start":41,"line_end":41,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254171,"byte_end":254178,"line_start":42,"line_end":42,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254343,"byte_end":254358,"line_start":48,"line_end":48,"column_start":8,"column_end":23},"name":"has_active_span","qualname":"::trace::context::TraceContextExt::has_active_span","value":"pub fn has_active_span(&Self) -> bool","parent":{"krate":0,"index":1452},"children":[],"decl_id":null,"docs":" Used to see if a span has been marked as active","sig":null,"attributes":[{"value":"/ Used to see if a span has been marked as active","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254231,"byte_end":254282,"line_start":45,"line_end":45,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254287,"byte_end":254290,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ This is useful for building tracers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254295,"byte_end":254335,"line_start":47,"line_end":47,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254511,"byte_end":254535,"line_start":53,"line_end":53,"column_start":8,"column_end":32},"name":"with_remote_span_context","qualname":"::trace::context::TraceContextExt::with_remote_span_context","value":"pub fn with_remote_span_context(&Self, crate::trace::SpanContext) -> Self","parent":{"krate":0,"index":1452},"children":[],"decl_id":null,"docs":" Returns a copy of this context with the span context included.","sig":null,"attributes":[{"value":"/ Returns a copy of this context with the span context included.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254380,"byte_end":254446,"line_start":50,"line_end":50,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254451,"byte_end":254454,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This is useful for building propagators.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254459,"byte_end":254503,"line_start":52,"line_end":52,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254794,"byte_end":254813,"line_start":59,"line_end":59,"column_start":8,"column_end":27},"name":"remote_span_context","qualname":"::trace::context::TraceContextExt::remote_span_context","value":"pub fn remote_span_context(&Self) -> Option<&crate::trace::SpanContext>","parent":{"krate":0,"index":1452},"children":[],"decl_id":null,"docs":" Returns a reference to the remote span context data stored in this context,\n or none if no remote span context has been set.","sig":null,"attributes":[{"value":"/ Returns a reference to the remote span context data stored in this context,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254598,"byte_end":254677,"line_start":55,"line_end":55,"column_start":5,"column_end":84}},{"value":"/ or none if no remote span context has been set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254682,"byte_end":254733,"line_start":56,"line_end":56,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254738,"byte_end":254741,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This is useful for building tracers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254746,"byte_end":254786,"line_start":58,"line_end":58,"column_start":5,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":1471},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257059,"byte_end":257078,"line_start":124,"line_end":124,"column_start":8,"column_end":27},"name":"mark_span_as_active","qualname":"::trace::context::mark_span_as_active","value":"pub fn mark_span_as_active<T: crate::trace::Span + Send + Sync>(T)\n-> ContextGuard","parent":null,"children":[],"decl_id":null,"docs":" Mark a given `Span` as active.","sig":null,"attributes":[{"value":"/ Mark a given `Span` as active.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":255770,"byte_end":255804,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":255805,"byte_end":255808,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The `Tracer` MUST provide a way to update its active `Span`, and MAY provide convenience","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":255809,"byte_end":255901,"line_start":95,"line_end":95,"column_start":1,"column_end":93}},{"value":"/ methods to manage a `Span`'s lifetime and the scope in which a `Span` is active. When an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":255902,"byte_end":255994,"line_start":96,"line_end":96,"column_start":1,"column_end":93}},{"value":"/ active `Span` is made inactive, the previously-active `Span` SHOULD be made active. A `Span`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":255995,"byte_end":256091,"line_start":97,"line_end":97,"column_start":1,"column_end":97}},{"value":"/ maybe finished (i.e. have a non-null end time) but still be active. A `Span` may be active","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256092,"byte_end":256186,"line_start":98,"line_end":98,"column_start":1,"column_end":95}},{"value":"/ on one thread after it has been made inactive on another.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256187,"byte_end":256248,"line_start":99,"line_end":99,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256249,"byte_end":256252,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256253,"byte_end":256267,"line_start":101,"line_end":101,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256268,"byte_end":256271,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256272,"byte_end":256279,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer}, KeyValue};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256280,"byte_end":256345,"line_start":104,"line_end":104,"column_start":1,"column_end":66}},{"value":"/ use opentelemetry::trace::{get_active_span, mark_span_as_active};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256346,"byte_end":256415,"line_start":105,"line_end":105,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256416,"byte_end":256419,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ fn my_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256420,"byte_end":256442,"line_start":107,"line_end":107,"column_start":1,"column_end":23}},{"value":"/     let tracer = global::tracer(\"my-component-a\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256443,"byte_end":256497,"line_start":108,"line_end":108,"column_start":1,"column_end":55}},{"value":"/     // start an active span in one function","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256498,"byte_end":256545,"line_start":109,"line_end":109,"column_start":1,"column_end":48}},{"value":"/     let span = tracer.start(\"span-name\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256546,"byte_end":256591,"line_start":110,"line_end":110,"column_start":1,"column_end":46}},{"value":"/     let _guard = mark_span_as_active(span);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256592,"byte_end":256639,"line_start":111,"line_end":111,"column_start":1,"column_end":48}},{"value":"/     // anything happening in functions we call can still access the active span...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256640,"byte_end":256726,"line_start":112,"line_end":112,"column_start":1,"column_end":87}},{"value":"/     my_other_function();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256727,"byte_end":256755,"line_start":113,"line_end":113,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256756,"byte_end":256761,"line_start":114,"line_end":114,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256762,"byte_end":256765,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ fn my_other_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256766,"byte_end":256794,"line_start":116,"line_end":116,"column_start":1,"column_end":29}},{"value":"/     // call methods on the current span from","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256795,"byte_end":256843,"line_start":117,"line_end":117,"column_start":1,"column_end":49}},{"value":"/     get_active_span(|span| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256844,"byte_end":256876,"line_start":118,"line_end":118,"column_start":1,"column_end":33}},{"value":"/         span.add_event(\"An event!\".to_string(), vec![KeyValue::new(\"happened\", true)]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256877,"byte_end":256968,"line_start":119,"line_end":119,"column_start":1,"column_end":92}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256969,"byte_end":256980,"line_start":120,"line_end":120,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256981,"byte_end":256986,"line_start":121,"line_end":121,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256987,"byte_end":256994,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"must_use = \"Dropping the guard detaches the context.\"","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":256995,"byte_end":257051,"line_start":123,"line_end":123,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1473},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257947,"byte_end":257962,"line_start":152,"line_end":152,"column_start":8,"column_end":23},"name":"get_active_span","qualname":"::trace::context::get_active_span","value":"pub fn get_active_span<F, T>(F) -> T where F: FnOnce(&dyn crate::trace::Span)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Executes a closure with a reference to this thread's current span.","sig":null,"attributes":[{"value":"/ Executes a closure with a reference to this thread's current span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257209,"byte_end":257279,"line_start":129,"line_end":129,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257280,"byte_end":257283,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257284,"byte_end":257298,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257299,"byte_end":257302,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257303,"byte_end":257310,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer}, KeyValue};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257311,"byte_end":257376,"line_start":134,"line_end":134,"column_start":1,"column_end":66}},{"value":"/ use opentelemetry::trace::get_active_span;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257377,"byte_end":257423,"line_start":135,"line_end":135,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257424,"byte_end":257427,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ fn my_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257428,"byte_end":257450,"line_start":137,"line_end":137,"column_start":1,"column_end":23}},{"value":"/     // start an active span in one function","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257451,"byte_end":257498,"line_start":138,"line_end":138,"column_start":1,"column_end":48}},{"value":"/     global::tracer(\"my-component\").in_span(\"span-name\", |_cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257499,"byte_end":257566,"line_start":139,"line_end":139,"column_start":1,"column_end":68}},{"value":"/         // anything happening in functions we call can still access the active span...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257567,"byte_end":257657,"line_start":140,"line_end":140,"column_start":1,"column_end":91}},{"value":"/         my_other_function();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257658,"byte_end":257690,"line_start":141,"line_end":141,"column_start":1,"column_end":33}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257691,"byte_end":257701,"line_start":142,"line_end":142,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257702,"byte_end":257707,"line_start":143,"line_end":143,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257708,"byte_end":257711,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ fn my_other_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257712,"byte_end":257740,"line_start":145,"line_end":145,"column_start":1,"column_end":29}},{"value":"/     // call methods on the current span from","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257741,"byte_end":257789,"line_start":146,"line_end":146,"column_start":1,"column_end":49}},{"value":"/     get_active_span(|span| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257790,"byte_end":257822,"line_start":147,"line_end":147,"column_start":1,"column_end":33}},{"value":"/         span.add_event(\"An event!\".to_string(), vec![KeyValue::new(\"happened\", true)]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257823,"byte_end":257914,"line_start":148,"line_end":148,"column_start":1,"column_end":92}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257915,"byte_end":257925,"line_start":149,"line_end":149,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257926,"byte_end":257931,"line_start":150,"line_end":150,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":257932,"byte_end":257939,"line_start":151,"line_end":151,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2570},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258492,"byte_end":258497,"line_start":13,"line_end":13,"column_start":12,"column_end":17},"name":"Event","qualname":"::trace::event::Event","value":"Event { name, timestamp, attributes }","parent":null,"children":[{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573}],"decl_id":null,"docs":" A `Span` has the ability to add events. Events have a time associated\n with the moment when they are added to the `Span`.\n","sig":null,"attributes":[{"value":"/ A `Span` has the ability to add events. Events have a time associated","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258250,"byte_end":258323,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ with the moment when they are added to the `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258324,"byte_end":258378,"line_start":10,"line_end":10,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2571},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258527,"byte_end":258531,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"name","qualname":"::trace::event::Event::name","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":2570},"children":[],"decl_id":null,"docs":" Event name\n","sig":null,"attributes":[{"value":"/ Event name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258504,"byte_end":258518,"line_start":14,"line_end":14,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2572},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258584,"byte_end":258593,"line_start":17,"line_end":17,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::trace::event::Event::timestamp","value":"std::time::SystemTime","parent":{"krate":0,"index":2570},"children":[],"decl_id":null,"docs":" Event timestamp\n","sig":null,"attributes":[{"value":"/ Event timestamp","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258556,"byte_end":258575,"line_start":16,"line_end":16,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2573},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258640,"byte_end":258650,"line_start":19,"line_end":19,"column_start":9,"column_end":19},"name":"attributes","qualname":"::trace::event::Event::attributes","value":"std::vec::Vec<core::KeyValue>","parent":{"krate":0,"index":2570},"children":[],"decl_id":null,"docs":" Event attributes\n","sig":null,"attributes":[{"value":"/ Event attributes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258611,"byte_end":258631,"line_start":18,"line_end":18,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258721,"byte_end":258724,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<Event>::new","value":"pub fn new<T: Into<Cow>>(T, SystemTime, Vec<KeyValue>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `Event`\n","sig":null,"attributes":[{"value":"/ Create new `Event`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258687,"byte_end":258709,"line_start":23,"line_end":23,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":259021,"byte_end":259030,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"with_name","qualname":"<Event>::with_name","value":"pub fn with_name<T: Into<Cow>>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `Event` with a given name.\n","sig":null,"attributes":[{"value":"/ Create new `Event` with a given name.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258968,"byte_end":259009,"line_start":36,"line_end":36,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2627},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":259836,"byte_end":259847,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"WithContext","qualname":"::trace::futures::WithContext","value":"WithContext {  }","parent":null,"children":[{"krate":0,"index":2630},{"krate":0,"index":2629}],"decl_id":null,"docs":" A future, stream, or sink that has an associated context.\n","sig":null,"attributes":[{"value":"pin(__private())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":259786,"byte_end":259800,"line_start":19,"line_end":19,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":2608},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":259836,"byte_end":259847,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"__WithContext","qualname":"::trace::futures::_::__WithContext","value":"__WithContext {  }","parent":null,"children":[{"krate":0,"index":2611},{"krate":0,"index":2612}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":259786,"byte_end":259800,"line_start":19,"line_end":19,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":1527},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":261842,"byte_end":261851,"line_start":91,"line_end":91,"column_start":11,"column_end":20},"name":"FutureExt","qualname":"::trace::futures::FutureExt","value":"FutureExt: Sized","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1529}],"decl_id":null,"docs":" Extension trait allowing futures, streams, and sinks to be traced with a span.\n","sig":null,"attributes":[{"value":"/ Extension trait allowing futures, streams, and sinks to be traced with a span.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":261749,"byte_end":261831,"line_start":90,"line_end":90,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262157,"byte_end":262169,"line_start":99,"line_end":99,"column_start":8,"column_end":20},"name":"with_context","qualname":"::trace::futures::FutureExt::with_context","value":"pub fn with_context(Self, OpenTelemetryContext) -> WithContext<Self>","parent":{"krate":0,"index":1527},"children":[],"decl_id":null,"docs":" Attaches the provided [`Context`] to this type, returning a `WithContext`\n wrapper.","sig":null,"attributes":[{"value":"/ Attaches the provided [`Context`] to this type, returning a `WithContext`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":261865,"byte_end":261942,"line_start":92,"line_end":92,"column_start":5,"column_end":82}},{"value":"/ wrapper.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":261947,"byte_end":261959,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":261964,"byte_end":261967,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ When the wrapped type is a future, stream, or sink, the attached context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":261972,"byte_end":262048,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ will be set as current while it is being polled.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262053,"byte_end":262105,"line_start":96,"line_end":96,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262110,"byte_end":262113,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262118,"byte_end":262149,"line_start":98,"line_end":98,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262614,"byte_end":262634,"line_start":113,"line_end":113,"column_start":8,"column_end":28},"name":"with_current_context","qualname":"::trace::futures::FutureExt::with_current_context","value":"pub fn with_current_context(Self) -> WithContext<Self>","parent":{"krate":0,"index":1527},"children":[],"decl_id":null,"docs":" Attaches the current [`Context`] to this type, returning a `WithContext`\n wrapper.","sig":null,"attributes":[{"value":"/ Attaches the current [`Context`] to this type, returning a `WithContext`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262319,"byte_end":262395,"line_start":106,"line_end":106,"column_start":5,"column_end":81}},{"value":"/ wrapper.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262400,"byte_end":262412,"line_start":107,"line_end":107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262417,"byte_end":262420,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ When the wrapped type is a future, stream, or sink, the attached context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262425,"byte_end":262501,"line_start":109,"line_end":109,"column_start":5,"column_end":81}},{"value":"/ will be set as the default while it is being polled.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262506,"byte_end":262562,"line_start":110,"line_end":110,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262567,"byte_end":262570,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":262575,"byte_end":262606,"line_start":112,"line_end":112,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":1541},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":262901,"byte_end":262912,"line_start":6,"line_end":6,"column_start":11,"column_end":22},"name":"IdGenerator","qualname":"::trace::id_generator::IdGenerator","value":"IdGenerator: Send + Sync + fmt::Debug","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1543}],"decl_id":null,"docs":" Interface for generating IDs\n","sig":null,"attributes":[{"value":"/ Interface for generating IDs","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":262858,"byte_end":262890,"line_start":5,"line_end":5,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":262981,"byte_end":262993,"line_start":8,"line_end":8,"column_start":8,"column_end":20},"name":"new_trace_id","qualname":"::trace::id_generator::IdGenerator::new_trace_id","value":"pub fn new_trace_id(&Self) -> TraceId","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" Generate a new `TraceId`\n","sig":null,"attributes":[{"value":"/ Generate a new `TraceId`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":262945,"byte_end":262973,"line_start":7,"line_end":7,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":263053,"byte_end":263064,"line_start":11,"line_end":11,"column_start":8,"column_end":19},"name":"new_span_id","qualname":"::trace::id_generator::IdGenerator::new_span_id","value":"pub fn new_span_id(&Self) -> SpanId","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" Generate a new `SpanId`\n","sig":null,"attributes":[{"value":"/ Generate a new `SpanId`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":263018,"byte_end":263045,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2631},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263505,"byte_end":263509,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Link","qualname":"::trace::link::Link","value":"Link {  }","parent":null,"children":[{"krate":0,"index":2632},{"krate":0,"index":2633}],"decl_id":null,"docs":" During the `Span` creation user MUST have the ability to record links to other `Span`s. Linked\n `Span`s can be from the same or a different trace.\n","sig":null,"attributes":[{"value":"/ During the `Span` creation user MUST have the ability to record links to other `Span`s. Linked","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263238,"byte_end":263336,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"/ `Span`s can be from the same or a different trace.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263337,"byte_end":263391,"line_start":7,"line_end":7,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263626,"byte_end":263629,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Link>::new","value":"pub fn new(SpanContext, Vec<KeyValue>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new link\n","sig":null,"attributes":[{"value":"/ Create a new link","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263593,"byte_end":263614,"line_start":16,"line_end":16,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263831,"byte_end":263843,"line_start":25,"line_end":25,"column_start":12,"column_end":24},"name":"span_context","qualname":"<Link>::span_context","value":"pub fn span_context(&Self) -> &SpanContext","parent":null,"children":[],"decl_id":null,"docs":" The span context of the linked span\n","sig":null,"attributes":[{"value":"/ The span context of the linked span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263780,"byte_end":263819,"line_start":24,"line_end":24,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1555},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263950,"byte_end":263960,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"attributes","qualname":"<Link>::attributes","value":"pub fn attributes(&Self) -> &Vec<KeyValue>","parent":null,"children":[],"decl_id":null,"docs":" Attributes of the span link\n","sig":null,"attributes":[{"value":"/ Attributes of the span link","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263907,"byte_end":263938,"line_start":29,"line_end":29,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2642},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":264583,"byte_end":264601,"line_start":17,"line_end":17,"column_start":12,"column_end":30},"name":"NoopTracerProvider","qualname":"::trace::noop::NoopTracerProvider","value":"NoopTracerProvider {  }","parent":null,"children":[{"krate":0,"index":2643}],"decl_id":null,"docs":" A no-op instance of a `TracerProvider`.\n","sig":null,"attributes":[{"value":"/ A no-op instance of a `TracerProvider`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":264495,"byte_end":264538,"line_start":15,"line_end":15,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":264705,"byte_end":264708,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<NoopTracerProvider>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new no-op tracer provider\n","sig":null,"attributes":[{"value":"/ Create a new no-op tracer provider","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":264655,"byte_end":264693,"line_start":22,"line_end":22,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2650},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265102,"byte_end":265110,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"NoopSpan","qualname":"::trace::noop::NoopSpan","value":"NoopSpan {  }","parent":null,"children":[{"krate":0,"index":2651}],"decl_id":null,"docs":" A no-op instance of a `Span`.\n","sig":null,"attributes":[{"value":"/ A no-op instance of a `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265033,"byte_end":265066,"line_start":37,"line_end":37,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265312,"byte_end":265315,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<NoopSpan>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `NoopSpan` instance.\n","sig":null,"attributes":[{"value":"/ Creates a new `NoopSpan` instance.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265262,"byte_end":265300,"line_start":50,"line_end":50,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2656},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":266751,"byte_end":266761,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"name":"NoopTracer","qualname":"::trace::noop::NoopTracer","value":"NoopTracer {  }","parent":null,"children":[{"krate":0,"index":2657}],"decl_id":null,"docs":" A no-op instance of a `Tracer`.\n","sig":null,"attributes":[{"value":"/ A no-op instance of a `Tracer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":266671,"byte_end":266706,"line_start":111,"line_end":111,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":266848,"byte_end":266851,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<NoopTracer>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new no-op tracer\n","sig":null,"attributes":[{"value":"/ Create a new no-op tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":266807,"byte_end":266836,"line_start":118,"line_end":118,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2664},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268434,"byte_end":268450,"line_start":169,"line_end":169,"column_start":12,"column_end":28},"name":"NoopSpanExporter","qualname":"::trace::noop::NoopSpanExporter","value":"NoopSpanExporter {  }","parent":null,"children":[{"krate":0,"index":2665}],"decl_id":null,"docs":" A no-op instance of an [`SpanExporter`].","sig":null,"attributes":[{"value":"/ A no-op instance of an [`SpanExporter`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268286,"byte_end":268330,"line_start":165,"line_end":165,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268331,"byte_end":268334,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ [`SpanExporter`]: crate::sdk::export::trace::SpanExporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268335,"byte_end":268396,"line_start":167,"line_end":167,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268549,"byte_end":268552,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<NoopSpanExporter>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new noop span exporter\n","sig":null,"attributes":[{"value":"/ Create a new noop span exporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268502,"byte_end":268537,"line_start":174,"line_end":174,"column_start":5,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":1626},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/provider.rs","byte_start":271738,"byte_end":271752,"line_start":26,"line_end":26,"column_start":11,"column_end":25},"name":"TracerProvider","qualname":"::trace::provider::TracerProvider","value":"TracerProvider: fmt::Debug + 'static","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628}],"decl_id":null,"docs":" An interface to create `Tracer` instances.\n","sig":null,"attributes":[{"value":"/ An interface to create `Tracer` instances.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/provider.rs","byte_start":271681,"byte_end":271727,"line_start":25,"line_end":25,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1627},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/provider.rs","byte_start":271852,"byte_end":271858,"line_start":28,"line_end":28,"column_start":10,"column_end":16},"name":"Tracer","qualname":"::trace::provider::TracerProvider::Tracer","value":"type Tracer: Tracer;","parent":{"krate":0,"index":1626},"children":[],"decl_id":null,"docs":" The `Tracer` type that this `TracerProvider` will return.\n","sig":null,"attributes":[{"value":"/ The `Tracer` type that this `TracerProvider` will return.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/provider.rs","byte_start":271781,"byte_end":271842,"line_start":27,"line_end":27,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/provider.rs","byte_start":272007,"byte_end":272017,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"get_tracer","qualname":"::trace::provider::TracerProvider::get_tracer","value":"pub fn get_tracer(&Self, &'static str, Option<&'static str>) -> Self::Tracer","parent":{"krate":0,"index":1626},"children":[],"decl_id":null,"docs":" Creates a named tracer instance of `Self::Tracer`.\n If the name is an empty string then provider uses default name.\n","sig":null,"attributes":[{"value":"/ Creates a named tracer instance of `Self::Tracer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/provider.rs","byte_start":271873,"byte_end":271927,"line_start":30,"line_end":30,"column_start":5,"column_end":59}},{"value":"/ If the name is an empty string then provider uses default name.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/provider.rs","byte_start":271932,"byte_end":271999,"line_start":31,"line_end":31,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":1646},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273421,"byte_end":273425,"line_start":26,"line_end":26,"column_start":11,"column_end":15},"name":"Span","qualname":"::trace::span::Span","value":"Span: fmt::Debug + 'static + Send + Sync","parent":null,"children":[{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657}],"decl_id":null,"docs":" Interface for a single operation within a trace.\n","sig":null,"attributes":[{"value":"/ Interface for a single operation within a trace.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273358,"byte_end":273410,"line_start":25,"line_end":25,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1647},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274074,"byte_end":274083,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"add_event","qualname":"::trace::span::Span::add_event","value":"pub fn add_event(&Self, String, Vec<KeyValue>)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" An API to record events in the context of a given `Span`.","sig":null,"attributes":[{"value":"/ An API to record events in the context of a given `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273468,"byte_end":273529,"line_start":27,"line_end":27,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273534,"byte_end":273537,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ Events have a time associated with the moment when they are","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273542,"byte_end":273605,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ added to the `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273610,"byte_end":273634,"line_start":30,"line_end":30,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273639,"byte_end":273642,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ Events SHOULD preserve the order in which they're set. This will typically match","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273647,"byte_end":273731,"line_start":32,"line_end":32,"column_start":5,"column_end":89}},{"value":"/ the ordering of the events' timestamps.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273736,"byte_end":273779,"line_start":33,"line_end":33,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273784,"byte_end":273787,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard event names and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273792,"byte_end":273876,"line_start":35,"line_end":35,"column_start":5,"column_end":89}},{"value":"/ keys\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273881,"byte_end":274017,"line_start":36,"line_end":36,"column_start":5,"column_end":141}},{"value":"/ which have prescribed semantic meanings.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274022,"byte_end":274066,"line_start":37,"line_end":37,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1648},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275047,"byte_end":275063,"line_start":55,"line_end":55,"column_start":8,"column_end":24},"name":"record_exception","qualname":"::trace::span::Span::record_exception","value":"pub fn record_exception(&Self, &dyn Error)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" Convenience method to record an exception/error as an `Event`","sig":null,"attributes":[{"value":"/ Convenience method to record an exception/error as an `Event`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274221,"byte_end":274286,"line_start":42,"line_end":42,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274291,"byte_end":274294,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ An exception SHOULD be recorded as an Event on the span during which it occurred.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274299,"byte_end":274384,"line_start":44,"line_end":44,"column_start":5,"column_end":90}},{"value":"/ The name of the event MUST be \"exception\".","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274389,"byte_end":274435,"line_start":45,"line_end":45,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274440,"byte_end":274443,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The semantic conventions for Errors are described in [\"Semantic Conventions for Exceptions\"](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/exceptions.md)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274448,"byte_end":274674,"line_start":47,"line_end":47,"column_start":5,"column_end":231}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274679,"byte_end":274682,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ For now we will not set `exception.stacktrace` attribute since the `Error::backtrace`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274687,"byte_end":274776,"line_start":49,"line_end":49,"column_start":5,"column_end":94}},{"value":"/ method is still in nightly. Users can provide a stacktrace by using the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274781,"byte_end":274856,"line_start":50,"line_end":50,"column_start":5,"column_end":80}},{"value":"/ `record_exception_with_stacktrace` method.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274861,"byte_end":274907,"line_start":51,"line_end":51,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274912,"byte_end":274915,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Users can custom the exception message by overriding the `fmt::Display` trait's `fmt` method","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":274920,"byte_end":275016,"line_start":53,"line_end":53,"column_start":5,"column_end":101}},{"value":"/ for the error.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275021,"byte_end":275039,"line_start":54,"line_end":54,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1649},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275411,"byte_end":275443,"line_start":64,"line_end":64,"column_start":8,"column_end":40},"name":"record_exception_with_stacktrace","qualname":"::trace::span::Span::record_exception_with_stacktrace","value":"pub fn record_exception_with_stacktrace(&Self, &dyn Error, String)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" Convenience method to record a exception/error as an `Event` with custom stacktrace","sig":null,"attributes":[{"value":"/ Convenience method to record a exception/error as an `Event` with custom stacktrace","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275247,"byte_end":275334,"line_start":61,"line_end":61,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275339,"byte_end":275342,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ See `Span:record_exception` method for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275347,"byte_end":275403,"line_start":63,"line_end":63,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1650},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276253,"byte_end":276277,"line_start":81,"line_end":81,"column_start":8,"column_end":32},"name":"add_event_with_timestamp","qualname":"::trace::span::Span::add_event_with_timestamp","value":"pub fn add_event_with_timestamp(&Self, String, SystemTime, Vec<KeyValue>)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" An API to record events at a specific time in the context of a given `Span`.","sig":null,"attributes":[{"value":"/ An API to record events at a specific time in the context of a given `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275733,"byte_end":275813,"line_start":73,"line_end":73,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275818,"byte_end":275821,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Events SHOULD preserve the order in which they're set. This will typically match","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275826,"byte_end":275910,"line_start":75,"line_end":75,"column_start":5,"column_end":89}},{"value":"/ the ordering of the events' timestamps.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275915,"byte_end":275958,"line_start":76,"line_end":76,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275963,"byte_end":275966,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard event names and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":275971,"byte_end":276055,"line_start":78,"line_end":78,"column_start":5,"column_end":89}},{"value":"/ keys\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276060,"byte_end":276196,"line_start":79,"line_end":79,"column_start":5,"column_end":141}},{"value":"/ which have prescribed semantic meanings.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276201,"byte_end":276245,"line_start":80,"line_end":80,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1651},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276594,"byte_end":276606,"line_start":90,"line_end":90,"column_start":8,"column_end":20},"name":"span_context","qualname":"::trace::span::Span::span_context","value":"pub fn span_context(&Self) -> &SpanContext","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" Returns the `SpanContext` for the given `Span`. The returned value may be used even after\n the `Span is finished. The returned value MUST be the same for the entire `Span` lifetime.\n","sig":null,"attributes":[{"value":"/ Returns the `SpanContext` for the given `Span`. The returned value may be used even after","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276394,"byte_end":276487,"line_start":88,"line_end":88,"column_start":5,"column_end":98}},{"value":"/ the `Span is finished. The returned value MUST be the same for the entire `Span` lifetime.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276492,"byte_end":276586,"line_start":89,"line_end":89,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277814,"byte_end":277826,"line_start":108,"line_end":108,"column_start":8,"column_end":20},"name":"is_recording","qualname":"::trace::span::Span::is_recording","value":"pub fn is_recording(&Self) -> bool","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" Returns true if this `Span` is recording information like events with the `add_event`\n operation, attributes using `set_attributes`, status with `set_status`, etc.","sig":null,"attributes":[{"value":"/ Returns true if this `Span` is recording information like events with the `add_event`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276636,"byte_end":276725,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ operation, attributes using `set_attributes`, status with `set_status`, etc.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276730,"byte_end":276810,"line_start":93,"line_end":93,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276815,"byte_end":276818,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This flag SHOULD be used to avoid expensive computations of a `Span` attributes or events in","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276823,"byte_end":276919,"line_start":95,"line_end":95,"column_start":5,"column_end":101}},{"value":"/ case when a `Span` is definitely not recorded. Note that any child span's recording is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":276924,"byte_end":277014,"line_start":96,"line_end":96,"column_start":5,"column_end":95}},{"value":"/ determined independently from the value of this flag (typically based on the sampled flag of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277019,"byte_end":277115,"line_start":97,"line_end":97,"column_start":5,"column_end":101}},{"value":"/ a `TraceFlag` on `SpanContext`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277120,"byte_end":277156,"line_start":98,"line_end":98,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277161,"byte_end":277164,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This flag may be true despite the entire trace being sampled out. This allows to record and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277169,"byte_end":277264,"line_start":100,"line_end":100,"column_start":5,"column_end":100}},{"value":"/ process information about the individual Span without sending it to the backend. An example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277269,"byte_end":277364,"line_start":101,"line_end":101,"column_start":5,"column_end":100}},{"value":"/ of this scenario may be recording and processing of all incoming requests for the processing","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277369,"byte_end":277465,"line_start":102,"line_end":102,"column_start":5,"column_end":101}},{"value":"/ and building of SLA/SLO latency charts while sending only a subset - sampled spans - to the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277470,"byte_end":277565,"line_start":103,"line_end":103,"column_start":5,"column_end":100}},{"value":"/ backend. See also the sampling section of SDK design.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277570,"byte_end":277627,"line_start":104,"line_end":104,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277632,"byte_end":277635,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Users of the API should only access the `is_recording` property when instrumenting code and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277640,"byte_end":277735,"line_start":106,"line_end":106,"column_start":5,"column_end":100}},{"value":"/ never access `SampledFlag` unless used in context propagators.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277740,"byte_end":277806,"line_start":107,"line_end":107,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1653},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278621,"byte_end":278634,"line_start":123,"line_end":123,"column_start":8,"column_end":21},"name":"set_attribute","qualname":"::trace::span::Span::set_attribute","value":"pub fn set_attribute(&Self, KeyValue)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" An API to set a single `Attribute` where the attribute properties are passed\n as arguments. To avoid extra allocations some implementations may offer a separate API for\n each of the possible value types.","sig":null,"attributes":[{"value":"/ An API to set a single `Attribute` where the attribute properties are passed","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277848,"byte_end":277928,"line_start":110,"line_end":110,"column_start":5,"column_end":85}},{"value":"/ as arguments. To avoid extra allocations some implementations may offer a separate API for","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":277933,"byte_end":278027,"line_start":111,"line_end":111,"column_start":5,"column_end":99}},{"value":"/ each of the possible value types.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278032,"byte_end":278069,"line_start":112,"line_end":112,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278074,"byte_end":278077,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ An `Attribute` is defined as a `KeyValue` pair.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278082,"byte_end":278133,"line_start":114,"line_end":114,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278138,"byte_end":278141,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Attributes SHOULD preserve the order in which they're set. Setting an attribute","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278146,"byte_end":278229,"line_start":116,"line_end":116,"column_start":5,"column_end":88}},{"value":"/ with the same key as an existing attribute SHOULD overwrite the existing","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278234,"byte_end":278310,"line_start":117,"line_end":117,"column_start":5,"column_end":81}},{"value":"/ attribute's value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278315,"byte_end":278337,"line_start":118,"line_end":118,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278342,"byte_end":278345,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278350,"byte_end":278418,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ attributes\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278423,"byte_end":278565,"line_start":121,"line_end":121,"column_start":5,"column_end":147}},{"value":"/ that have prescribed semantic meanings.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278570,"byte_end":278613,"line_start":122,"line_end":122,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1654},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278982,"byte_end":278992,"line_start":130,"line_end":130,"column_start":8,"column_end":18},"name":"set_status","qualname":"::trace::span::Span::set_status","value":"pub fn set_status(&Self, StatusCode, String)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" Sets the status of the `Span`. If used, this will override the default `Span`\n status, which is `Unset`. `message` MUST be ignored when the status is `OK` or `Unset`","sig":null,"attributes":[{"value":"/ Sets the status of the `Span`. If used, this will override the default `Span`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278669,"byte_end":278750,"line_start":125,"line_end":125,"column_start":5,"column_end":86}},{"value":"/ status, which is `Unset`. `message` MUST be ignored when the status is `OK` or `Unset`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278755,"byte_end":278845,"line_start":126,"line_end":126,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278850,"byte_end":278853,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Only the value of the last call will be recorded, and implementations are free","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278858,"byte_end":278940,"line_start":128,"line_end":128,"column_start":5,"column_end":87}},{"value":"/ to ignore previous calls.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":278945,"byte_end":278974,"line_start":129,"line_end":129,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279851,"byte_end":279862,"line_start":144,"line_end":144,"column_start":8,"column_end":19},"name":"update_name","qualname":"::trace::span::Span::update_name","value":"pub fn update_name(&Self, String)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" Updates the `Span`'s name. After this update, any sampling behavior based on the\n name will depend on the implementation.","sig":null,"attributes":[{"value":"/ Updates the `Span`'s name. After this update, any sampling behavior based on the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279041,"byte_end":279125,"line_start":132,"line_end":132,"column_start":5,"column_end":89}},{"value":"/ name will depend on the implementation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279130,"byte_end":279173,"line_start":133,"line_end":133,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279178,"byte_end":279181,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ It is highly discouraged to update the name of a `Span` after its creation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279186,"byte_end":279265,"line_start":135,"line_end":135,"column_start":5,"column_end":84}},{"value":"/ `Span` name is often used to group, filter and identify the logical groups of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279270,"byte_end":279351,"line_start":136,"line_end":136,"column_start":5,"column_end":86}},{"value":"/ spans. Often, filtering logic will be implemented before the `Span` creation","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279356,"byte_end":279436,"line_start":137,"line_end":137,"column_start":5,"column_end":85}},{"value":"/ for performance reasons, and the name update may interfere with this logic.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279441,"byte_end":279520,"line_start":138,"line_end":138,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279525,"byte_end":279528,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ The method name is called `update_name` to differentiate this method from the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279533,"byte_end":279614,"line_start":140,"line_end":140,"column_start":5,"column_end":86}},{"value":"/ regular property. It emphasizes that this operation signifies a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279619,"byte_end":279686,"line_start":141,"line_end":141,"column_start":5,"column_end":72}},{"value":"/ major change for a `Span` and may lead to re-calculation of sampling or","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279691,"byte_end":279766,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/ filtering decisions made previously depending on the implementation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279771,"byte_end":279843,"line_start":143,"line_end":143,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1656},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280320,"byte_end":280323,"line_start":156,"line_end":156,"column_start":8,"column_end":11},"name":"end","qualname":"::trace::span::Span::end","value":"pub fn end(&Self)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" Finishes the `Span`.","sig":null,"attributes":[{"value":"/ Finishes the `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279894,"byte_end":279918,"line_start":146,"line_end":146,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279923,"byte_end":279926,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Implementations MUST ignore all subsequent calls to `end` (there might be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":279931,"byte_end":280008,"line_start":148,"line_end":148,"column_start":5,"column_end":82}},{"value":"/ exceptions when the tracer is streaming events and has no mutable state","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280013,"byte_end":280088,"line_start":149,"line_end":149,"column_start":5,"column_end":80}},{"value":"/ associated with the Span).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280093,"byte_end":280123,"line_start":150,"line_end":150,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280128,"byte_end":280131,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Calls to `end` a Span MUST not have any effects on child `Span`s as they may","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280136,"byte_end":280216,"line_start":152,"line_end":152,"column_start":5,"column_end":85}},{"value":"/ still be running and can be ended later.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280221,"byte_end":280265,"line_start":153,"line_end":153,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280270,"byte_end":280273,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ This API MUST be non-blocking.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280278,"byte_end":280312,"line_start":155,"line_end":155,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280549,"byte_end":280567,"line_start":165,"line_end":165,"column_start":8,"column_end":26},"name":"end_with_timestamp","qualname":"::trace::span::Span::end_with_timestamp","value":"pub fn end_with_timestamp(&Self, SystemTime)","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":" Finishes the `Span` with given timestamp","sig":null,"attributes":[{"value":"/ Finishes the `Span` with given timestamp","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280397,"byte_end":280441,"line_start":160,"line_end":160,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280446,"byte_end":280449,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ For more details, refer to [`Span::end`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280454,"byte_end":280498,"line_start":162,"line_end":162,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280503,"byte_end":280506,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ [`Span::end`]: Span::end()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280511,"byte_end":280541,"line_start":164,"line_end":164,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2676},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282646,"byte_end":282652,"line_start":207,"line_end":207,"column_start":5,"column_end":11},"name":"Client","qualname":"::trace::span::SpanKind::Client","value":"SpanKind::Client","parent":{"krate":0,"index":2675},"children":[],"decl_id":null,"docs":" Indicates that the span describes a synchronous request to\n some remote service.  This span is the parent of a remote `Server`\n span and waits for its response.\n","sig":null,"attributes":[{"value":"/ Indicates that the span describes a synchronous request to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282463,"byte_end":282525,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/ some remote service.  This span is the parent of a remote `Server`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282530,"byte_end":282600,"line_start":205,"line_end":205,"column_start":5,"column_end":75}},{"value":"/ span and waits for its response.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282605,"byte_end":282641,"line_start":206,"line_end":206,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2678},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282872,"byte_end":282878,"line_start":211,"line_end":211,"column_start":5,"column_end":11},"name":"Server","qualname":"::trace::span::SpanKind::Server","value":"SpanKind::Server","parent":{"krate":0,"index":2675},"children":[],"decl_id":null,"docs":" Indicates that the span covers server-side handling of a\n synchronous RPC or other remote request.  This span is the child of\n a remote `Client` span that was expected to wait for a response.\n","sig":null,"attributes":[{"value":"/ Indicates that the span covers server-side handling of a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282658,"byte_end":282718,"line_start":208,"line_end":208,"column_start":5,"column_end":65}},{"value":"/ synchronous RPC or other remote request.  This span is the child of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282723,"byte_end":282794,"line_start":209,"line_end":209,"column_start":5,"column_end":76}},{"value":"/ a remote `Client` span that was expected to wait for a response.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282799,"byte_end":282867,"line_start":210,"line_end":210,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2680},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283258,"byte_end":283266,"line_start":218,"line_end":218,"column_start":5,"column_end":13},"name":"Producer","qualname":"::trace::span::SpanKind::Producer","value":"SpanKind::Producer","parent":{"krate":0,"index":2675},"children":[],"decl_id":null,"docs":" Indicates that the span describes the parent of an\n asynchronous request.  This parent span is expected to end before\n the corresponding child `Consumer` span, possibly even before the\n child span starts. In messaging scenarios with batching, tracing\n individual messages requires a new `Producer` span per message to\n be created.\n","sig":null,"attributes":[{"value":"/ Indicates that the span describes the parent of an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282884,"byte_end":282938,"line_start":212,"line_end":212,"column_start":5,"column_end":59}},{"value":"/ asynchronous request.  This parent span is expected to end before","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282943,"byte_end":283012,"line_start":213,"line_end":213,"column_start":5,"column_end":74}},{"value":"/ the corresponding child `Consumer` span, possibly even before the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283017,"byte_end":283086,"line_start":214,"line_end":214,"column_start":5,"column_end":74}},{"value":"/ child span starts. In messaging scenarios with batching, tracing","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283091,"byte_end":283159,"line_start":215,"line_end":215,"column_start":5,"column_end":73}},{"value":"/ individual messages requires a new `Producer` span per message to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283164,"byte_end":283233,"line_start":216,"line_end":216,"column_start":5,"column_end":74}},{"value":"/ be created.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283238,"byte_end":283253,"line_start":217,"line_end":217,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2682},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283371,"byte_end":283379,"line_start":221,"line_end":221,"column_start":5,"column_end":13},"name":"Consumer","qualname":"::trace::span::SpanKind::Consumer","value":"SpanKind::Consumer","parent":{"krate":0,"index":2675},"children":[],"decl_id":null,"docs":" Indicates that the span describes the child of an\n asynchronous `Producer` request.\n","sig":null,"attributes":[{"value":"/ Indicates that the span describes the child of an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283272,"byte_end":283325,"line_start":219,"line_end":219,"column_start":5,"column_end":58}},{"value":"/ asynchronous `Producer` request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283330,"byte_end":283366,"line_start":220,"line_end":220,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2684},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283565,"byte_end":283573,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"Internal","qualname":"::trace::span::SpanKind::Internal","value":"SpanKind::Internal","parent":{"krate":0,"index":2675},"children":[],"decl_id":null,"docs":" Default value. Indicates that the span represents an\n internal operation within an application, as opposed to an\n operations with remote parents or children.\n","sig":null,"attributes":[{"value":"/ Default value. Indicates that the span represents an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283385,"byte_end":283441,"line_start":222,"line_end":222,"column_start":5,"column_end":61}},{"value":"/ internal operation within an application, as opposed to an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283446,"byte_end":283508,"line_start":223,"line_end":223,"column_start":5,"column_end":67}},{"value":"/ operations with remote parents or children.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283513,"byte_end":283560,"line_start":224,"line_end":224,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":2675},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282448,"byte_end":282456,"line_start":203,"line_end":203,"column_start":10,"column_end":18},"name":"SpanKind","qualname":"::trace::span::SpanKind","value":"pub enum SpanKind { Client, Server, Producer, Consumer, Internal, }","parent":null,"children":[{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":2684}],"decl_id":null,"docs":" `SpanKind` describes the relationship between the Span, its parents,\n and its children in a `Trace`. `SpanKind` describes two independent\n properties that benefit tracing systems during analysis.","sig":null,"attributes":[{"value":"/ `SpanKind` describes the relationship between the Span, its parents,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280602,"byte_end":280674,"line_start":168,"line_end":168,"column_start":1,"column_end":73}},{"value":"/ and its children in a `Trace`. `SpanKind` describes two independent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280675,"byte_end":280746,"line_start":169,"line_end":169,"column_start":1,"column_end":72}},{"value":"/ properties that benefit tracing systems during analysis.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280747,"byte_end":280807,"line_start":170,"line_end":170,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280808,"byte_end":280811,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ The first property described by `SpanKind` reflects whether the `Span`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280812,"byte_end":280886,"line_start":172,"line_end":172,"column_start":1,"column_end":75}},{"value":"/ is a remote child or parent. `Span`s with a remote parent are","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280887,"byte_end":280952,"line_start":173,"line_end":173,"column_start":1,"column_end":66}},{"value":"/ interesting because they are sources of external load. `Span`s with a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":280953,"byte_end":281026,"line_start":174,"line_end":174,"column_start":1,"column_end":74}},{"value":"/ remote child are interesting because they reflect a non-local system","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281027,"byte_end":281099,"line_start":175,"line_end":175,"column_start":1,"column_end":73}},{"value":"/ dependency.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281100,"byte_end":281115,"line_start":176,"line_end":176,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281116,"byte_end":281119,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ The second property described by `SpanKind` reflects whether a child","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281120,"byte_end":281192,"line_start":178,"line_end":178,"column_start":1,"column_end":73}},{"value":"/ `Span` represents a synchronous call.  When a child span is synchronous,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281193,"byte_end":281269,"line_start":179,"line_end":179,"column_start":1,"column_end":77}},{"value":"/ the parent is expected to wait for it to complete under ordinary","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281270,"byte_end":281338,"line_start":180,"line_end":180,"column_start":1,"column_end":69}},{"value":"/ circumstances.  It can be useful for tracing systems to know this","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281339,"byte_end":281408,"line_start":181,"line_end":181,"column_start":1,"column_end":70}},{"value":"/ property, since synchronous `Span`s may contribute to the overall trace","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281409,"byte_end":281484,"line_start":182,"line_end":182,"column_start":1,"column_end":76}},{"value":"/ latency. Asynchronous scenarios can be remote or local.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281485,"byte_end":281544,"line_start":183,"line_end":183,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281545,"byte_end":281548,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ In order for `SpanKind` to be meaningful, callers should arrange that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281549,"byte_end":281622,"line_start":185,"line_end":185,"column_start":1,"column_end":74}},{"value":"/ a single `Span` does not serve more than one purpose.  For example, a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281623,"byte_end":281696,"line_start":186,"line_end":186,"column_start":1,"column_end":74}},{"value":"/ server-side span should not be used directly as the parent of another","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281697,"byte_end":281770,"line_start":187,"line_end":187,"column_start":1,"column_end":74}},{"value":"/ remote span.  As a simple guideline, instrumentation should create a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281771,"byte_end":281843,"line_start":188,"line_end":188,"column_start":1,"column_end":73}},{"value":"/ new `Span` prior to extracting and serializing the span context for a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281844,"byte_end":281917,"line_start":189,"line_end":189,"column_start":1,"column_end":74}},{"value":"/ remote call.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281918,"byte_end":281934,"line_start":190,"line_end":190,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281935,"byte_end":281938,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ To summarize the interpretation of these kinds:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281939,"byte_end":281990,"line_start":192,"line_end":192,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281991,"byte_end":281994,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ | `SpanKind` | Synchronous | Asynchronous | Remote Incoming | Remote Outgoing |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":281995,"byte_end":282078,"line_start":194,"line_end":194,"column_start":1,"column_end":84}},{"value":"/ |------------|-----|-----|-----|-----|","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282079,"byte_end":282121,"line_start":195,"line_end":195,"column_start":1,"column_end":43}},{"value":"/ | `Client`   | yes |     |     | yes |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282122,"byte_end":282164,"line_start":196,"line_end":196,"column_start":1,"column_end":43}},{"value":"/ | `Server`   | yes |     | yes |     |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282165,"byte_end":282207,"line_start":197,"line_end":197,"column_start":1,"column_end":43}},{"value":"/ | `Producer` |     | yes |     | yes |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282208,"byte_end":282250,"line_start":198,"line_end":198,"column_start":1,"column_end":43}},{"value":"/ | `Consumer` |     | yes | yes |     |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282251,"byte_end":282293,"line_start":199,"line_end":199,"column_start":1,"column_end":43}},{"value":"/ | `Internal` |     |     |     |     |","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":282294,"byte_end":282336,"line_start":200,"line_end":200,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2694},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284323,"byte_end":284328,"line_start":247,"line_end":247,"column_start":5,"column_end":10},"name":"Unset","qualname":"::trace::span::StatusCode::Unset","value":"StatusCode::Unset","parent":{"krate":0,"index":2693},"children":[],"decl_id":null,"docs":" The default status.\n","sig":null,"attributes":[{"value":"/ The default status.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284295,"byte_end":284318,"line_start":246,"line_end":246,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2697},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284373,"byte_end":284375,"line_start":249,"line_end":249,"column_start":5,"column_end":7},"name":"Ok","qualname":"::trace::span::StatusCode::Ok","value":"StatusCode::Ok","parent":{"krate":0,"index":2693},"children":[],"decl_id":null,"docs":" OK is returned on success.\n","sig":null,"attributes":[{"value":"/ OK is returned on success.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284338,"byte_end":284368,"line_start":248,"line_end":248,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2700},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284426,"byte_end":284431,"line_start":251,"line_end":251,"column_start":5,"column_end":10},"name":"Error","qualname":"::trace::span::StatusCode::Error","value":"StatusCode::Error","parent":{"krate":0,"index":2693},"children":[],"decl_id":null,"docs":" The operation contains an error.\n","sig":null,"attributes":[{"value":"/ The operation contains an error.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284385,"byte_end":284421,"line_start":250,"line_end":250,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":2693},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284278,"byte_end":284288,"line_start":245,"line_end":245,"column_start":10,"column_end":20},"name":"StatusCode","qualname":"::trace::span::StatusCode","value":"pub enum StatusCode { Unset = , Ok = , Error = , }","parent":null,"children":[{"krate":0,"index":2694},{"krate":0,"index":2697},{"krate":0,"index":2700}],"decl_id":null,"docs":" The `StatusCode` interface represents the status of a finished `Span`.\n It's composed of a canonical code in conjunction with an optional\n descriptive message.\n","sig":null,"attributes":[{"value":"/ The `StatusCode` interface represents the status of a finished `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283991,"byte_end":284065,"line_start":240,"line_end":240,"column_start":1,"column_end":75}},{"value":"/ It's composed of a canonical code in conjunction with an optional","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284066,"byte_end":284135,"line_start":241,"line_end":241,"column_start":1,"column_end":70}},{"value":"/ descriptive message.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284136,"byte_end":284160,"line_start":242,"line_end":242,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1661},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284528,"byte_end":284534,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"as_str","qualname":"<StatusCode>::as_str","value":"pub fn as_str(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Return a static str that represent the status code\n","sig":null,"attributes":[{"value":"/ Return a static str that represent the status code","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284462,"byte_end":284516,"line_start":255,"line_end":255,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":1669},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":285621,"byte_end":285643,"line_start":19,"line_end":19,"column_start":11,"column_end":33},"name":"TRACE_FLAG_NOT_SAMPLED","qualname":"::trace::span_context::TRACE_FLAG_NOT_SAMPLED","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A SpanContext with TRACE_FLAG_NOT_SAMPLED means the span is not sampled.\n","sig":null,"attributes":[{"value":"/ A SpanContext with TRACE_FLAG_NOT_SAMPLED means the span is not sampled.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":285534,"byte_end":285610,"line_start":18,"line_end":18,"column_start":1,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":1670},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":285799,"byte_end":285817,"line_start":22,"line_end":22,"column_start":11,"column_end":29},"name":"TRACE_FLAG_SAMPLED","qualname":"::trace::span_context::TRACE_FLAG_SAMPLED","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" TRACE_FLAG_SAMPLED is a bitmask with the sampled bit set. A SpanContext\n with the sampling bit set means the span is sampled.\n","sig":null,"attributes":[{"value":"/ TRACE_FLAG_SAMPLED is a bitmask with the sampled bit set. A SpanContext","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":285656,"byte_end":285731,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ with the sampling bit set means the span is sampled.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":285732,"byte_end":285788,"line_start":21,"line_end":21,"column_start":1,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":1671},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286015,"byte_end":286034,"line_start":26,"line_end":26,"column_start":11,"column_end":30},"name":"TRACE_FLAG_DEFERRED","qualname":"::trace::span_context::TRACE_FLAG_DEFERRED","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" TRACE_FLAGS_DEFERRED is a bitmask with the deferred bit set. A SpanContext\n with the deferred bit set means the sampling decision has been\n defered to the receiver.\n","sig":null,"attributes":[{"value":"/ TRACE_FLAGS_DEFERRED is a bitmask with the deferred bit set. A SpanContext","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":285830,"byte_end":285908,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ with the deferred bit set means the sampling decision has been","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":285909,"byte_end":285975,"line_start":24,"line_end":24,"column_start":1,"column_end":67}},{"value":"/ defered to the receiver.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":285976,"byte_end":286004,"line_start":25,"line_end":25,"column_start":1,"column_end":29}}]},{"kind":"Const","id":{"krate":0,"index":1672},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286116,"byte_end":286132,"line_start":28,"line_end":28,"column_start":11,"column_end":27},"name":"TRACE_FLAG_DEBUG","qualname":"::trace::span_context::TRACE_FLAG_DEBUG","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" TRACE_FLAGS_DEBUG is a bitmask with the debug bit set.\n","sig":null,"attributes":[{"value":"/ TRACE_FLAGS_DEBUG is a bitmask with the debug bit set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286047,"byte_end":286105,"line_start":27,"line_end":27,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2711},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286445,"byte_end":286452,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"TraceId","qualname":"::trace::span_context::TraceId","value":"","parent":null,"children":[],"decl_id":null,"docs":" TraceId is an 16-byte value which uniquely identifies a given trace\n The actual `u128` value is wrapped in a tuple struct in order to leverage the newtype pattern\n","sig":null,"attributes":[{"value":"/ TraceId is an 16-byte value which uniquely identifies a given trace","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286146,"byte_end":286217,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ The actual `u128` value is wrapped in a tuple struct in order to leverage the newtype pattern","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286218,"byte_end":286315,"line_start":31,"line_end":31,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286541,"byte_end":286548,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"invalid","qualname":"<TraceId>::invalid","value":"pub fn invalid() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new invalid (zero-valued) TraceId\n","sig":null,"attributes":[{"value":"/ Construct a new invalid (zero-valued) TraceId","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286480,"byte_end":286529,"line_start":37,"line_end":37,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1675},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286635,"byte_end":286644,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"name":"from_u128","qualname":"<TraceId>::from_u128","value":"pub fn from_u128(u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from u128 to TraceId\n","sig":null,"attributes":[{"value":"/ Convert from u128 to TraceId","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286591,"byte_end":286623,"line_start":42,"line_end":42,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286744,"byte_end":286751,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"to_u128","qualname":"<TraceId>::to_u128","value":"pub fn to_u128(Self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Convert from TraceId to u128\n","sig":null,"attributes":[{"value":"/ Convert from TraceId to u128","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286700,"byte_end":286732,"line_start":47,"line_end":47,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286852,"byte_end":286858,"line_start":53,"line_end":53,"column_start":12,"column_end":18},"name":"to_hex","qualname":"<TraceId>::to_hex","value":"pub fn to_hex(Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Convert from TraceId to Hexadecimal String\n","sig":null,"attributes":[{"value":"/ Convert from TraceId to Hexadecimal String","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286794,"byte_end":286840,"line_start":52,"line_end":52,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286984,"byte_end":286997,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"to_byte_array","qualname":"<TraceId>::to_byte_array","value":"pub fn to_byte_array(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert from TraceId to Big-Endian byte array\n","sig":null,"attributes":[{"value":"/ Convert from TraceId to Big-Endian byte array","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286923,"byte_end":286972,"line_start":57,"line_end":57,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287121,"byte_end":287129,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"from_hex","qualname":"<TraceId>::from_hex","value":"pub fn from_hex(&str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new TraceId from Hexadecimal String\n","sig":null,"attributes":[{"value":"/ Construct a new TraceId from Hexadecimal String","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287058,"byte_end":287109,"line_start":62,"line_end":62,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287288,"byte_end":287303,"line_start":68,"line_end":68,"column_start":12,"column_end":27},"name":"from_byte_array","qualname":"<TraceId>::from_byte_array","value":"pub fn from_byte_array([u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new TraceId from Big-Endian byte array\n","sig":null,"attributes":[{"value":"/ Construct a new TraceId from Big-Endian byte array","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287222,"byte_end":287276,"line_start":67,"line_end":67,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2729},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287704,"byte_end":287710,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"SpanId","qualname":"::trace::span_context::SpanId","value":"","parent":null,"children":[],"decl_id":null,"docs":" SpanId is an 8-byte value which uniquely identifies a given span within a trace\n The actual `u64` value is wrapped in a tuple struct in order to leverage the newtype pattern\n","sig":null,"attributes":[{"value":"/ SpanId is an 8-byte value which uniquely identifies a given span within a trace","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287394,"byte_end":287477,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"/ The actual `u64` value is wrapped in a tuple struct in order to leverage the newtype pattern","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287478,"byte_end":287574,"line_start":74,"line_end":74,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287796,"byte_end":287803,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"invalid","qualname":"<SpanId>::invalid","value":"pub fn invalid() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new invalid (zero-valued) SpanId\n","sig":null,"attributes":[{"value":"/ Construct a new invalid (zero-valued) SpanId","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287736,"byte_end":287784,"line_start":80,"line_end":80,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287887,"byte_end":287895,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"from_u64","qualname":"<SpanId>::from_u64","value":"pub fn from_u64(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from u64 to SpanId\n","sig":null,"attributes":[{"value":"/ Convert from u64 to SpanId","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287845,"byte_end":287875,"line_start":85,"line_end":85,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287991,"byte_end":287997,"line_start":91,"line_end":91,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<SpanId>::to_u64","value":"pub fn to_u64(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Convert from SpanId to u64\n","sig":null,"attributes":[{"value":"/ Convert from SpanId to u64","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287949,"byte_end":287979,"line_start":90,"line_end":90,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288096,"byte_end":288102,"line_start":96,"line_end":96,"column_start":12,"column_end":18},"name":"to_hex","qualname":"<SpanId>::to_hex","value":"pub fn to_hex(Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Convert from SpanId to Hexadecimal String\n","sig":null,"attributes":[{"value":"/ Convert from SpanId to Hexadecimal String","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288039,"byte_end":288084,"line_start":95,"line_end":95,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288227,"byte_end":288240,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"to_byte_array","qualname":"<SpanId>::to_byte_array","value":"pub fn to_byte_array(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert from SpanId to Big-Endian byte array\n","sig":null,"attributes":[{"value":"/ Convert from SpanId to Big-Endian byte array","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288167,"byte_end":288215,"line_start":100,"line_end":100,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288362,"byte_end":288370,"line_start":106,"line_end":106,"column_start":12,"column_end":20},"name":"from_hex","qualname":"<SpanId>::from_hex","value":"pub fn from_hex(&str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new SpanId from Hexadecimal String\n","sig":null,"attributes":[{"value":"/ Construct a new SpanId from Hexadecimal String","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288300,"byte_end":288350,"line_start":105,"line_end":105,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288526,"byte_end":288541,"line_start":111,"line_end":111,"column_start":12,"column_end":27},"name":"from_byte_array","qualname":"<SpanId>::from_byte_array","value":"pub fn from_byte_array([u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new SpanId from Big-Endian byte array\n","sig":null,"attributes":[{"value":"/ Construct a new SpanId from Big-Endian byte array","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288461,"byte_end":288514,"line_start":110,"line_end":110,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":2747},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":289098,"byte_end":289108,"line_start":125,"line_end":125,"column_start":12,"column_end":22},"name":"TraceState","qualname":"::trace::span_context::TraceState","value":"","parent":null,"children":[],"decl_id":null,"docs":" TraceState carries system-specific configuration data, represented as a list\n of key-value pairs. TraceState allows multiple tracing systems to\n participate in the same trace.","sig":null,"attributes":[{"value":"/ TraceState carries system-specific configuration data, represented as a list","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288629,"byte_end":288709,"line_start":116,"line_end":116,"column_start":1,"column_end":81}},{"value":"/ of key-value pairs. TraceState allows multiple tracing systems to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288710,"byte_end":288779,"line_start":117,"line_end":117,"column_start":1,"column_end":70}},{"value":"/ participate in the same trace.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288780,"byte_end":288814,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288815,"byte_end":288818,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Please review the [W3C specification] for details on this field.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288819,"byte_end":288887,"line_start":120,"line_end":120,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288888,"byte_end":288891,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ [W3C specification]: https://www.w3.org/TR/trace-context/#tracestate-header","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":288892,"byte_end":288971,"line_start":122,"line_end":122,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":291142,"byte_end":291156,"line_start":185,"line_end":185,"column_start":12,"column_end":26},"name":"from_key_value","qualname":"<TraceState>::from_key_value","value":"pub fn from_key_value<T, K, V>(T) -> Result<Self, ()> where\nT: IntoIterator<Item = (K, V)>, K: ToString, V: ToString","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TraceState` from the given key-value collection.","sig":null,"attributes":[{"value":"/ Creates a new `TraceState` from the given key-value collection.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290646,"byte_end":290713,"line_start":171,"line_end":171,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290718,"byte_end":290721,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290726,"byte_end":290740,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290745,"byte_end":290748,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290753,"byte_end":290760,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::trace::TraceState;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290765,"byte_end":290806,"line_start":176,"line_end":176,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290811,"byte_end":290814,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ let kvs = vec![(\"foo\", \"bar\"), (\"apple\", \"banana\")];","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290819,"byte_end":290875,"line_start":178,"line_end":178,"column_start":5,"column_end":61}},{"value":"/ let trace_state: Result<TraceState, ()> = TraceState::from_key_value(kvs);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290880,"byte_end":290958,"line_start":179,"line_end":179,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290963,"byte_end":290966,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ assert!(trace_state.is_ok());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":290971,"byte_end":291004,"line_start":181,"line_end":181,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(trace_state.unwrap().header(), String::from(\"foo=bar,apple=banana\"))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":291009,"byte_end":291092,"line_start":182,"line_end":182,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":291097,"byte_end":291104,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":291109,"byte_end":291130,"line_start":184,"line_end":184,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":291985,"byte_end":291988,"line_start":212,"line_end":212,"column_start":12,"column_end":15},"name":"get","qualname":"<TraceState>::get","value":"pub fn get(&Self, &str) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a value for a given key from the `TraceState` if it exists.\n","sig":null,"attributes":[{"value":"/ Retrieves a value for a given key from the `TraceState` if it exists.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":291900,"byte_end":291973,"line_start":211,"line_end":211,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":292733,"byte_end":292739,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"insert","qualname":"<TraceState>::insert","value":"pub fn insert(&Self, String, String) -> Result<TraceState, ()>","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given key-value pair into the `TraceState`. If a value already exists for the\n given key, this updates the value and updates the value's position. If the key or value are\n invalid per the [W3 Spec]['spec'] an `Err` is returned, else a new `TraceState` with the\n updated key/value is returned.","sig":null,"attributes":[{"value":"/ Inserts the given key-value pair into the `TraceState`. If a value already exists for the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":292298,"byte_end":292391,"line_start":224,"line_end":224,"column_start":5,"column_end":98}},{"value":"/ given key, this updates the value and updates the value's position. If the key or value are","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":292396,"byte_end":292491,"line_start":225,"line_end":225,"column_start":5,"column_end":100}},{"value":"/ invalid per the [W3 Spec]['spec'] an `Err` is returned, else a new `TraceState` with the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":292496,"byte_end":292588,"line_start":226,"line_end":226,"column_start":5,"column_end":97}},{"value":"/ updated key/value is returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":292593,"byte_end":292627,"line_start":227,"line_end":227,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":292632,"byte_end":292635,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ['spec']: https://www.w3.org/TR/trace-context/#list","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":292640,"byte_end":292695,"line_start":229,"line_end":229,"column_start":5,"column_end":60}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":292700,"byte_end":292721,"line_start":230,"line_end":230,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293481,"byte_end":293487,"line_start":250,"line_end":250,"column_start":12,"column_end":18},"name":"delete","qualname":"<TraceState>::delete","value":"pub fn delete(&Self, String) -> Result<TraceState, ()>","parent":null,"children":[],"decl_id":null,"docs":" Removes the given key-value pair from the `TraceState`. If the key is invalid per the\n [W3 Spec]['spec'] or the key does not exist an `Err` is returned. Else, a new `TraceState`\n with the removed entry is returned.","sig":null,"attributes":[{"value":"/ Removes the given key-value pair from the `TraceState`. If the key is invalid per the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293143,"byte_end":293232,"line_start":244,"line_end":244,"column_start":5,"column_end":94}},{"value":"/ [W3 Spec]['spec'] or the key does not exist an `Err` is returned. Else, a new `TraceState`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293237,"byte_end":293331,"line_start":245,"line_end":245,"column_start":5,"column_end":99}},{"value":"/ with the removed entry is returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293336,"byte_end":293375,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293380,"byte_end":293383,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ['spec']: https://www.w3.org/TR/trace-context/#list","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293388,"byte_end":293443,"line_start":248,"line_end":248,"column_start":5,"column_end":60}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293448,"byte_end":293469,"line_start":249,"line_end":249,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":294029,"byte_end":294035,"line_start":269,"line_end":269,"column_start":12,"column_end":18},"name":"header","qualname":"<TraceState>::header","value":"pub fn header(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TraceState` header string, delimiting each key and value with a `=` and each\n entry with a `,`.\n","sig":null,"attributes":[{"value":"/ Creates a new `TraceState` header string, delimiting each key and value with a `=` and each","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293896,"byte_end":293991,"line_start":267,"line_end":267,"column_start":5,"column_end":100}},{"value":"/ entry with a `,`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":293996,"byte_end":294017,"line_start":268,"line_end":268,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":294219,"byte_end":294235,"line_start":274,"line_end":274,"column_start":12,"column_end":28},"name":"header_delimited","qualname":"<TraceState>::header_delimited","value":"pub fn header_delimited(&Self, &str, &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TraceState` header string, with the given key/value delimiter and entry delimiter.\n","sig":null,"attributes":[{"value":"/ Creates a new `TraceState` header string, with the given key/value delimiter and entry delimiter.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":294106,"byte_end":294207,"line_start":273,"line_end":273,"column_start":5,"column_end":106}}]},{"kind":"Struct","id":{"krate":0,"index":2763},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":295562,"byte_end":295573,"line_start":312,"line_end":312,"column_start":12,"column_end":23},"name":"SpanContext","qualname":"::trace::span_context::SpanContext","value":"SpanContext {  }","parent":null,"children":[{"krate":0,"index":2764},{"krate":0,"index":2765},{"krate":0,"index":2766},{"krate":0,"index":2767},{"krate":0,"index":2768}],"decl_id":null,"docs":" Immutable portion of a `Span` which can be serialized and propagated.\n","sig":null,"attributes":[{"value":"/ Immutable portion of a `Span` which can be serialized and propagated.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":295375,"byte_end":295448,"line_start":309,"line_end":309,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":295769,"byte_end":295782,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"empty_context","qualname":"<SpanContext>::empty_context","value":"pub fn empty_context() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an invalid empty span context\n","sig":null,"attributes":[{"value":"/ Create an invalid empty span context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":295717,"byte_end":295757,"line_start":321,"line_end":321,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296019,"byte_end":296022,"line_start":333,"line_end":333,"column_start":12,"column_end":15},"name":"new","qualname":"<SpanContext>::new","value":"pub fn new(TraceId, SpanId, u8, bool, TraceState) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `SpanContext`\n","sig":null,"attributes":[{"value":"/ Construct a new `SpanContext`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":295974,"byte_end":296007,"line_start":332,"line_end":332,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296396,"byte_end":296404,"line_start":350,"line_end":350,"column_start":12,"column_end":20},"name":"trace_id","qualname":"<SpanContext>::trace_id","value":"pub fn trace_id(&Self) -> TraceId","parent":null,"children":[],"decl_id":null,"docs":" A valid trace identifier is a non-zero `u128`.\n","sig":null,"attributes":[{"value":"/ A valid trace identifier is a non-zero `u128`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296334,"byte_end":296384,"line_start":349,"line_end":349,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1719},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296518,"byte_end":296525,"line_start":355,"line_end":355,"column_start":12,"column_end":19},"name":"span_id","qualname":"<SpanContext>::span_id","value":"pub fn span_id(&Self) -> SpanId","parent":null,"children":[],"decl_id":null,"docs":" A valid span identifier is a non-zero `u64`.\n","sig":null,"attributes":[{"value":"/ A valid span identifier is a non-zero `u64`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296458,"byte_end":296506,"line_start":354,"line_end":354,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296748,"byte_end":296759,"line_start":361,"line_end":361,"column_start":12,"column_end":23},"name":"trace_flags","qualname":"<SpanContext>::trace_flags","value":"pub fn trace_flags(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns details about the trace. Unlike `TraceState` values, these are\n present in all traces. Currently, the only option is a boolean sampled flag.\n","sig":null,"attributes":[{"value":"/ Returns details about the trace. Unlike `TraceState` values, these are","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296577,"byte_end":296651,"line_start":359,"line_end":359,"column_start":5,"column_end":79}},{"value":"/ present in all traces. Currently, the only option is a boolean sampled flag.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296656,"byte_end":296736,"line_start":360,"line_end":360,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296957,"byte_end":296965,"line_start":367,"line_end":367,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<SpanContext>::is_valid","value":"pub fn is_valid(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns a bool flag which is true if the `SpanContext` has a valid (non-zero) `trace_id`\n and a valid (non-zero) `span_id`.\n","sig":null,"attributes":[{"value":"/ Returns a bool flag which is true if the `SpanContext` has a valid (non-zero) `trace_id`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296811,"byte_end":296903,"line_start":365,"line_end":365,"column_start":5,"column_end":97}},{"value":"/ and a valid (non-zero) `span_id`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":296908,"byte_end":296945,"line_start":366,"line_end":366,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297132,"byte_end":297141,"line_start":372,"line_end":372,"column_start":12,"column_end":21},"name":"is_remote","qualname":"<SpanContext>::is_remote","value":"pub fn is_remote(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `SpanContext` was propagated from a remote parent.\n","sig":null,"attributes":[{"value":"/ Returns true if the `SpanContext` was propagated from a remote parent.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297046,"byte_end":297120,"line_start":371,"line_end":371,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297262,"byte_end":297273,"line_start":377,"line_end":377,"column_start":12,"column_end":23},"name":"is_deferred","qualname":"<SpanContext>::is_deferred","value":"pub fn is_deferred(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the deferred bit is set in the trace flags\n","sig":null,"attributes":[{"value":"/ Returns if the deferred bit is set in the trace flags","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297193,"byte_end":297250,"line_start":376,"line_end":376,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297440,"byte_end":297448,"line_start":382,"line_end":382,"column_start":12,"column_end":20},"name":"is_debug","qualname":"<SpanContext>::is_debug","value":"pub fn is_debug(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the debug bit is set in the trace flags\n","sig":null,"attributes":[{"value":"/ Returns if the debug bit is set in the trace flags","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297374,"byte_end":297428,"line_start":381,"line_end":381,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297604,"byte_end":297614,"line_start":387,"line_end":387,"column_start":12,"column_end":22},"name":"is_sampled","qualname":"<SpanContext>::is_sampled","value":"pub fn is_sampled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `SpanContext` is sampled.\n","sig":null,"attributes":[{"value":"/ Returns true if the `SpanContext` is sampled.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297543,"byte_end":297592,"line_start":386,"line_end":386,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297764,"byte_end":297775,"line_start":392,"line_end":392,"column_start":12,"column_end":23},"name":"trace_state","qualname":"<SpanContext>::trace_state","value":"pub fn trace_state(&Self) -> &TraceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the context's `TraceState`.\n","sig":null,"attributes":[{"value":"/ Returns the context's `TraceState`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":297713,"byte_end":297752,"line_start":391,"line_end":391,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":1772},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306290,"byte_end":306296,"line_start":159,"line_end":159,"column_start":11,"column_end":17},"name":"Tracer","qualname":"::trace::tracer::Tracer","value":"Tracer: fmt::Debug + 'static","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1782}],"decl_id":null,"docs":" Interface for constructing `Span`s.","sig":null,"attributes":[{"value":"/ Interface for constructing `Span`s.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301180,"byte_end":301219,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301220,"byte_end":301223,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The OpenTelemetry library achieves in-process context propagation of `Span`s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301224,"byte_end":301304,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ by way of the `Tracer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301305,"byte_end":301332,"line_start":13,"line_end":13,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301333,"byte_end":301336,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `Tracer` is responsible for tracking the currently active `Span`, and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301337,"byte_end":301414,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ exposes methods for creating and activating new `Spans`. The `Tracer` is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301415,"byte_end":301491,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ configured with `Propagators` which support transferring span context across","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301492,"byte_end":301572,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ process boundaries.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301573,"byte_end":301596,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301597,"byte_end":301600,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ `Tracer`s are generally expected to be used as singletons. Implementations","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301601,"byte_end":301679,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ SHOULD provide a single global default Tracer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301680,"byte_end":301730,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301731,"byte_end":301734,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Some applications may require multiple `Tracer` instances, e.g. to create","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301735,"byte_end":301812,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ `Span`s on behalf of other applications. Implementations MAY provide a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301813,"byte_end":301887,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ global registry of Tracers for such applications.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301888,"byte_end":301941,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301942,"byte_end":301945,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The `Tracer` SHOULD allow end users to configure other tracing components","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":301946,"byte_end":302023,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ that control how `Span`s are passed across process boundaries, including the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302024,"byte_end":302104,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ binary and text format `Propagator`s used to serialize `Span`s created by","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302105,"byte_end":302182,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ the `Tracer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302183,"byte_end":302200,"line_start":30,"line_end":30,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302201,"byte_end":302204,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ## In Synchronous Code","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302205,"byte_end":302231,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302232,"byte_end":302235,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Spans can be created and nested manually:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302236,"byte_end":302281,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302282,"byte_end":302285,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302286,"byte_end":302293,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer, TraceContextExt}, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302294,"byte_end":302375,"line_start":37,"line_end":37,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302376,"byte_end":302379,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let tracer = global::tracer(\"my-component\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302380,"byte_end":302428,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302429,"byte_end":302432,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let parent = tracer.start(\"foo\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302433,"byte_end":302470,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/ let parent_cx = Context::current_with_span(parent);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302471,"byte_end":302526,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"/ let child = tracer.span_builder(\"bar\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302527,"byte_end":302569,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"/     .with_parent_context(parent_cx.clone())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302570,"byte_end":302617,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/     .start(&tracer);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302618,"byte_end":302642,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302643,"byte_end":302646,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302647,"byte_end":302657,"line_start":47,"line_end":47,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302658,"byte_end":302661,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ child.end();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302662,"byte_end":302678,"line_start":49,"line_end":49,"column_start":1,"column_end":17}},{"value":"/ drop(parent_cx) // end parent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302679,"byte_end":302712,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302713,"byte_end":302720,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302721,"byte_end":302724,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Spans can also use the current thread's [`Context`] to track which span is active:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302725,"byte_end":302811,"line_start":53,"line_end":53,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302812,"byte_end":302815,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302816,"byte_end":302823,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{SpanKind, Tracer}};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302824,"byte_end":302883,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302884,"byte_end":302887,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let tracer = global::tracer(\"my-component\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302888,"byte_end":302936,"line_start":58,"line_end":58,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302937,"byte_end":302940,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Create simple spans with `in_span`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302941,"byte_end":302982,"line_start":60,"line_end":60,"column_start":1,"column_end":42}},{"value":"/ tracer.in_span(\"foo\", |_foo_cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":302983,"byte_end":303020,"line_start":61,"line_end":61,"column_start":1,"column_end":38}},{"value":"/     // parent span is active","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303021,"byte_end":303053,"line_start":62,"line_end":62,"column_start":1,"column_end":33}},{"value":"/     tracer.in_span(\"bar\", |_bar_cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303054,"byte_end":303095,"line_start":63,"line_end":63,"column_start":1,"column_end":42}},{"value":"/         // child span is now the active span and associated with the parent span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303096,"byte_end":303180,"line_start":64,"line_end":64,"column_start":1,"column_end":85}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303181,"byte_end":303192,"line_start":65,"line_end":65,"column_start":1,"column_end":12}},{"value":"/     // child has ended, parent now the active span again","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303193,"byte_end":303253,"line_start":66,"line_end":66,"column_start":1,"column_end":61}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303254,"byte_end":303261,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ // parent has ended, no active spans","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303262,"byte_end":303302,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303303,"byte_end":303306,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // -- OR --","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303307,"byte_end":303322,"line_start":70,"line_end":70,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303323,"byte_end":303326,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ // create complex spans with span builder and `with_span`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303327,"byte_end":303388,"line_start":72,"line_end":72,"column_start":1,"column_end":62}},{"value":"/ let parent_span = tracer.span_builder(\"foo\").with_kind(SpanKind::Server).start(&tracer);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303389,"byte_end":303481,"line_start":73,"line_end":73,"column_start":1,"column_end":93}},{"value":"/ tracer.with_span(parent_span, |_foo_cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303482,"byte_end":303527,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"/     // parent span is active","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303528,"byte_end":303560,"line_start":75,"line_end":75,"column_start":1,"column_end":33}},{"value":"/     let child_span = tracer.span_builder(\"bar\").with_kind(SpanKind::Client).start(&tracer);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303561,"byte_end":303656,"line_start":76,"line_end":76,"column_start":1,"column_end":96}},{"value":"/     tracer.with_span(child_span, |_bar_cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303657,"byte_end":303705,"line_start":77,"line_end":77,"column_start":1,"column_end":49}},{"value":"/         // child span is now the active span and associated with the parent span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303706,"byte_end":303790,"line_start":78,"line_end":78,"column_start":1,"column_end":85}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303791,"byte_end":303802,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/     // child has ended, parent now the active span again","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303803,"byte_end":303863,"line_start":80,"line_end":80,"column_start":1,"column_end":61}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303864,"byte_end":303871,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ // parent has ended, no active spans","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303872,"byte_end":303912,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303913,"byte_end":303920,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303921,"byte_end":303924,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ Spans can also be marked as active, and the resulting guard allows for","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":303925,"byte_end":303999,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ greater control over when the span is no longer considered active.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304000,"byte_end":304070,"line_start":86,"line_end":86,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304071,"byte_end":304074,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304075,"byte_end":304082,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer, mark_span_as_active}};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304083,"byte_end":304159,"line_start":89,"line_end":89,"column_start":1,"column_end":77}},{"value":"/ let tracer = global::tracer(\"my-component\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304160,"byte_end":304208,"line_start":90,"line_end":90,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304209,"byte_end":304212,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ let parent_span = tracer.start(\"foo\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304213,"byte_end":304255,"line_start":92,"line_end":92,"column_start":1,"column_end":43}},{"value":"/ let parent_active = mark_span_as_active(parent_span);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304256,"byte_end":304313,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304314,"byte_end":304317,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304318,"byte_end":304323,"line_start":95,"line_end":95,"column_start":1,"column_end":6}},{"value":"/     let child = tracer.start(\"bar\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304324,"byte_end":304364,"line_start":96,"line_end":96,"column_start":1,"column_end":41}},{"value":"/     let _child_active = mark_span_as_active(child);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304365,"byte_end":304420,"line_start":97,"line_end":97,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304421,"byte_end":304424,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/     // do work in the context of the child span...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304425,"byte_end":304479,"line_start":99,"line_end":99,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304480,"byte_end":304483,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/     // exiting the scope drops the guard, child is no longer active","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304484,"byte_end":304555,"line_start":101,"line_end":101,"column_start":1,"column_end":72}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304556,"byte_end":304561,"line_start":102,"line_end":102,"column_start":1,"column_end":6}},{"value":"/ // Parent is active span again","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304562,"byte_end":304596,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304597,"byte_end":304600,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ // Parent can be dropped manually, or allowed to go out of scope as well.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304601,"byte_end":304678,"line_start":105,"line_end":105,"column_start":1,"column_end":78}},{"value":"/ drop(parent_active);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304679,"byte_end":304703,"line_start":106,"line_end":106,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304704,"byte_end":304707,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ // no active span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304708,"byte_end":304729,"line_start":108,"line_end":108,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304730,"byte_end":304737,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304738,"byte_end":304741,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ## In Asynchronous Code","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304742,"byte_end":304769,"line_start":111,"line_end":111,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304770,"byte_end":304773,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ If you are instrumenting code that make use of [`std::future::Future`] or","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304774,"byte_end":304851,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/ async/await, be sure to use the [`FutureExt`] trait. This is needed because","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304852,"byte_end":304931,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/ the following example _will not_ work:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304932,"byte_end":304974,"line_start":115,"line_end":115,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304975,"byte_end":304978,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304979,"byte_end":304992,"line_start":117,"line_end":117,"column_start":1,"column_end":14}},{"value":"/ # use opentelemetry::{global, trace::{Tracer, mark_span_as_active}};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":304993,"byte_end":305065,"line_start":118,"line_end":118,"column_start":1,"column_end":73}},{"value":"/ # let tracer = global::tracer(\"foo\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305066,"byte_end":305107,"line_start":119,"line_end":119,"column_start":1,"column_end":42}},{"value":"/ # let span = tracer.start(\"foo-span\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305108,"byte_end":305150,"line_start":120,"line_end":120,"column_start":1,"column_end":43}},{"value":"/ async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305151,"byte_end":305162,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/     // Does not work","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305163,"byte_end":305187,"line_start":122,"line_end":122,"column_start":1,"column_end":25}},{"value":"/     let _g = mark_span_as_active(span);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305188,"byte_end":305231,"line_start":123,"line_end":123,"column_start":1,"column_end":44}},{"value":"/     // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305232,"byte_end":305246,"line_start":124,"line_end":124,"column_start":1,"column_end":15}},{"value":"/ };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305247,"byte_end":305253,"line_start":125,"line_end":125,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305254,"byte_end":305261,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305262,"byte_end":305265,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ The context guard `_g` will not exit until the future generated by the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305266,"byte_end":305340,"line_start":128,"line_end":128,"column_start":1,"column_end":75}},{"value":"/ `async` block is complete. Since futures can be entered and exited","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305341,"byte_end":305411,"line_start":129,"line_end":129,"column_start":1,"column_end":71}},{"value":"/ _multiple_ times without them completing, the span remains active for as","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305412,"byte_end":305488,"line_start":130,"line_end":130,"column_start":1,"column_end":77}},{"value":"/ long as the future exists, rather than only when it is polled, leading to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305489,"byte_end":305566,"line_start":131,"line_end":131,"column_start":1,"column_end":78}},{"value":"/ very confusing and incorrect output.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305567,"byte_end":305607,"line_start":132,"line_end":132,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305608,"byte_end":305611,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ In order to trace asynchronous code, the [`Future::with_context`] combinator","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305612,"byte_end":305692,"line_start":134,"line_end":134,"column_start":1,"column_end":81}},{"value":"/ can be used:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305693,"byte_end":305709,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305710,"byte_end":305713,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305714,"byte_end":305721,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"/ # async fn run() -> Result<(), ()> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305722,"byte_end":305762,"line_start":138,"line_end":138,"column_start":1,"column_end":41}},{"value":"/ use opentelemetry::{trace::FutureExt, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305763,"byte_end":305814,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let cx = Context::current();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305815,"byte_end":305847,"line_start":140,"line_end":140,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305848,"byte_end":305851,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ let my_future = async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305852,"byte_end":305879,"line_start":142,"line_end":142,"column_start":1,"column_end":28}},{"value":"/     // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305880,"byte_end":305894,"line_start":143,"line_end":143,"column_start":1,"column_end":15}},{"value":"/ };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305895,"byte_end":305901,"line_start":144,"line_end":144,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305902,"byte_end":305905,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ my_future","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305906,"byte_end":305919,"line_start":146,"line_end":146,"column_start":1,"column_end":14}},{"value":"/     .with_context(cx)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305920,"byte_end":305945,"line_start":147,"line_end":147,"column_start":1,"column_end":26}},{"value":"/     .await;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305946,"byte_end":305961,"line_start":148,"line_end":148,"column_start":1,"column_end":16}},{"value":"/ # Ok(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305962,"byte_end":305974,"line_start":149,"line_end":149,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305975,"byte_end":305982,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305983,"byte_end":305990,"line_start":151,"line_end":151,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305991,"byte_end":305994,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ [`Future::with_context`] attaches a context to the future, ensuring that the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":305995,"byte_end":306075,"line_start":153,"line_end":153,"column_start":1,"column_end":81}},{"value":"/ context's lifetime is as long as the future's.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306076,"byte_end":306126,"line_start":154,"line_end":154,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306127,"byte_end":306130,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ [`FutureExt`]: super::futures::FutureExt","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306131,"byte_end":306175,"line_start":156,"line_end":156,"column_start":1,"column_end":45}},{"value":"/ [`Future::with_context`]: super::futures::FutureExt::with_context()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306176,"byte_end":306247,"line_start":157,"line_end":157,"column_start":1,"column_end":72}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306248,"byte_end":306279,"line_start":158,"line_end":158,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":1773},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306377,"byte_end":306381,"line_start":161,"line_end":161,"column_start":10,"column_end":14},"name":"Span","qualname":"::trace::tracer::Tracer::Span","value":"type Span: Span;","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" The `Span` type used by this `Tracer`.\n","sig":null,"attributes":[{"value":"/ The `Span` type used by this `Tracer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306325,"byte_end":306367,"line_start":160,"line_end":160,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306558,"byte_end":306565,"line_start":165,"line_end":165,"column_start":8,"column_end":15},"name":"invalid","qualname":"::trace::tracer::Tracer::invalid","value":"pub fn invalid(&Self) -> Self::Span","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Returns a span with an invalid `SpanContext`. Used by functions that\n need to return a default span like `get_active_span` if no span is present.\n","sig":null,"attributes":[{"value":"/ Returns a span with an invalid `SpanContext`. Used by functions that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306394,"byte_end":306466,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"/ need to return a default span like `get_active_span` if no span is present.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306471,"byte_end":306550,"line_start":164,"line_end":164,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307979,"byte_end":307984,"line_start":190,"line_end":190,"column_start":8,"column_end":13},"name":"start","qualname":"::trace::tracer::Tracer::start","value":"pub fn start(&Self, &str) -> Self::Span","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Starts a new `Span`.","sig":null,"attributes":[{"value":"/ Starts a new `Span`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306593,"byte_end":306617,"line_start":167,"line_end":167,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306622,"byte_end":306625,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ By default the currently active `Span` is set as the new `Span`'s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306630,"byte_end":306699,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"/ parent. The `Tracer` MAY provide other default options for newly","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306704,"byte_end":306772,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"/ created `Span`s.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306777,"byte_end":306797,"line_start":171,"line_end":171,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306802,"byte_end":306805,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ `Span` creation MUST NOT set the newly created `Span` as the currently","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306810,"byte_end":306884,"line_start":173,"line_end":173,"column_start":5,"column_end":79}},{"value":"/ active `Span` by default, but this functionality MAY be offered additionally","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306889,"byte_end":306969,"line_start":174,"line_end":174,"column_start":5,"column_end":85}},{"value":"/ as a separate operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306974,"byte_end":307002,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307007,"byte_end":307010,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Each span has zero or one parent spans and zero or more child spans, which","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307015,"byte_end":307093,"line_start":177,"line_end":177,"column_start":5,"column_end":83}},{"value":"/ represent causally related operations. A tree of related spans comprises a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307098,"byte_end":307176,"line_start":178,"line_end":178,"column_start":5,"column_end":83}},{"value":"/ trace. A span is said to be a _root span_ if it does not have a parent. Each","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307181,"byte_end":307261,"line_start":179,"line_end":179,"column_start":5,"column_end":85}},{"value":"/ trace includes a single root span, which is the shared ancestor of all other","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307266,"byte_end":307346,"line_start":180,"line_end":180,"column_start":5,"column_end":85}},{"value":"/ spans in the trace. Implementations MUST provide an option to create a `Span` as","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307351,"byte_end":307435,"line_start":181,"line_end":181,"column_start":5,"column_end":89}},{"value":"/ a root span, and MUST generate a new `TraceId` for each root span created.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307440,"byte_end":307518,"line_start":182,"line_end":182,"column_start":5,"column_end":83}},{"value":"/ For a Span with a parent, the `TraceId` MUST be the same as the parent.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307523,"byte_end":307598,"line_start":183,"line_end":183,"column_start":5,"column_end":80}},{"value":"/ Also, the child span MUST inherit all `TraceState` values of its parent by default.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307603,"byte_end":307690,"line_start":184,"line_end":184,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307695,"byte_end":307698,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ A `Span` is said to have a _remote parent_ if it is the child of a `Span`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307703,"byte_end":307780,"line_start":186,"line_end":186,"column_start":5,"column_end":82}},{"value":"/ created in another process. Each propagators' deserialization must set","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307785,"byte_end":307859,"line_start":187,"line_end":187,"column_start":5,"column_end":79}},{"value":"/ `is_remote` to true on a parent `SpanContext` so `Span` creation knows if the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307864,"byte_end":307945,"line_start":188,"line_end":188,"column_start":5,"column_end":86}},{"value":"/ parent is remote.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":307950,"byte_end":307971,"line_start":189,"line_end":189,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309495,"byte_end":309513,"line_start":217,"line_end":217,"column_start":8,"column_end":26},"name":"start_with_context","qualname":"::trace::tracer::Tracer::start_with_context","value":"pub fn start_with_context(&Self, &str, Context) -> Self::Span","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Starts a new `Span` with a given context","sig":null,"attributes":[{"value":"/ Starts a new `Span` with a given context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308089,"byte_end":308133,"line_start":194,"line_end":194,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308138,"byte_end":308141,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ By default the currently active `Span` is set as the new `Span`'s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308146,"byte_end":308215,"line_start":196,"line_end":196,"column_start":5,"column_end":74}},{"value":"/ parent. The `Tracer` MAY provide other default options for newly","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308220,"byte_end":308288,"line_start":197,"line_end":197,"column_start":5,"column_end":73}},{"value":"/ created `Span`s.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308293,"byte_end":308313,"line_start":198,"line_end":198,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308318,"byte_end":308321,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ `Span` creation MUST NOT set the newly created `Span` as the currently","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308326,"byte_end":308400,"line_start":200,"line_end":200,"column_start":5,"column_end":79}},{"value":"/ active `Span` by default, but this functionality MAY be offered additionally","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308405,"byte_end":308485,"line_start":201,"line_end":201,"column_start":5,"column_end":85}},{"value":"/ as a separate operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308490,"byte_end":308518,"line_start":202,"line_end":202,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308523,"byte_end":308526,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Each span has zero or one parent spans and zero or more child spans, which","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308531,"byte_end":308609,"line_start":204,"line_end":204,"column_start":5,"column_end":83}},{"value":"/ represent causally related operations. A tree of related spans comprises a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308614,"byte_end":308692,"line_start":205,"line_end":205,"column_start":5,"column_end":83}},{"value":"/ trace. A span is said to be a _root span_ if it does not have a parent. Each","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308697,"byte_end":308777,"line_start":206,"line_end":206,"column_start":5,"column_end":85}},{"value":"/ trace includes a single root span, which is the shared ancestor of all other","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308782,"byte_end":308862,"line_start":207,"line_end":207,"column_start":5,"column_end":85}},{"value":"/ spans in the trace. Implementations MUST provide an option to create a `Span` as","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308867,"byte_end":308951,"line_start":208,"line_end":208,"column_start":5,"column_end":89}},{"value":"/ a root span, and MUST generate a new `TraceId` for each root span created.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":308956,"byte_end":309034,"line_start":209,"line_end":209,"column_start":5,"column_end":83}},{"value":"/ For a Span with a parent, the `TraceId` MUST be the same as the parent.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309039,"byte_end":309114,"line_start":210,"line_end":210,"column_start":5,"column_end":80}},{"value":"/ Also, the child span MUST inherit all `TraceState` values of its parent by default.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309119,"byte_end":309206,"line_start":211,"line_end":211,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309211,"byte_end":309214,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ A `Span` is said to have a _remote parent_ if it is the child of a `Span`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309219,"byte_end":309296,"line_start":213,"line_end":213,"column_start":5,"column_end":82}},{"value":"/ created in another process. Each propagators' deserialization must set","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309301,"byte_end":309375,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ `is_remote` to true on a parent `SpanContext` so `Span` creation knows if the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309380,"byte_end":309461,"line_start":215,"line_end":215,"column_start":5,"column_end":86}},{"value":"/ parent is remote.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309466,"byte_end":309487,"line_start":216,"line_end":216,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309700,"byte_end":309712,"line_start":222,"line_end":222,"column_start":8,"column_end":20},"name":"span_builder","qualname":"::trace::tracer::Tracer::span_builder","value":"pub fn span_builder(&Self, &str) -> SpanBuilder","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Creates a span builder","sig":null,"attributes":[{"value":"/ Creates a span builder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309571,"byte_end":309597,"line_start":219,"line_end":219,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309602,"byte_end":309605,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ An ergonomic way for attributes to be configured before the `Span` is started.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309610,"byte_end":309692,"line_start":221,"line_end":221,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309799,"byte_end":309804,"line_start":225,"line_end":225,"column_start":8,"column_end":13},"name":"build","qualname":"::trace::tracer::Tracer::build","value":"pub fn build(&Self, SpanBuilder) -> Self::Span","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Create a span from a `SpanBuilder`\n","sig":null,"attributes":[{"value":"/ Create a span from a `SpanBuilder`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309753,"byte_end":309791,"line_start":224,"line_end":224,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310874,"byte_end":310881,"line_start":254,"line_end":254,"column_start":8,"column_end":15},"name":"in_span","qualname":"::trace::tracer::Tracer::in_span","value":"pub fn in_span<T, F>(&Self, &'static str, F) -> T where F: FnOnce(Context) ->\nT, Self::Span: Send + Sync","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Start a new span and execute the given closure with reference to the span's\n context.","sig":null,"attributes":[{"value":"/ Start a new span and execute the given closure with reference to the span's","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309854,"byte_end":309933,"line_start":227,"line_end":227,"column_start":5,"column_end":84}},{"value":"/ context.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309938,"byte_end":309950,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309955,"byte_end":309958,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This method starts a new span and sets it as the active span for the given","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":309963,"byte_end":310041,"line_start":230,"line_end":230,"column_start":5,"column_end":83}},{"value":"/ function. It then executes the body. It closes the span before returning the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310046,"byte_end":310126,"line_start":231,"line_end":231,"column_start":5,"column_end":85}},{"value":"/ execution result.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310131,"byte_end":310152,"line_start":232,"line_end":232,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310157,"byte_end":310160,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310165,"byte_end":310179,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310184,"byte_end":310187,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310192,"byte_end":310199,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer, get_active_span}, KeyValue};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310204,"byte_end":310286,"line_start":237,"line_end":237,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310291,"byte_end":310294,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ fn my_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310299,"byte_end":310321,"line_start":239,"line_end":239,"column_start":5,"column_end":27}},{"value":"/     // start an active span in one function","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310326,"byte_end":310373,"line_start":240,"line_end":240,"column_start":5,"column_end":52}},{"value":"/     global::tracer(\"my-component\").in_span(\"span-name\", |_cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310378,"byte_end":310445,"line_start":241,"line_end":241,"column_start":5,"column_end":72}},{"value":"/         // anything happening in functions we call can still access the active span...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310450,"byte_end":310540,"line_start":242,"line_end":242,"column_start":5,"column_end":95}},{"value":"/         my_other_function();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310545,"byte_end":310577,"line_start":243,"line_end":243,"column_start":5,"column_end":37}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310582,"byte_end":310592,"line_start":244,"line_end":244,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310597,"byte_end":310602,"line_start":245,"line_end":245,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310607,"byte_end":310610,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ fn my_other_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310615,"byte_end":310643,"line_start":247,"line_end":247,"column_start":5,"column_end":33}},{"value":"/     // call methods on the current span from","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310648,"byte_end":310696,"line_start":248,"line_end":248,"column_start":5,"column_end":53}},{"value":"/     get_active_span(|span| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310701,"byte_end":310733,"line_start":249,"line_end":249,"column_start":5,"column_end":37}},{"value":"/         span.add_event(\"An event!\".to_string(), vec![KeyValue::new(\"happened\", true)]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310738,"byte_end":310829,"line_start":250,"line_end":250,"column_start":5,"column_end":96}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310834,"byte_end":310844,"line_start":251,"line_end":251,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310849,"byte_end":310854,"line_start":252,"line_end":252,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":310859,"byte_end":310866,"line_start":253,"line_end":253,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312431,"byte_end":312440,"line_start":295,"line_end":295,"column_start":8,"column_end":17},"name":"with_span","qualname":"::trace::tracer::Tracer::with_span","value":"pub fn with_span<T, F>(&Self, Self::Span, F) -> T where F: FnOnce(Context) ->\nT, Self::Span: Send + Sync","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Start a new span and execute the given closure with reference to the span's\n context.","sig":null,"attributes":[{"value":"/ Start a new span and execute the given closure with reference to the span's","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311163,"byte_end":311242,"line_start":265,"line_end":265,"column_start":5,"column_end":84}},{"value":"/ context.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311247,"byte_end":311259,"line_start":266,"line_end":266,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311264,"byte_end":311267,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ This method starts a new span and sets it as the active span for the given","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311272,"byte_end":311350,"line_start":268,"line_end":268,"column_start":5,"column_end":83}},{"value":"/ function. It then executes the body. It closes the span before returning the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311355,"byte_end":311435,"line_start":269,"line_end":269,"column_start":5,"column_end":85}},{"value":"/ execution result.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311440,"byte_end":311461,"line_start":270,"line_end":270,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311466,"byte_end":311469,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311474,"byte_end":311488,"line_start":272,"line_end":272,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311493,"byte_end":311496,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311501,"byte_end":311508,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{global, trace::{Span, SpanKind, Tracer, get_active_span}, KeyValue};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311513,"byte_end":311605,"line_start":275,"line_end":275,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311610,"byte_end":311613,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ fn my_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311618,"byte_end":311640,"line_start":277,"line_end":277,"column_start":5,"column_end":27}},{"value":"/     let tracer = global::tracer(\"my-component\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311645,"byte_end":311697,"line_start":278,"line_end":278,"column_start":5,"column_end":57}},{"value":"/     // start a span with custom attributes via span bulder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311702,"byte_end":311764,"line_start":279,"line_end":279,"column_start":5,"column_end":67}},{"value":"/     let span = tracer.span_builder(\"span-name\").with_kind(SpanKind::Server).start(&tracer);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311769,"byte_end":311864,"line_start":280,"line_end":280,"column_start":5,"column_end":100}},{"value":"/     // Mark the span as active for the duration of the closure","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311869,"byte_end":311935,"line_start":281,"line_end":281,"column_start":5,"column_end":71}},{"value":"/     global::tracer(\"my-component\").with_span(span, |_cx| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":311940,"byte_end":312002,"line_start":282,"line_end":282,"column_start":5,"column_end":67}},{"value":"/         // anything happening in functions we call can still access the active span...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312007,"byte_end":312097,"line_start":283,"line_end":283,"column_start":5,"column_end":95}},{"value":"/         my_other_function();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312102,"byte_end":312134,"line_start":284,"line_end":284,"column_start":5,"column_end":37}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312139,"byte_end":312149,"line_start":285,"line_end":285,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312154,"byte_end":312159,"line_start":286,"line_end":286,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312164,"byte_end":312167,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ fn my_other_function() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312172,"byte_end":312200,"line_start":288,"line_end":288,"column_start":5,"column_end":33}},{"value":"/     // call methods on the current span from","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312205,"byte_end":312253,"line_start":289,"line_end":289,"column_start":5,"column_end":53}},{"value":"/     get_active_span(|span| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312258,"byte_end":312290,"line_start":290,"line_end":290,"column_start":5,"column_end":37}},{"value":"/         span.add_event(\"An event!\".to_string(), vec![KeyValue::new(\"happened\", true)]);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312295,"byte_end":312386,"line_start":291,"line_end":291,"column_start":5,"column_end":96}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312391,"byte_end":312401,"line_start":292,"line_end":292,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312406,"byte_end":312411,"line_start":293,"line_end":293,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312416,"byte_end":312423,"line_start":294,"line_end":294,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2777},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313417,"byte_end":313428,"line_start":331,"line_end":331,"column_start":12,"column_end":23},"name":"SpanBuilder","qualname":"::trace::tracer::SpanBuilder","value":"SpanBuilder { parent_context, trace_id, span_id, span_kind, name, start_time, end_time, attributes, message_events, links, status_code, status_message, sampling_result }","parent":null,"children":[{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2780},{"krate":0,"index":2781},{"krate":0,"index":2782},{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790}],"decl_id":null,"docs":" `SpanBuilder` allows span attributes to be configured before the span\n has started.","sig":null,"attributes":[{"value":"/ `SpanBuilder` allows span attributes to be configured before the span","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312681,"byte_end":312754,"line_start":306,"line_end":306,"column_start":1,"column_end":74}},{"value":"/ has started.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312755,"byte_end":312771,"line_start":307,"line_end":307,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312772,"byte_end":312775,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312776,"byte_end":312787,"line_start":309,"line_end":309,"column_start":1,"column_end":12}},{"value":"/ use opentelemetry::{","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312788,"byte_end":312812,"line_start":310,"line_end":310,"column_start":1,"column_end":25}},{"value":"/     global,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312813,"byte_end":312828,"line_start":311,"line_end":311,"column_start":1,"column_end":16}},{"value":"/     trace::{TracerProvider, SpanBuilder, SpanKind, Tracer},","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312829,"byte_end":312892,"line_start":312,"line_end":312,"column_start":1,"column_end":64}},{"value":"/ };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312893,"byte_end":312899,"line_start":313,"line_end":313,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312900,"byte_end":312903,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ let tracer = global::tracer(\"example-tracer\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312904,"byte_end":312954,"line_start":315,"line_end":315,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312955,"byte_end":312958,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ // The builder can be used to create a span directly with the tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":312959,"byte_end":313031,"line_start":317,"line_end":317,"column_start":1,"column_end":73}},{"value":"/ let _span = tracer.build(SpanBuilder {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313032,"byte_end":313074,"line_start":318,"line_end":318,"column_start":1,"column_end":43}},{"value":"/     name: \"example-span-name\".into(),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313075,"byte_end":313116,"line_start":319,"line_end":319,"column_start":1,"column_end":42}},{"value":"/     span_kind: Some(SpanKind::Server),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313117,"byte_end":313159,"line_start":320,"line_end":320,"column_start":1,"column_end":43}},{"value":"/     ..Default::default()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313160,"byte_end":313188,"line_start":321,"line_end":321,"column_start":1,"column_end":29}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313189,"byte_end":313196,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313197,"byte_end":313200,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ // Or used with builder pattern","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313201,"byte_end":313236,"line_start":324,"line_end":324,"column_start":1,"column_end":36}},{"value":"/ let _span = tracer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313237,"byte_end":313259,"line_start":325,"line_end":325,"column_start":1,"column_end":23}},{"value":"/     .span_builder(\"example-span-name\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313260,"byte_end":313302,"line_start":326,"line_end":326,"column_start":1,"column_end":43}},{"value":"/     .with_kind(SpanKind::Server)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313303,"byte_end":313339,"line_start":327,"line_end":327,"column_start":1,"column_end":37}},{"value":"/     .start(&tracer);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313340,"byte_end":313364,"line_start":328,"line_end":328,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313365,"byte_end":313372,"line_start":329,"line_end":329,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2778},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313464,"byte_end":313478,"line_start":333,"line_end":333,"column_start":9,"column_end":23},"name":"parent_context","qualname":"::trace::tracer::SpanBuilder::parent_context","value":"std::option::Option<context::Context>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Parent `Context`\n","sig":null,"attributes":[{"value":"/ Parent `Context`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313435,"byte_end":313455,"line_start":332,"line_end":332,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2779},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313578,"byte_end":313586,"line_start":335,"line_end":335,"column_start":9,"column_end":17},"name":"trace_id","qualname":"::trace::tracer::SpanBuilder::trace_id","value":"std::option::Option<trace::span_context::TraceId>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Trace id, useful for integrations with external tracing systems.\n","sig":null,"attributes":[{"value":"/ Trace id, useful for integrations with external tracing systems.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313501,"byte_end":313569,"line_start":334,"line_end":334,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2780},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313685,"byte_end":313692,"line_start":337,"line_end":337,"column_start":9,"column_end":16},"name":"span_id","qualname":"::trace::tracer::SpanBuilder::span_id","value":"std::option::Option<trace::span_context::SpanId>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span id, useful for integrations with external tracing systems.\n","sig":null,"attributes":[{"value":"/ Span id, useful for integrations with external tracing systems.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313609,"byte_end":313676,"line_start":336,"line_end":336,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":2781},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313736,"byte_end":313745,"line_start":339,"line_end":339,"column_start":9,"column_end":18},"name":"span_kind","qualname":"::trace::tracer::SpanBuilder::span_kind","value":"std::option::Option<trace::span::SpanKind>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span kind\n","sig":null,"attributes":[{"value":"/ Span kind","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313714,"byte_end":313727,"line_start":338,"line_end":338,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2782},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313791,"byte_end":313795,"line_start":341,"line_end":341,"column_start":9,"column_end":13},"name":"name","qualname":"::trace::tracer::SpanBuilder::name","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span name\n","sig":null,"attributes":[{"value":"/ Span name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313769,"byte_end":313782,"line_start":340,"line_end":340,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2783},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313848,"byte_end":313858,"line_start":343,"line_end":343,"column_start":9,"column_end":19},"name":"start_time","qualname":"::trace::tracer::SpanBuilder::start_time","value":"std::option::Option<std::time::SystemTime>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span start time\n","sig":null,"attributes":[{"value":"/ Span start time","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313820,"byte_end":313839,"line_start":342,"line_end":342,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2784},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313910,"byte_end":313918,"line_start":345,"line_end":345,"column_start":9,"column_end":17},"name":"end_time","qualname":"::trace::tracer::SpanBuilder::end_time","value":"std::option::Option<std::time::SystemTime>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span end time\n","sig":null,"attributes":[{"value":"/ Span end time","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313884,"byte_end":313901,"line_start":344,"line_end":344,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2785},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313972,"byte_end":313982,"line_start":347,"line_end":347,"column_start":9,"column_end":19},"name":"attributes","qualname":"::trace::tracer::SpanBuilder::attributes","value":"std::option::Option<std::vec::Vec<core::KeyValue>>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span attributes\n","sig":null,"attributes":[{"value":"/ Span attributes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":313944,"byte_end":313963,"line_start":346,"line_end":346,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2786},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314043,"byte_end":314057,"line_start":349,"line_end":349,"column_start":9,"column_end":23},"name":"message_events","qualname":"::trace::tracer::SpanBuilder::message_events","value":"std::option::Option<std::vec::Vec<trace::event::Event>>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span Message events\n","sig":null,"attributes":[{"value":"/ Span Message events","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314011,"byte_end":314034,"line_start":348,"line_end":348,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2787},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314106,"byte_end":314111,"line_start":351,"line_end":351,"column_start":9,"column_end":14},"name":"links","qualname":"::trace::tracer::SpanBuilder::links","value":"std::option::Option<std::vec::Vec<trace::link::Link>>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span Links\n","sig":null,"attributes":[{"value":"/ Span Links","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314083,"byte_end":314097,"line_start":350,"line_end":350,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2788},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314165,"byte_end":314176,"line_start":353,"line_end":353,"column_start":9,"column_end":20},"name":"status_code","qualname":"::trace::tracer::SpanBuilder::status_code","value":"std::option::Option<trace::span::StatusCode>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span status code\n","sig":null,"attributes":[{"value":"/ Span status code","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314136,"byte_end":314156,"line_start":352,"line_end":352,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2789},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314234,"byte_end":314248,"line_start":355,"line_end":355,"column_start":9,"column_end":23},"name":"status_message","qualname":"::trace::tracer::SpanBuilder::status_message","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Span status message\n","sig":null,"attributes":[{"value":"/ Span status message","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314202,"byte_end":314225,"line_start":354,"line_end":354,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2790},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314298,"byte_end":314313,"line_start":357,"line_end":357,"column_start":9,"column_end":24},"name":"sampling_result","qualname":"::trace::tracer::SpanBuilder::sampling_result","value":"std::option::Option<sdk::trace::sampler::SamplingResult>","parent":{"krate":0,"index":2777},"children":[],"decl_id":null,"docs":" Sampling result\n","sig":null,"attributes":[{"value":"/ Sampling result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314270,"byte_end":314289,"line_start":356,"line_end":356,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314459,"byte_end":314468,"line_start":363,"line_end":363,"column_start":12,"column_end":21},"name":"from_name","qualname":"<SpanBuilder>::from_name","value":"pub fn from_name<T: Into<Cow>>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new span builder from a span name\n","sig":null,"attributes":[{"value":"/ Create a new span builder from a span name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314401,"byte_end":314447,"line_start":362,"line_end":362,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314992,"byte_end":315011,"line_start":382,"line_end":382,"column_start":12,"column_end":31},"name":"with_parent_context","qualname":"<SpanBuilder>::with_parent_context","value":"pub fn with_parent_context(Self, Context) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign parent context\n","sig":null,"attributes":[{"value":"/ Assign parent context","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314955,"byte_end":314980,"line_start":381,"line_end":381,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315232,"byte_end":315245,"line_start":390,"line_end":390,"column_start":12,"column_end":25},"name":"with_trace_id","qualname":"<SpanBuilder>::with_trace_id","value":"pub fn with_trace_id(Self, TraceId) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify trace id to use if no parent context exists\n","sig":null,"attributes":[{"value":"/ Specify trace id to use if no parent context exists","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315165,"byte_end":315220,"line_start":389,"line_end":389,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315411,"byte_end":315423,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"with_span_id","qualname":"<SpanBuilder>::with_span_id","value":"pub fn with_span_id(Self, SpanId) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign span id\n","sig":null,"attributes":[{"value":"/ Assign span id","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315381,"byte_end":315399,"line_start":397,"line_end":397,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315587,"byte_end":315596,"line_start":406,"line_end":406,"column_start":12,"column_end":21},"name":"with_kind","qualname":"<SpanBuilder>::with_kind","value":"pub fn with_kind(Self, SpanKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign span kind\n","sig":null,"attributes":[{"value":"/ Assign span kind","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315555,"byte_end":315575,"line_start":405,"line_end":405,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315774,"byte_end":315789,"line_start":414,"line_end":414,"column_start":12,"column_end":27},"name":"with_start_time","qualname":"<SpanBuilder>::with_start_time","value":"pub fn with_start_time<T: Into<SystemTime>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign span start time\n","sig":null,"attributes":[{"value":"/ Assign span start time","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315736,"byte_end":315762,"line_start":413,"line_end":413,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315989,"byte_end":316002,"line_start":422,"line_end":422,"column_start":12,"column_end":25},"name":"with_end_time","qualname":"<SpanBuilder>::with_end_time","value":"pub fn with_end_time<T: Into<SystemTime>>(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign span end time\n","sig":null,"attributes":[{"value":"/ Assign span end time","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":315953,"byte_end":315977,"line_start":421,"line_end":421,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316198,"byte_end":316213,"line_start":430,"line_end":430,"column_start":12,"column_end":27},"name":"with_attributes","qualname":"<SpanBuilder>::with_attributes","value":"pub fn with_attributes(Self, Vec<KeyValue>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign span attributes\n","sig":null,"attributes":[{"value":"/ Assign span attributes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316160,"byte_end":316186,"line_start":429,"line_end":429,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316398,"byte_end":316417,"line_start":438,"line_end":438,"column_start":12,"column_end":31},"name":"with_message_events","qualname":"<SpanBuilder>::with_message_events","value":"pub fn with_message_events(Self, Vec<Event>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign message events\n","sig":null,"attributes":[{"value":"/ Assign message events","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316361,"byte_end":316386,"line_start":437,"line_end":437,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316602,"byte_end":316612,"line_start":446,"line_end":446,"column_start":12,"column_end":22},"name":"with_links","qualname":"<SpanBuilder>::with_links","value":"pub fn with_links(Self, Vec<Link>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign links\n","sig":null,"attributes":[{"value":"/ Assign links","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316574,"byte_end":316590,"line_start":445,"line_end":445,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316775,"byte_end":316791,"line_start":454,"line_end":454,"column_start":12,"column_end":28},"name":"with_status_code","qualname":"<SpanBuilder>::with_status_code","value":"pub fn with_status_code(Self, StatusCode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign status code\n","sig":null,"attributes":[{"value":"/ Assign status code","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316741,"byte_end":316763,"line_start":453,"line_end":453,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316962,"byte_end":316981,"line_start":462,"line_end":462,"column_start":12,"column_end":31},"name":"with_status_message","qualname":"<SpanBuilder>::with_status_message","value":"pub fn with_status_message(Self, String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign status message\n","sig":null,"attributes":[{"value":"/ Assign status message","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":316925,"byte_end":316950,"line_start":461,"line_end":461,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":317158,"byte_end":317178,"line_start":470,"line_end":470,"column_start":12,"column_end":32},"name":"with_sampling_result","qualname":"<SpanBuilder>::with_sampling_result","value":"pub fn with_sampling_result(Self, sdk::trace::SamplingResult) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign sampling result\n","sig":null,"attributes":[{"value":"/ Assign sampling result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":317120,"byte_end":317146,"line_start":469,"line_end":469,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":317430,"byte_end":317435,"line_start":478,"line_end":478,"column_start":12,"column_end":17},"name":"start","qualname":"<SpanBuilder>::start","value":"pub fn start<T: Tracer>(Self, &T) -> T::Span","parent":null,"children":[],"decl_id":null,"docs":" Builds a span with the given tracer from this configuration.\n","sig":null,"attributes":[{"value":"/ Builds a span with the given tracer from this configuration.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":317354,"byte_end":317418,"line_start":477,"line_end":477,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1891},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251141,"byte_end":251152,"line_start":146,"line_end":146,"column_start":10,"column_end":21},"name":"TraceResult","qualname":"::trace::TraceResult","value":"Result<T, TraceError>","parent":null,"children":[],"decl_id":null,"docs":" Describe the result of operations in tracing API.\n","sig":null,"attributes":[{"value":"/ Describe the result of operations in tracing API.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251078,"byte_end":251131,"line_start":145,"line_end":145,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2816},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251414,"byte_end":251426,"line_start":154,"line_end":154,"column_start":5,"column_end":17},"name":"ExportFailed","qualname":"::trace::TraceError::ExportFailed","value":"TraceError::ExportFailed(Box<dyn ExportError>)","parent":{"krate":0,"index":2797},"children":[],"decl_id":null,"docs":" Export failed with the error returned by the exporter\n","sig":null,"attributes":[{"value":"/ Export failed with the error returned by the exporter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251288,"byte_end":251345,"line_start":152,"line_end":152,"column_start":5,"column_end":62}},{"value":"error(\"Exporter {} failed with {0}\",.0.exporter_name())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251350,"byte_end":251409,"line_start":153,"line_end":153,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2819},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251609,"byte_end":251623,"line_start":158,"line_end":158,"column_start":5,"column_end":19},"name":"ExportTimedOut","qualname":"::trace::TraceError::ExportTimedOut","value":"TraceError::ExportTimedOut(time::Duration)","parent":{"krate":0,"index":2797},"children":[],"decl_id":null,"docs":" Export failed to finish after certain period and processor stopped the export.\n","sig":null,"attributes":[{"value":"/ Export failed to finish after certain period and processor stopped the export.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251455,"byte_end":251537,"line_start":156,"line_end":156,"column_start":5,"column_end":87}},{"value":"error(\"Exporting timed out after {} seconds\",.0.as_secs())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251542,"byte_end":251604,"line_start":157,"line_end":157,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2822},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251746,"byte_end":251751,"line_start":162,"line_end":162,"column_start":5,"column_end":10},"name":"Other","qualname":"::trace::TraceError::Other","value":"TraceError::Other(Box<dyn std::error::Error + Send + Sync + 'static>)","parent":{"krate":0,"index":2797},"children":[],"decl_id":null,"docs":" Other errors propagated from trace SDK that weren't covered above\n","sig":null,"attributes":[{"value":"/ Other errors propagated from trace SDK that weren't covered above","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251646,"byte_end":251715,"line_start":160,"line_end":160,"column_start":5,"column_end":74}},{"value":"error(transparent)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251720,"byte_end":251741,"line_start":161,"line_end":161,"column_start":5,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":2797},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251271,"byte_end":251281,"line_start":151,"line_end":151,"column_start":10,"column_end":20},"name":"TraceError","qualname":"::trace::TraceError","value":"pub enum TraceError {\n    ExportFailed(Box<dyn ExportError>),\n    ExportTimedOut(time::Duration),\n    Other(Box<dyn std::error::Error + Send + Sync + 'static>),\n}","parent":null,"children":[{"krate":0,"index":2816},{"krate":0,"index":2819},{"krate":0,"index":2822}],"decl_id":null,"docs":" Errors returned by the trace API.\n","sig":null,"attributes":[{"value":"/ Errors returned by the trace API.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251182,"byte_end":251219,"line_start":148,"line_end":148,"column_start":1,"column_end":38}},{"value":"non_exhaustive","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251244,"byte_end":251261,"line_start":150,"line_end":150,"column_start":1,"column_end":18}}]}],"impls":[{"id":3,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15605,"byte_end":15610,"line_start":30,"line_end":30,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":19446,"byte_end":19455,"line_start":17,"line_end":17,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":21775,"byte_end":21786,"line_start":77,"line_end":77,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23926,"byte_end":23927,"line_start":129,"line_end":129,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25275,"byte_end":25276,"line_start":166,"line_end":166,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":26014,"byte_end":26034,"line_start":192,"line_end":192,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":26464,"byte_end":26484,"line_start":206,"line_end":206,"column_start":32,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39328,"byte_end":39347,"line_start":23,"line_end":23,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39625,"byte_end":39644,"line_start":32,"line_end":32,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39792,"byte_end":39811,"line_start":39,"line_end":39,"column_start":18,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48512,"byte_end":48527,"line_start":55,"line_end":55,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48754,"byte_end":48769,"line_start":66,"line_end":66,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":49403,"byte_end":49418,"line_start":89,"line_end":89,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50444,"byte_end":50452,"line_start":121,"line_end":121,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50674,"byte_end":50682,"line_start":132,"line_end":132,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2016}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":51414,"byte_end":51419,"line_start":159,"line_end":159,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52299,"byte_end":52321,"line_start":20,"line_end":20,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56703,"byte_end":56720,"line_start":105,"line_end":105,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56873,"byte_end":56890,"line_start":112,"line_end":112,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69195,"byte_end":69221,"line_start":67,"line_end":67,"column_start":6,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69827,"byte_end":69853,"line_start":86,"line_end":86,"column_start":28,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":78372,"byte_end":78394,"line_start":47,"line_end":47,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":80685,"byte_end":80707,"line_start":116,"line_end":116,"column_start":28,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91666,"byte_end":91674,"line_start":34,"line_end":34,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91850,"byte_end":91858,"line_start":43,"line_end":43,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95124,"byte_end":95132,"line_start":154,"line_end":154,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95266,"byte_end":95274,"line_start":162,"line_end":162,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95575,"byte_end":95579,"line_start":175,"line_end":175,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100572,"byte_end":100578,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101857,"byte_end":101863,"line_start":70,"line_end":70,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":103664,"byte_end":103678,"line_start":20,"line_end":20,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":106579,"byte_end":106587,"line_start":116,"line_end":116,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":106721,"byte_end":106735,"line_start":124,"line_end":124,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":107256,"byte_end":107260,"line_start":146,"line_end":146,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":108520,"byte_end":108532,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110089,"byte_end":110097,"line_start":69,"line_end":69,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110257,"byte_end":110269,"line_start":77,"line_end":77,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110621,"byte_end":110625,"line_start":90,"line_end":90,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110790,"byte_end":110802,"line_start":98,"line_end":98,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":114211,"byte_end":114226,"line_start":43,"line_end":43,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","byte_start":111825,"byte_end":111836,"line_start":15,"line_end":15,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":116750,"byte_end":116769,"line_start":28,"line_end":28,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117137,"byte_end":117151,"line_start":44,"line_end":44,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117237,"byte_end":117251,"line_start":50,"line_end":50,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117837,"byte_end":117851,"line_start":72,"line_end":72,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":118659,"byte_end":118666,"line_start":97,"line_end":97,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124564,"byte_end":124571,"line_start":100,"line_end":100,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":135472,"byte_end":135476,"line_start":56,"line_end":56,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":136215,"byte_end":136219,"line_start":85,"line_end":85,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":138768,"byte_end":138777,"line_start":155,"line_end":155,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":140496,"byte_end":140505,"line_start":194,"line_end":194,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154591,"byte_end":154610,"line_start":110,"line_end":110,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154794,"byte_end":154813,"line_start":118,"line_end":118,"column_start":24,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157596,"byte_end":157614,"line_start":200,"line_end":200,"column_start":21,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157838,"byte_end":157856,"line_start":208,"line_end":208,"column_start":24,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":916},{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":159591,"byte_end":159609,"line_start":257,"line_end":257,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":165869,"byte_end":165880,"line_start":416,"line_end":416,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":167951,"byte_end":167976,"line_start":474,"line_end":474,"column_start":12,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":178680,"byte_end":178686,"line_start":33,"line_end":33,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":179064,"byte_end":179070,"line_start":44,"line_end":44,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":181521,"byte_end":181527,"line_start":122,"line_end":122,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195985,"byte_end":195992,"line_start":91,"line_end":91,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1154},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":202105,"byte_end":202109,"line_start":270,"line_end":270,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":202519,"byte_end":202526,"line_start":287,"line_end":287,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":202858,"byte_end":202865,"line_start":297,"line_end":297,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203142,"byte_end":203149,"line_start":307,"line_end":307,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":205234,"byte_end":205241,"line_start":375,"line_end":375,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206580,"byte_end":206595,"line_start":416,"line_end":416,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206721,"byte_end":206736,"line_start":423,"line_end":423,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206858,"byte_end":206873,"line_start":429,"line_end":429,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207358,"byte_end":207374,"line_start":447,"line_end":447,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207758,"byte_end":207774,"line_start":463,"line_end":463,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212815,"byte_end":212822,"line_start":81,"line_end":81,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1255},{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219788,"byte_end":219795,"line_start":297,"line_end":297,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1260}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":220273,"byte_end":220285,"line_start":313,"line_end":313,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":221158,"byte_end":221166,"line_start":337,"line_end":337,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":222806,"byte_end":222809,"line_start":12,"line_end":12,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1292},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224330,"byte_end":224333,"line_start":69,"line_end":69,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224481,"byte_end":224484,"line_start":76,"line_end":76,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224623,"byte_end":224629,"line_start":83,"line_end":83,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224770,"byte_end":224773,"line_start":90,"line_end":90,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225243,"byte_end":225248,"line_start":110,"line_end":110,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226943,"byte_end":226948,"line_start":176,"line_end":176,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":227860,"byte_end":227865,"line_start":214,"line_end":214,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228043,"byte_end":228048,"line_start":221,"line_end":221,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228214,"byte_end":228219,"line_start":228,"line_end":228,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228972,"byte_end":228980,"line_start":250,"line_end":250,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229371,"byte_end":229375,"line_start":268,"line_end":268,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229621,"byte_end":229625,"line_start":280,"line_end":280,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244766,"byte_end":244775,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244960,"byte_end":244969,"line_start":66,"line_end":66,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1407},{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241389,"byte_end":241396,"line_start":185,"line_end":185,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241615,"byte_end":241622,"line_start":192,"line_end":192,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1425}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254888,"byte_end":254895,"line_start":62,"line_end":62,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1462},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258675,"byte_end":258680,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1487},{"krate":0,"index":1489}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":259945,"byte_end":259946,"line_start":27,"line_end":27,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":260004,"byte_end":260015,"line_start":29,"line_end":29,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1513},{"krate":0,"index":1514}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":260315,"byte_end":260326,"line_start":40,"line_end":40,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1517},{"krate":0,"index":1518}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":260646,"byte_end":260657,"line_start":50,"line_end":50,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263582,"byte_end":263586,"line_start":15,"line_end":15,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":264630,"byte_end":264648,"line_start":21,"line_end":21,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":264805,"byte_end":264823,"line_start":28,"line_end":28,"column_start":32,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265171,"byte_end":265179,"line_start":43,"line_end":43,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265247,"byte_end":265255,"line_start":49,"line_end":49,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1598}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265619,"byte_end":265627,"line_start":64,"line_end":64,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":266790,"byte_end":266800,"line_start":117,"line_end":117,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":266932,"byte_end":266942,"line_start":124,"line_end":124,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268479,"byte_end":268495,"line_start":173,"line_end":173,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268653,"byte_end":268669,"line_start":181,"line_end":181,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2671}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283600,"byte_end":283608,"line_start":228,"line_end":228,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284445,"byte_end":284455,"line_start":254,"line_end":254,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286466,"byte_end":286473,"line_start":36,"line_end":36,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287723,"byte_end":287729,"line_start":79,"line_end":79,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1691}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":289152,"byte_end":289162,"line_start":127,"line_end":127,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1702},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1709}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":294639,"byte_end":294649,"line_start":287,"line_end":287,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1713},{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":295699,"byte_end":295710,"line_start":320,"line_end":320,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314383,"byte_end":314394,"line_start":361,"line_end":361,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251836,"byte_end":251846,"line_start":165,"line_end":165,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251996,"byte_end":252006,"line_start":174,"line_end":174,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1898}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":252145,"byte_end":252155,"line_start":180,"line_end":180,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":252267,"byte_end":252277,"line_start":186,"line_end":186,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":252409,"byte_end":252419,"line_start":192,"line_end":192,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8270,"byte_end":8276,"line_start":175,"line_end":175,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8286,"byte_end":8289,"line_start":176,"line_end":176,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":169}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38151,"byte_end":38154,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":170}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38164,"byte_end":38170,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":196}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41805,"byte_end":41810,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":197}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42334,"byte_end":42340,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":236}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38180,"byte_end":38195,"line_start":11,"line_end":11,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":297}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38376,"byte_end":38387,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":300}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38397,"byte_end":38405,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":453}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/mod.rs","byte_start":38490,"byte_end":38495,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":510}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8369,"byte_end":8376,"line_start":182,"line_end":182,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1116}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8514,"byte_end":8521,"line_start":192,"line_end":192,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1352}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8532,"byte_end":8536,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1373}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8740,"byte_end":8751,"line_start":204,"line_end":204,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1374}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":240740,"byte_end":240759,"line_start":166,"line_end":166,"column_start":9,"column_end":28},"ref_id":{"krate":0,"index":1378}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/lib.rs","byte_start":8837,"byte_end":8842,"line_start":208,"line_end":208,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1427}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/error_handler.rs","byte_start":15605,"byte_end":15610,"line_start":30,"line_end":30,"column_start":34,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1921},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":19446,"byte_end":19455,"line_start":17,"line_end":17,"column_start":22,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1968},"to":{"krate":0,"index":1646}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":21775,"byte_end":21786,"line_start":77,"line_end":77,"column_start":24,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1973},"to":{"krate":0,"index":1772}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23386,"byte_end":23391,"line_start":116,"line_end":116,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":23926,"byte_end":23927,"line_start":129,"line_end":129,"column_start":30,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":97},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":24956,"byte_end":24961,"line_start":157,"line_end":157,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":25275,"byte_end":25276,"line_start":166,"line_end":166,"column_start":41,"column_end":42},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":106},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":26014,"byte_end":26034,"line_start":192,"line_end":192,"column_start":6,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/global/trace.rs","byte_start":26464,"byte_end":26484,"line_start":206,"line_end":206,"column_start":32,"column_end":52},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":1626}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39328,"byte_end":39347,"line_start":23,"line_end":23,"column_start":27,"column_end":46},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1995},"to":{"krate":0,"index":508}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39625,"byte_end":39644,"line_start":32,"line_end":32,"column_start":6,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1995},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/env.rs","byte_start":39792,"byte_end":39811,"line_start":39,"line_end":39,"column_start":18,"column_end":37},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1995},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48512,"byte_end":48527,"line_start":55,"line_end":55,"column_start":18,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1999},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":48754,"byte_end":48769,"line_start":66,"line_end":66,"column_start":16,"column_end":31},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1999},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":49403,"byte_end":49418,"line_start":89,"line_end":89,"column_start":9,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1999},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50444,"byte_end":50452,"line_start":121,"line_end":121,"column_start":16,"column_end":24},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":50674,"byte_end":50682,"line_start":132,"line_end":132,"column_start":26,"column_end":34},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2007},"to":{"krate":0,"index":2034}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/stdout.rs","byte_start":51414,"byte_end":51419,"line_start":159,"line_end":159,"column_start":22,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2031},"to":{"krate":0,"index":295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42882,"byte_end":42886,"line_start":28,"line_end":28,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":2034}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/trace/mod.rs","byte_start":42889,"byte_end":42894,"line_start":28,"line_end":28,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":2034}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41898,"byte_end":41903,"line_start":10,"line_end":10,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2339},"to":{"krate":0,"index":295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41906,"byte_end":41910,"line_start":10,"line_end":10,"column_start":44,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/export/mod.rs","byte_start":41913,"byte_end":41917,"line_start":10,"line_end":10,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/instrumentation.rs","byte_start":52299,"byte_end":52321,"line_start":20,"line_end":20,"column_start":6,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2061},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56703,"byte_end":56720,"line_start":105,"line_end":105,"column_start":6,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/baggage.rs","byte_start":56873,"byte_end":56890,"line_start":112,"line_end":112,"column_start":28,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2097},"to":{"krate":0,"index":1396}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69195,"byte_end":69221,"line_start":67,"line_end":67,"column_start":6,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/composite.rs","byte_start":69827,"byte_end":69853,"line_start":86,"line_end":86,"column_start":28,"column_end":54},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2103},"to":{"krate":0,"index":1396}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":78372,"byte_end":78394,"line_start":47,"line_end":47,"column_start":6,"column_end":28},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/propagation/trace_context.rs","byte_start":80685,"byte_end":80707,"line_start":116,"line_end":116,"column_start":28,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2124},"to":{"krate":0,"index":1396}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91666,"byte_end":91674,"line_start":34,"line_end":34,"column_start":18,"column_end":26},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2132},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":91850,"byte_end":91858,"line_start":43,"line_end":43,"column_start":6,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95124,"byte_end":95132,"line_start":154,"line_end":154,"column_start":19,"column_end":27},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2142},"to":{"krate":2,"index":7600}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95266,"byte_end":95274,"line_start":162,"line_end":162,"column_start":23,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2132},"to":{"krate":2,"index":7420}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/resource.rs","byte_start":95575,"byte_end":95579,"line_start":175,"line_end":175,"column_start":23,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2147},"to":{"krate":2,"index":7600}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":100572,"byte_end":100578,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/config.rs","byte_start":101857,"byte_end":101863,"line_start":70,"line_end":70,"column_start":18,"column_end":24},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2154},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":103664,"byte_end":103678,"line_start":20,"line_end":20,"column_start":6,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":106579,"byte_end":106587,"line_start":116,"line_end":116,"column_start":19,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2176},"to":{"krate":2,"index":7600}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":106721,"byte_end":106735,"line_start":124,"line_end":124,"column_start":23,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2163},"to":{"krate":2,"index":7420}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_hash_map.rs","byte_start":107256,"byte_end":107260,"line_start":146,"line_end":146,"column_start":23,"column_end":27},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2181},"to":{"krate":2,"index":7600}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":108520,"byte_end":108532,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110089,"byte_end":110097,"line_start":69,"line_end":69,"column_start":22,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2205},"to":{"krate":2,"index":7600}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110257,"byte_end":110269,"line_start":77,"line_end":77,"column_start":26,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2188},"to":{"krate":2,"index":7420}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110621,"byte_end":110625,"line_start":90,"line_end":90,"column_start":35,"column_end":39},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2212},"to":{"krate":2,"index":7600}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/evicted_queue.rs","byte_start":110790,"byte_end":110802,"line_start":98,"line_end":98,"column_start":23,"column_end":35},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2188},"to":{"krate":2,"index":7429}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/aws.rs","byte_start":114211,"byte_end":114226,"line_start":43,"line_end":43,"column_start":22,"column_end":37},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2221},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/id_generator/mod.rs","byte_start":111825,"byte_end":111836,"line_start":15,"line_end":15,"column_start":36,"column_end":47},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2227},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":116750,"byte_end":116769,"line_start":28,"line_end":28,"column_start":15,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2239},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117137,"byte_end":117151,"line_start":44,"line_end":44,"column_start":18,"column_end":32},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2244},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117237,"byte_end":117251,"line_start":50,"line_end":50,"column_start":6,"column_end":20},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":117837,"byte_end":117851,"line_start":72,"line_end":72,"column_start":39,"column_end":53},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2244},"to":{"krate":0,"index":1626}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/provider.rs","byte_start":118659,"byte_end":118666,"line_start":97,"line_end":97,"column_start":6,"column_end":13},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122780,"byte_end":122784,"line_start":48,"line_end":48,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122787,"byte_end":122791,"line_start":48,"line_end":48,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":122804,"byte_end":122809,"line_start":48,"line_end":48,"column_start":49,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/sampler.rs","byte_start":124564,"byte_end":124571,"line_start":100,"line_end":100,"column_start":23,"column_end":30},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2283},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":135472,"byte_end":135476,"line_start":56,"line_end":56,"column_start":6,"column_end":10},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":136215,"byte_end":136219,"line_start":85,"line_end":85,"column_start":29,"column_end":33},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2298},"to":{"krate":0,"index":1646}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":138768,"byte_end":138777,"line_start":155,"line_end":155,"column_start":6,"column_end":15},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span.rs","byte_start":140496,"byte_end":140505,"line_start":194,"line_end":194,"column_start":15,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2304},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":152920,"byte_end":152924,"line_start":69,"line_end":69,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":892}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":152927,"byte_end":152931,"line_start":69,"line_end":69,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":892}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":152944,"byte_end":152949,"line_start":69,"line_end":69,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":892}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154591,"byte_end":154610,"line_start":110,"line_end":110,"column_start":6,"column_end":25},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":154794,"byte_end":154813,"line_start":118,"line_end":118,"column_start":24,"column_end":43},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2330},"to":{"krate":0,"index":892}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157596,"byte_end":157614,"line_start":200,"line_end":200,"column_start":21,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":906},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":157838,"byte_end":157856,"line_start":208,"line_end":208,"column_start":24,"column_end":42},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":906},"to":{"krate":0,"index":892}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":159591,"byte_end":159609,"line_start":257,"line_end":257,"column_start":6,"column_end":24},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":165869,"byte_end":165880,"line_start":416,"line_end":416,"column_start":18,"column_end":29},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2346},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/span_processor.rs","byte_start":167951,"byte_end":167976,"line_start":474,"line_end":474,"column_start":12,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":178680,"byte_end":178686,"line_start":33,"line_end":33,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2363},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":179064,"byte_end":179070,"line_start":44,"line_end":44,"column_start":6,"column_end":12},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2363},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/sdk/trace/tracer.rs","byte_start":181521,"byte_end":181527,"line_start":122,"line_end":122,"column_start":31,"column_end":37},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2363},"to":{"krate":0,"index":1772}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":195985,"byte_end":195992,"line_start":91,"line_end":91,"column_start":6,"column_end":13},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":202105,"byte_end":202109,"line_start":270,"line_end":270,"column_start":23,"column_end":27},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2386},"to":{"krate":2,"index":7600}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":202519,"byte_end":202526,"line_start":287,"line_end":287,"column_start":56,"column_end":63},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2379},"to":{"krate":2,"index":7416}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":202858,"byte_end":202865,"line_start":297,"line_end":297,"column_start":33,"column_end":40},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2379},"to":{"krate":2,"index":7416}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":203142,"byte_end":203149,"line_start":307,"line_end":307,"column_start":41,"column_end":48},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2379},"to":{"krate":2,"index":7416}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":205234,"byte_end":205241,"line_start":375,"line_end":375,"column_start":21,"column_end":28},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2428},"to":{"krate":0,"index":1183}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206580,"byte_end":206595,"line_start":416,"line_end":416,"column_start":6,"column_end":21},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206721,"byte_end":206736,"line_start":423,"line_end":423,"column_start":23,"column_end":38},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2393},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":206858,"byte_end":206873,"line_start":429,"line_end":429,"column_start":21,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2393},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207358,"byte_end":207374,"line_start":447,"line_end":447,"column_start":6,"column_end":22},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/baggage.rs","byte_start":207758,"byte_end":207774,"line_start":463,"line_end":463,"column_start":25,"column_end":41},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2408},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":212815,"byte_end":212822,"line_start":81,"line_end":81,"column_start":6,"column_end":13},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":219788,"byte_end":219795,"line_start":297,"line_end":297,"column_start":21,"column_end":28},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2428},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":220273,"byte_end":220285,"line_start":313,"line_end":313,"column_start":15,"column_end":27},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1261},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/context.rs","byte_start":221158,"byte_end":221166,"line_start":337,"line_end":337,"column_start":17,"column_end":25},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2434},"to":{"krate":2,"index":9559}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":222806,"byte_end":222809,"line_start":12,"line_end":12,"column_start":6,"column_end":9},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224330,"byte_end":224333,"line_start":69,"line_end":69,"column_start":29,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2443},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224481,"byte_end":224484,"line_start":76,"line_end":76,"column_start":23,"column_end":26},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2443},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224623,"byte_end":224629,"line_start":83,"line_end":83,"column_start":20,"column_end":26},"kind":{"Impl":{"id":85}},"from":{"krate":5,"index":7590},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":224770,"byte_end":224773,"line_start":90,"line_end":90,"column_start":23,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2443},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":225243,"byte_end":225248,"line_start":110,"line_end":110,"column_start":23,"column_end":28},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2464},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":226943,"byte_end":226948,"line_start":176,"line_end":176,"column_start":6,"column_end":11},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2493},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":227860,"byte_end":227865,"line_start":214,"line_end":214,"column_start":29,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2493},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228043,"byte_end":228048,"line_start":221,"line_end":221,"column_start":23,"column_end":28},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2493},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228214,"byte_end":228219,"line_start":228,"line_end":228,"column_start":23,"column_end":28},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2493},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":228972,"byte_end":228980,"line_start":250,"line_end":250,"column_start":6,"column_end":14},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229371,"byte_end":229375,"line_start":268,"line_end":268,"column_start":6,"column_end":10},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/core.rs","byte_start":229621,"byte_end":229625,"line_start":280,"line_end":280,"column_start":21,"column_end":25},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2536},"to":{"krate":2,"index":2901}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230401,"byte_end":230406,"line_start":17,"line_end":17,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2625},"to":{"krate":0,"index":1367}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230409,"byte_end":230413,"line_start":17,"line_end":17,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1367}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/runtime.rs","byte_start":230416,"byte_end":230420,"line_start":17,"line_end":17,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":1367}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":243098,"byte_end":243103,"line_start":14,"line_end":14,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":1396}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244766,"byte_end":244775,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/text_map_propagator.rs","byte_start":244960,"byte_end":244969,"line_start":66,"line_end":66,"column_start":23,"column_end":32},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2552},"to":{"krate":2,"index":7600}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241389,"byte_end":241396,"line_start":185,"line_end":185,"column_start":46,"column_end":53},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":1090},"to":{"krate":0,"index":1413}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/propagation/mod.rs","byte_start":241615,"byte_end":241622,"line_start":192,"line_end":192,"column_start":47,"column_end":54},"kind":{"Impl":{"id":98}},"from":{"krate":1,"index":1090},"to":{"krate":0,"index":1415}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/context.rs","byte_start":254888,"byte_end":254895,"line_start":62,"line_end":62,"column_start":26,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2428},"to":{"krate":0,"index":1452}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/event.rs","byte_start":258675,"byte_end":258680,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":259945,"byte_end":259946,"line_start":27,"line_end":27,"column_start":30,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1510},"to":{"krate":0,"index":1527}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":260004,"byte_end":260015,"line_start":29,"line_end":29,"column_start":54,"column_end":65},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":260315,"byte_end":260326,"line_start":40,"line_end":40,"column_start":46,"column_end":57},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2627},"to":{"krate":30,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":260646,"byte_end":260657,"line_start":50,"line_end":50,"column_start":51,"column_end":62},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2627},"to":{"krate":35,"index":17}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/futures.rs","byte_start":261853,"byte_end":261858,"line_start":91,"line_end":91,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1527}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":262914,"byte_end":262918,"line_start":6,"line_end":6,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":262921,"byte_end":262925,"line_start":6,"line_end":6,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/id_generator.rs","byte_start":262933,"byte_end":262938,"line_start":6,"line_end":6,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/link.rs","byte_start":263582,"byte_end":263586,"line_start":15,"line_end":15,"column_start":6,"column_end":10},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2631},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":264630,"byte_end":264648,"line_start":21,"line_end":21,"column_start":6,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":264805,"byte_end":264823,"line_start":28,"line_end":28,"column_start":32,"column_end":50},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2642},"to":{"krate":0,"index":1626}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265171,"byte_end":265179,"line_start":43,"line_end":43,"column_start":18,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2650},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265247,"byte_end":265255,"line_start":49,"line_end":49,"column_start":6,"column_end":14},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":265619,"byte_end":265627,"line_start":64,"line_end":64,"column_start":22,"column_end":30},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2650},"to":{"krate":0,"index":1646}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":266790,"byte_end":266800,"line_start":117,"line_end":117,"column_start":6,"column_end":16},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":266932,"byte_end":266942,"line_start":124,"line_end":124,"column_start":24,"column_end":34},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2656},"to":{"krate":0,"index":1772}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268479,"byte_end":268495,"line_start":173,"line_end":173,"column_start":6,"column_end":22},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/noop.rs","byte_start":268653,"byte_end":268669,"line_start":181,"line_end":181,"column_start":23,"column_end":39},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2664},"to":{"krate":0,"index":2034}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/provider.rs","byte_start":271759,"byte_end":271764,"line_start":26,"line_end":26,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":1626}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273432,"byte_end":273437,"line_start":26,"line_end":26,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":1646}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273450,"byte_end":273454,"line_start":26,"line_end":26,"column_start":40,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1646}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":273457,"byte_end":273461,"line_start":26,"line_end":26,"column_start":47,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":1646}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":283600,"byte_end":283608,"line_start":228,"line_end":228,"column_start":23,"column_end":31},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2675},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span.rs","byte_start":284445,"byte_end":284455,"line_start":254,"line_end":254,"column_start":6,"column_end":16},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":286466,"byte_end":286473,"line_start":36,"line_end":36,"column_start":6,"column_end":13},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2711},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":287723,"byte_end":287729,"line_start":79,"line_end":79,"column_start":6,"column_end":12},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":289152,"byte_end":289162,"line_start":127,"line_end":127,"column_start":6,"column_end":16},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":294639,"byte_end":294649,"line_start":287,"line_end":287,"column_start":18,"column_end":28},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2747},"to":{"krate":2,"index":11870}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/span_context.rs","byte_start":295699,"byte_end":295710,"line_start":320,"line_end":320,"column_start":6,"column_end":17},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":306303,"byte_end":306308,"line_start":159,"line_end":159,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":9343},"to":{"krate":0,"index":1772}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/tracer.rs","byte_start":314383,"byte_end":314394,"line_start":361,"line_end":361,"column_start":6,"column_end":17},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2777},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251836,"byte_end":251846,"line_start":165,"line_end":165,"column_start":21,"column_end":31},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2797},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":251996,"byte_end":252006,"line_start":174,"line_end":174,"column_start":35,"column_end":45},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2797},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":252145,"byte_end":252155,"line_start":180,"line_end":180,"column_start":25,"column_end":35},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2797},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":252267,"byte_end":252277,"line_start":186,"line_end":186,"column_start":23,"column_end":33},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2797},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.13.0/src/trace/mod.rs","byte_start":252409,"byte_end":252419,"line_start":192,"line_end":192,"column_start":29,"column_end":39},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2797},"to":{"krate":2,"index":2910}}]}