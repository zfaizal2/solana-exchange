{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11","program":"/home/zfaizal/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","tower","--edition=2018","/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"balance\"","--cfg","feature=\"buffer\"","--cfg","feature=\"default\"","--cfg","feature=\"discover\"","--cfg","feature=\"futures-util\"","--cfg","feature=\"indexmap\"","--cfg","feature=\"limit\"","--cfg","feature=\"load\"","--cfg","feature=\"log\"","--cfg","feature=\"make\"","--cfg","feature=\"rand\"","--cfg","feature=\"ready-cache\"","--cfg","feature=\"slab\"","--cfg","feature=\"timeout\"","--cfg","feature=\"tokio\"","--cfg","feature=\"tokio-stream\"","--cfg","feature=\"tokio-util\"","--cfg","feature=\"tracing\"","--cfg","feature=\"util\"","-C","metadata=f6ed8f172270b33b","-C","extra-filename=-f6ed8f172270b33b","--out-dir","/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps","-L","dependency=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps","--extern","futures_core=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libfutures_core-510cc45d8663075e.rmeta","--extern","futures_util=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libfutures_util-54165daed0a034e3.rmeta","--extern","indexmap=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libindexmap-6294372378627aa7.rmeta","--extern","pin_project=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libpin_project-0ca5771f3878ba8f.rmeta","--extern","pin_project_lite=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libpin_project_lite-b0bfa5eb334f8d78.rmeta","--extern","rand=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/librand-2e001405af96c5f6.rmeta","--extern","slab=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libslab-67525e679724f5f0.rmeta","--extern","tokio=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libtokio-c6397101639d139b.rmeta","--extern","tokio_stream=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libtokio_stream-7b718df273f9063c.rmeta","--extern","tokio_util=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libtokio_util-d8bb2c6087e7521f.rmeta","--extern","tower_layer=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libtower_layer-9b2c5ad75951a8dc.rmeta","--extern","tower_service=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libtower_service-778e8c7a7470b21a.rmeta","--extern","tracing=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libtracing-0beb8b09c89df919.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/zfaizal/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libtower-f6ed8f172270b33b.rmeta"},"prelude":{"crate_id":{"name":"tower","disambiguator":[7359179081756768538,0]},"crate_root":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src","external_crates":[{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6651269719699919063,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5314938362831806024,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3192916554191843392,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10801551532821350179,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17712696282143808288,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17759323731357012152,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14544669950029098253,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7140361926623002963,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7912653715525474172,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9995494595343579593,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7588845087494698681,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[1970575902162233525,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[17110431802946872365,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[13012552651923263309,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[12999591111048205696,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[5038749270737079727,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[4159898706074811085,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[8750230721255451893,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1956939412839304600,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","num":20,"id":{"name":"tower_layer","disambiguator":[9954597305000579556,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","num":21,"id":{"name":"futures_core","disambiguator":[18200893915827065529,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","num":22,"id":{"name":"pin_project_lite","disambiguator":[17627374544393263653,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","num":23,"id":{"name":"tower_service","disambiguator":[6263273231800291378,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":24,"id":{"name":"futures_util","disambiguator":[17413347477511345824,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":25,"id":{"name":"pin_utils","disambiguator":[3673188743213573932,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":26,"id":{"name":"futures_macro","disambiguator":[12835129650532780108,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":27,"id":{"name":"futures_task","disambiguator":[13474543951748236176,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":28,"id":{"name":"futures_sink","disambiguator":[8307411743786656110,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":29,"id":{"name":"futures_channel","disambiguator":[1832996214919299864,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","num":30,"id":{"name":"slab","disambiguator":[4028794699268519618,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":31,"id":{"name":"futures_io","disambiguator":[489674024207278210,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":32,"id":{"name":"futures","disambiguator":[9893048567650089844,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":33,"id":{"name":"memchr","disambiguator":[5547902202154193270,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":34,"id":{"name":"rand","disambiguator":[12252018600484131900,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":35,"id":{"name":"rand_core","disambiguator":[3192443078635754823,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":36,"id":{"name":"getrandom","disambiguator":[6561512141613163802,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":37,"id":{"name":"cfg_if","disambiguator":[11900951980957517807,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":38,"id":{"name":"libc","disambiguator":[1623297377879856316,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":39,"id":{"name":"rand_chacha","disambiguator":[12263224266856247605,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":40,"id":{"name":"ppv_lite86","disambiguator":[13049449680620946981,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":41,"id":{"name":"tokio","disambiguator":[17212243770576452484,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":42,"id":{"name":"parking_lot","disambiguator":[12507362848068905465,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":43,"id":{"name":"instant","disambiguator":[17081669115862444966,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":44,"id":{"name":"lock_api","disambiguator":[12682360784623646209,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":45,"id":{"name":"scopeguard","disambiguator":[7389675204133512052,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":46,"id":{"name":"parking_lot_core","disambiguator":[3275111788447745139,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":47,"id":{"name":"smallvec","disambiguator":[1603597397311112112,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":48,"id":{"name":"mio","disambiguator":[10862057843324194718,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":49,"id":{"name":"log","disambiguator":[9662559984274894343,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":50,"id":{"name":"bytes","disambiguator":[6191440968204973069,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":51,"id":{"name":"once_cell","disambiguator":[1725345041460281935,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":52,"id":{"name":"tokio_macros","disambiguator":[9526833921484424160,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":53,"id":{"name":"num_cpus","disambiguator":[8888045507868980783,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":54,"id":{"name":"signal_hook_registry","disambiguator":[5873125402128122042,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":55,"id":{"name":"tracing","disambiguator":[9656391517508561629,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":56,"id":{"name":"tracing_core","disambiguator":[7296801535872264544,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":57,"id":{"name":"lazy_static","disambiguator":[2335416628160260444,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","num":58,"id":{"name":"tracing_attributes","disambiguator":[122738137554638762,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","num":59,"id":{"name":"tokio_util","disambiguator":[7237004935817681035,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":60,"id":{"name":"indexmap","disambiguator":[2045912481079820313,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":61,"id":{"name":"hashbrown","disambiguator":[4651405447006343162,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":62,"id":{"name":"ahash","disambiguator":[14559536401722940830,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":63,"id":{"name":"rayon","disambiguator":[10639479743248494709,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":64,"id":{"name":"either","disambiguator":[12073500757726826674,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":65,"id":{"name":"rayon_core","disambiguator":[11221258074812224883,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":66,"id":{"name":"crossbeam_channel","disambiguator":[4391010923768610838,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":67,"id":{"name":"crossbeam_utils","disambiguator":[11427269335901023872,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":68,"id":{"name":"crossbeam_deque","disambiguator":[13684943026040017664,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":69,"id":{"name":"crossbeam_epoch","disambiguator":[4376603367870132740,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","num":70,"id":{"name":"memoffset","disambiguator":[2738705092540529081,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","num":71,"id":{"name":"pin_project","disambiguator":[14961834963295434675,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","num":72,"id":{"name":"pin_project_internal","disambiguator":[11410496046174426483,0]}}],"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":0,"byte_end":9317,"line_start":1,"line_end":235,"column_start":1,"column_end":62}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":29},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15823,"byte_end":15839,"line_start":39,"line_end":39,"column_start":16,"column_end":32},"alias_span":null,"name":"MakeBalanceLayer","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15856,"byte_end":15867,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"alias_span":null,"name":"MakeBalance","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":3145},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15869,"byte_end":15879,"line_start":40,"line_end":40,"column_start":29,"column_end":39},"alias_span":null,"name":"MakeFuture","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":210},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15899,"byte_end":15906,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"alias_span":null,"name":"Balance","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50247,"byte_end":50258,"line_start":46,"line_end":46,"column_start":22,"column_end":33},"alias_span":null,"name":"BufferLayer","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":0,"index":3898},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50283,"byte_end":50289,"line_start":47,"line_end":47,"column_start":24,"column_end":30},"alias_span":null,"name":"Buffer","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":0,"index":4351},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74400,"byte_end":74411,"line_start":39,"line_end":39,"column_start":21,"column_end":32},"alias_span":null,"name":"ServiceList","value":"","parent":{"krate":0,"index":653}},{"kind":"Use","ref_id":{"krate":0,"index":4441},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/mod.rs","byte_start":78194,"byte_end":78215,"line_start":8,"line_end":8,"column_start":13,"column_end":34},"alias_span":null,"name":"ConcurrencyLimitLayer","value":"","parent":{"krate":0,"index":750}},{"kind":"Use","ref_id":{"krate":0,"index":4447},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/mod.rs","byte_start":78217,"byte_end":78244,"line_start":8,"line_end":8,"column_start":36,"column_end":63},"alias_span":null,"name":"GlobalConcurrencyLimitLayer","value":"","parent":{"krate":0,"index":750}},{"kind":"Use","ref_id":{"krate":0,"index":4453},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/mod.rs","byte_start":78260,"byte_end":78276,"line_start":9,"line_end":9,"column_start":14,"column_end":30},"alias_span":null,"name":"ConcurrencyLimit","value":"","parent":{"krate":0,"index":750}},{"kind":"Use","ref_id":{"krate":0,"index":4461},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/mod.rs","byte_start":84600,"byte_end":84614,"line_start":8,"line_end":8,"column_start":23,"column_end":37},"alias_span":null,"name":"RateLimitLayer","value":"","parent":{"krate":0,"index":874}},{"kind":"Use","ref_id":{"krate":0,"index":4467},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/mod.rs","byte_start":84622,"byte_end":84626,"line_start":8,"line_end":8,"column_start":45,"column_end":49},"alias_span":null,"name":"Rate","value":"","parent":{"krate":0,"index":874}},{"kind":"Use","ref_id":{"krate":0,"index":4475},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/mod.rs","byte_start":84637,"byte_end":84646,"line_start":8,"line_end":8,"column_start":60,"column_end":69},"alias_span":null,"name":"RateLimit","value":"","parent":{"krate":0,"index":874}},{"kind":"Use","ref_id":{"krate":0,"index":4453},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":77943,"byte_end":77959,"line_start":7,"line_end":7,"column_start":19,"column_end":35},"alias_span":null,"name":"ConcurrencyLimit","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4441},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":77961,"byte_end":77982,"line_start":7,"line_end":7,"column_start":37,"column_end":58},"alias_span":null,"name":"ConcurrencyLimitLayer","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4447},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":77984,"byte_end":78011,"line_start":7,"line_end":7,"column_start":60,"column_end":87},"alias_span":null,"name":"GlobalConcurrencyLimitLayer","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4475},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":78025,"byte_end":78034,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"alias_span":null,"name":"RateLimit","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4461},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":78036,"byte_end":78050,"line_start":8,"line_end":8,"column_start":23,"column_end":37},"alias_span":null,"name":"RateLimitLayer","value":"","parent":{"krate":0,"index":749}},{"kind":"Use","ref_id":{"krate":0,"index":4518},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92470,"byte_end":92488,"line_start":68,"line_end":68,"column_start":18,"column_end":36},"alias_span":null,"name":"CompleteOnResponse","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4519},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92470,"byte_end":92488,"line_start":68,"line_end":68,"column_start":18,"column_end":36},"alias_span":null,"name":"CompleteOnResponse","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":1002},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92490,"byte_end":92505,"line_start":68,"line_end":68,"column_start":38,"column_end":53},"alias_span":null,"name":"TrackCompletion","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4589},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92522,"byte_end":92530,"line_start":69,"line_end":69,"column_start":15,"column_end":23},"alias_span":null,"name":"Constant","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4638},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92547,"byte_end":92555,"line_start":70,"line_end":70,"column_start":16,"column_end":24},"alias_span":null,"name":"PeakEwma","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4809},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92579,"byte_end":92594,"line_start":71,"line_end":71,"column_start":23,"column_end":38},"alias_span":null,"name":"PendingRequests","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4649},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92655,"byte_end":92671,"line_start":75,"line_end":75,"column_start":27,"column_end":43},"alias_span":null,"name":"PeakEwmaDiscover","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":4828},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92691,"byte_end":92714,"line_start":75,"line_end":75,"column_start":63,"column_end":86},"alias_span":null,"name":"PendingRequestsDiscover","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":1317},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117630,"byte_end":117644,"line_start":6,"line_end":6,"column_start":32,"column_end":46},"alias_span":null,"name":"MakeConnection","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":4903},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117682,"byte_end":117688,"line_start":7,"line_end":7,"column_start":37,"column_end":43},"alias_span":null,"name":"Shared","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":1435},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117719,"byte_end":117728,"line_start":8,"line_end":8,"column_start":30,"column_end":39},"alias_span":null,"name":"AsService","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":1412},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117730,"byte_end":117741,"line_start":8,"line_end":8,"column_start":41,"column_end":52},"alias_span":null,"name":"IntoService","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":1383},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117743,"byte_end":117754,"line_start":8,"line_end":8,"column_start":54,"column_end":65},"alias_span":null,"name":"MakeService","value":"","parent":{"krate":0,"index":1292}},{"kind":"Use","ref_id":{"krate":0,"index":4924},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117838,"byte_end":117850,"line_start":13,"line_end":13,"column_start":42,"column_end":54},"alias_span":null,"name":"SharedFuture","value":"","parent":{"krate":0,"index":1471}},{"kind":"Use","ref_id":{"krate":60,"index":24},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":130560,"byte_end":130570,"line_start":6,"line_end":6,"column_start":19,"column_end":29},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":1476}},{"kind":"Use","ref_id":{"krate":0,"index":1524},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/mod.rs","byte_start":130415,"byte_end":130425,"line_start":6,"line_end":6,"column_start":22,"column_end":32},"alias_span":null,"name":"ReadyCache","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":5122},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148358,"byte_end":148370,"line_start":10,"line_end":10,"column_start":22,"column_end":34},"alias_span":null,"name":"TimeoutLayer","value":"","parent":{"krate":0,"index":1625}},{"kind":"Use","ref_id":{"krate":0,"index":5138},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152389,"byte_end":152396,"line_start":24,"line_end":24,"column_start":16,"column_end":23},"alias_span":null,"name":"AndThen","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5196},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152398,"byte_end":152410,"line_start":24,"line_end":24,"column_start":25,"column_end":37},"alias_span":null,"name":"AndThenLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":1820},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152425,"byte_end":152433,"line_start":25,"line_end":25,"column_start":13,"column_end":21},"alias_span":null,"name":"BoxLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":1884},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152435,"byte_end":152445,"line_start":25,"line_end":25,"column_start":23,"column_end":33},"alias_span":null,"name":"BoxService","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":1943},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152447,"byte_end":152463,"line_start":25,"line_end":25,"column_start":35,"column_end":51},"alias_span":null,"name":"UnsyncBoxService","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2019},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152483,"byte_end":152498,"line_start":26,"line_end":26,"column_start":18,"column_end":33},"alias_span":null,"name":"BoxCloneService","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5417},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152512,"byte_end":152518,"line_start":27,"line_end":27,"column_start":13,"column_end":19},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2281},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152541,"byte_end":152555,"line_start":28,"line_end":28,"column_start":22,"column_end":36},"alias_span":null,"name":"future_service","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5426},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152557,"byte_end":152570,"line_start":28,"line_end":28,"column_start":38,"column_end":51},"alias_span":null,"name":"FutureService","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5447},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152587,"byte_end":152593,"line_start":29,"line_end":29,"column_start":15,"column_end":21},"alias_span":null,"name":"MapErr","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5456},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152595,"byte_end":152606,"line_start":29,"line_end":29,"column_start":23,"column_end":34},"alias_span":null,"name":"MapErrLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5681},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152626,"byte_end":152635,"line_start":30,"line_end":30,"column_start":18,"column_end":27},"alias_span":null,"name":"MapFuture","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5690},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152637,"byte_end":152651,"line_start":30,"line_end":30,"column_start":29,"column_end":43},"alias_span":null,"name":"MapFutureLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5519},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152672,"byte_end":152682,"line_start":31,"line_end":31,"column_start":19,"column_end":29},"alias_span":null,"name":"MapRequest","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5528},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152684,"byte_end":152699,"line_start":31,"line_end":31,"column_start":31,"column_end":46},"alias_span":null,"name":"MapRequestLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5537},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152721,"byte_end":152732,"line_start":32,"line_end":32,"column_start":20,"column_end":31},"alias_span":null,"name":"MapResponse","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5546},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152734,"byte_end":152750,"line_start":32,"line_end":32,"column_start":33,"column_end":49},"alias_span":null,"name":"MapResponseLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5609},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152770,"byte_end":152779,"line_start":33,"line_end":33,"column_start":18,"column_end":27},"alias_span":null,"name":"MapResult","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5618},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152781,"byte_end":152795,"line_start":33,"line_end":33,"column_start":29,"column_end":43},"alias_span":null,"name":"MapResultLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5696},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152811,"byte_end":152818,"line_start":34,"line_end":34,"column_start":14,"column_end":21},"alias_span":null,"name":"Oneshot","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5827},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152834,"byte_end":152842,"line_start":35,"line_end":35,"column_start":15,"column_end":23},"alias_span":null,"name":"Optional","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2729},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152856,"byte_end":152861,"line_start":36,"line_end":36,"column_start":13,"column_end":18},"alias_span":null,"name":"Ready","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2735},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152863,"byte_end":152871,"line_start":36,"line_end":36,"column_start":20,"column_end":28},"alias_span":null,"name":"ReadyAnd","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2708},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152873,"byte_end":152885,"line_start":36,"line_end":36,"column_start":30,"column_end":42},"alias_span":null,"name":"ReadyOneshot","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2776},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152905,"byte_end":152915,"line_start":37,"line_end":37,"column_start":18,"column_end":28},"alias_span":null,"name":"service_fn","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5833},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152917,"byte_end":152926,"line_start":37,"line_end":37,"column_start":30,"column_end":39},"alias_span":null,"name":"ServiceFn","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5841},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152940,"byte_end":152944,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"alias_span":null,"name":"Then","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5850},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152946,"byte_end":152955,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"alias_span":null,"name":"ThenLayer","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5277},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152987,"byte_end":152994,"line_start":41,"line_end":41,"column_start":26,"column_end":33},"alias_span":null,"name":"CallAll","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":5322},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152996,"byte_end":153012,"line_start":41,"line_end":41,"column_start":35,"column_end":51},"alias_span":null,"name":"CallAllUnordered","value":"","parent":{"krate":0,"index":1721}},{"kind":"Use","ref_id":{"krate":0,"index":2608},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153142,"byte_end":153147,"line_start":49,"line_end":49,"column_start":30,"column_end":35},"alias_span":null,"name":"optional","value":"","parent":{"krate":0,"index":2958}},{"kind":"Use","ref_id":{"krate":0,"index":5147},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153232,"byte_end":153245,"line_start":55,"line_end":55,"column_start":30,"column_end":43},"alias_span":null,"name":"AndThenFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":5478},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153275,"byte_end":153287,"line_start":56,"line_end":56,"column_start":29,"column_end":41},"alias_span":null,"name":"MapErrFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":5568},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153322,"byte_end":153339,"line_start":57,"line_end":57,"column_start":34,"column_end":51},"alias_span":null,"name":"MapResponseFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":5640},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153372,"byte_end":153387,"line_start":58,"line_end":58,"column_start":32,"column_end":47},"alias_span":null,"name":"MapResultFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":2621},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153418,"byte_end":153424,"line_start":59,"line_end":59,"column_start":30,"column_end":36},"alias_span":null,"name":"optional","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":0,"index":5875},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153463,"byte_end":153473,"line_start":60,"line_end":60,"column_start":26,"column_end":36},"alias_span":null,"name":"ThenFuture","value":"","parent":{"krate":0,"index":2962}},{"kind":"Use","ref_id":{"krate":20,"index":25},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278491,"byte_end":278499,"line_start":5,"line_end":5,"column_start":23,"column_end":31},"alias_span":null,"name":"layer_fn","value":"","parent":{"krate":0,"index":3098}},{"kind":"Use","ref_id":{"krate":20,"index":71},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278501,"byte_end":278506,"line_start":5,"line_end":5,"column_start":33,"column_end":38},"alias_span":null,"name":"Layer","value":"","parent":{"krate":0,"index":3098}},{"kind":"Use","ref_id":{"krate":20,"index":87},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278508,"byte_end":278515,"line_start":5,"line_end":5,"column_start":40,"column_end":47},"alias_span":null,"name":"LayerFn","value":"","parent":{"krate":0,"index":3098}},{"kind":"Use","ref_id":{"krate":20,"index":81},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278715,"byte_end":278723,"line_start":13,"line_end":13,"column_start":27,"column_end":35},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":3109}},{"kind":"Use","ref_id":{"krate":20,"index":95},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278725,"byte_end":278730,"line_start":13,"line_end":13,"column_start":37,"column_end":42},"alias_span":null,"name":"Stack","value":"","parent":{"krate":0,"index":3109}},{"kind":"Use","ref_id":{"krate":0,"index":2776},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8853,"byte_end":8863,"line_start":216,"line_end":216,"column_start":22,"column_end":32},"alias_span":null,"name":"service_fn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2981},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8865,"byte_end":8875,"line_start":216,"line_end":216,"column_start":34,"column_end":44},"alias_span":null,"name":"ServiceExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5924},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8918,"byte_end":8932,"line_start":219,"line_end":219,"column_start":25,"column_end":39},"alias_span":null,"name":"ServiceBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1383},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":9043,"byte_end":9054,"line_start":223,"line_end":223,"column_start":22,"column_end":33},"alias_span":null,"name":"MakeService","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":71},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":9092,"byte_end":9097,"line_start":225,"line_end":225,"column_start":22,"column_end":27},"alias_span":null,"name":"Layer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":13},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":9137,"byte_end":9144,"line_start":227,"line_end":227,"column_start":24,"column_end":31},"alias_span":null,"name":"Service","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":0,"byte_end":9317,"line_start":1,"line_end":235,"column_start":1,"column_end":62},"name":"","qualname":"::","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":5},{"krate":0,"index":393},{"krate":0,"index":653},{"krate":0,"index":749},{"krate":0,"index":980},{"krate":0,"index":1292},{"krate":0,"index":1475},{"krate":0,"index":1625},{"krate":0,"index":1721},{"krate":0,"index":3021},{"krate":0,"index":3098},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3121},{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3130},{"krate":0,"index":3133},{"krate":0,"index":3136},{"krate":0,"index":3139}],"decl_id":null,"docs":" `async fn(Request) -> Result<Response, Error>`","sig":null,"attributes":[{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":56,"byte_end":162,"line_start":2,"line_end":7,"column_start":1,"column_end":3}},{"value":"allow(elided_lifetimes_in_paths, clippy :: type_complexity)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":163,"byte_end":224,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ `async fn(Request) -> Result<Response, Error>`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":364,"byte_end":414,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":415,"byte_end":418,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Overview","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":419,"byte_end":433,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":434,"byte_end":437,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Tower is a library of modular and reusable components for building","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":438,"byte_end":508,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ robust networking clients and servers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":509,"byte_end":551,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":552,"byte_end":555,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Tower provides a simple core abstraction, the [`Service`] trait, which","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":556,"byte_end":630,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ represents an asynchronous function taking a request and returning either a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":631,"byte_end":710,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ response or an error. This abstraction can be used to model both clients and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":711,"byte_end":791,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ servers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":792,"byte_end":804,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":805,"byte_end":808,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Generic components, like [timeouts], [rate limiting], and [load balancing],","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":809,"byte_end":888,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ can be modeled as [`Service`]s that wrap some inner service and apply","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":889,"byte_end":962,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ additional behavior before or after the inner service is called. This allows","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":963,"byte_end":1043,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ implementing these components in a protocol-agnostic, composable way. Typically,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1044,"byte_end":1128,"line_start":28,"line_end":28,"column_start":1,"column_end":85}},{"value":"/ such services are referred to as _middleware_.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1129,"byte_end":1179,"line_start":29,"line_end":29,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1180,"byte_end":1183,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ An additional abstraction, the [`Layer`] trait, is used to compose","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1184,"byte_end":1254,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ middleware with [`Service`]s. If a [`Service`] can be thought of as an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1255,"byte_end":1329,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ asynchronous function from a request type to a response type, a [`Layer`] is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1330,"byte_end":1410,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ a function taking a [`Service`] of one type and returning a [`Service`] of a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1411,"byte_end":1491,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ different type. The [`ServiceBuilder`] type is used to add middleware to a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1492,"byte_end":1570,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ service by composing it with multiple [`Layer`]s.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1571,"byte_end":1624,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1625,"byte_end":1628,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ## The Tower Ecosystem","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1629,"byte_end":1655,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1656,"byte_end":1659,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Tower is made up of the following crates:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1660,"byte_end":1705,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1706,"byte_end":1709,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * [`tower`] (this crate)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1710,"byte_end":1738,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/ * [`tower-service`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1739,"byte_end":1762,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ * [`tower-layer`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1763,"byte_end":1784,"line_start":44,"line_end":44,"column_start":1,"column_end":22}},{"value":"/ * [`tower-test`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1785,"byte_end":1805,"line_start":45,"line_end":45,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1806,"byte_end":1809,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Since the [`Service`] and [`Layer`] traits are important integration points","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1810,"byte_end":1889,"line_start":47,"line_end":47,"column_start":1,"column_end":80}},{"value":"/ for all libraries using Tower, they are kept as stable as possible, and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1890,"byte_end":1965,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/ breaking changes are made rarely. Therefore, they are defined in separate","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":1966,"byte_end":2043,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ crates, [`tower-service`] and [`tower-layer`]. This crate contains","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2044,"byte_end":2114,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ re-exports of those core traits, implementations of commonly-used","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2115,"byte_end":2184,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/ middleware, and [utilities] for working with [`Service`]s and [`Layer`]s.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2185,"byte_end":2262,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ Finally, the [`tower-test`] crate provides tools for testing programs using","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2263,"byte_end":2342,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ Tower.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2343,"byte_end":2353,"line_start":54,"line_end":54,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2354,"byte_end":2357,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2358,"byte_end":2369,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2370,"byte_end":2373,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Tower provides an abstraction layer, and generic implementations of various","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2374,"byte_end":2453,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ middleware. This means that the `tower` crate on its own does *not* provide","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2454,"byte_end":2533,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"/ a working implementation of a network client or server. Instead, Tower's","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2534,"byte_end":2610,"line_start":60,"line_end":60,"column_start":1,"column_end":77}},{"value":"/ [`Service` trait][`Service`] provides an integration point between","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2611,"byte_end":2681,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/ application code, libraries providing middleware implementations, and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2682,"byte_end":2755,"line_start":62,"line_end":62,"column_start":1,"column_end":74}},{"value":"/ libraries that implement servers and/or clients for various network","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2756,"byte_end":2827,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ protocols.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2828,"byte_end":2842,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2843,"byte_end":2846,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Depending on your particular use case, you might use Tower in several ways:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2847,"byte_end":2926,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2927,"byte_end":2930,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * **Implementing application logic** for a networked program. You might","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":2931,"byte_end":3006,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/   use the [`Service`] trait to model your application's behavior, and use","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3007,"byte_end":3084,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/   the middleware [provided by this crate](#modules) and by other libraries","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3085,"byte_end":3163,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   to add functionality to clients and servers provided by one or more","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3164,"byte_end":3237,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"/   protocol implementations.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3238,"byte_end":3269,"line_start":72,"line_end":72,"column_start":1,"column_end":32}},{"value":"/ * **Implementing middleware** to add custom behavior to network clients and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3270,"byte_end":3349,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   servers in a reusable manner. This might be general-purpose middleware","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3350,"byte_end":3426,"line_start":74,"line_end":74,"column_start":1,"column_end":77}},{"value":"/   (and if it is, please consider releasing your middleware as a library for","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3427,"byte_end":3506,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/   other Tower users!) or application-specific behavior that needs to be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3507,"byte_end":3582,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/   shared between multiple clients or servers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3583,"byte_end":3632,"line_start":77,"line_end":77,"column_start":1,"column_end":50}},{"value":"/ * **Implementing a network protocol**. Libraries that implement network","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3633,"byte_end":3708,"line_start":78,"line_end":78,"column_start":1,"column_end":76}},{"value":"/   protocols (such as HTTP) can depend on `tower-service` to use the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3709,"byte_end":3780,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/   [`Service`] trait as an integration point between the protocol and user","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3781,"byte_end":3858,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/   code. For example, a client for some protocol might implement [`Service`],","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3859,"byte_end":3939,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/   allowing users to add arbitrary Tower middleware to those clients.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":3940,"byte_end":4012,"line_start":82,"line_end":82,"column_start":1,"column_end":73}},{"value":"/   Similarly, a server might be created from a user-provided [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4013,"byte_end":4089,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4090,"byte_end":4093,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/   Additionally, when a network protocol requires functionality already","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4094,"byte_end":4168,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/   provided by existing Tower middleware, a protocol implementation might use","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4169,"byte_end":4249,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/   Tower middleware internally, as well as as an integration point.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4250,"byte_end":4320,"line_start":87,"line_end":87,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4321,"byte_end":4324,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ## Library Support","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4325,"byte_end":4347,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4348,"byte_end":4351,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ A number of third-party libraries support Tower and the [`Service`] trait.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4352,"byte_end":4430,"line_start":91,"line_end":91,"column_start":1,"column_end":79}},{"value":"/ The following is an incomplete list of such libraries:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4431,"byte_end":4489,"line_start":92,"line_end":92,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4490,"byte_end":4493,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ * [`hyper`]: A fast and correct low-level HTTP implementation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4494,"byte_end":4560,"line_start":94,"line_end":94,"column_start":1,"column_end":67}},{"value":"/ * [`tonic`]: A [gRPC-over-HTTP/2][grpc] implementation built on top of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4561,"byte_end":4635,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/   [`hyper`]. See [here][tonic-examples] for examples of using [`tonic`] with","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4636,"byte_end":4716,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/   Tower.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4717,"byte_end":4729,"line_start":97,"line_end":97,"column_start":1,"column_end":13}},{"value":"/ * [`warp`]: A lightweight, composable web framework. See","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4730,"byte_end":4790,"line_start":98,"line_end":98,"column_start":1,"column_end":61}},{"value":"/   [here][warp-service] for details on using [`warp`] with Tower.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4791,"byte_end":4859,"line_start":99,"line_end":99,"column_start":1,"column_end":69}},{"value":"/ * [`tower-lsp`] and its fork, [`lspower`]: implementations of the [Language","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4860,"byte_end":4939,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   Server Protocol][lsp] based on Tower.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4940,"byte_end":4983,"line_start":101,"line_end":101,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4984,"byte_end":4987,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ [`hyper`]: https://crates.io/crates/hyper","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":4988,"byte_end":5033,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/ [`tonic`]: https://crates.io/crates/tonic","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5034,"byte_end":5079,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/ [tonic-examples]: https://github.com/hyperium/tonic/tree/master/examples/src/tower","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5080,"byte_end":5166,"line_start":105,"line_end":105,"column_start":1,"column_end":87}},{"value":"/ [grpc]: https://grpc.io","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5167,"byte_end":5194,"line_start":106,"line_end":106,"column_start":1,"column_end":28}},{"value":"/ [`warp`]: https://crates.io/crates/warp","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5195,"byte_end":5238,"line_start":107,"line_end":107,"column_start":1,"column_end":44}},{"value":"/ [warp-service]: https://docs.rs/warp/0.2.5/warp/fn.service.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5239,"byte_end":5306,"line_start":108,"line_end":108,"column_start":1,"column_end":68}},{"value":"/ [`tower-lsp`]: https://crates.io/crates/tower-lsp","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5307,"byte_end":5360,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/ [`lspower`]: https://crates.io/crates/lspower","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5361,"byte_end":5410,"line_start":110,"line_end":110,"column_start":1,"column_end":50}},{"value":"/ [lsp]: https://microsoft.github.io/language-server-protocol/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5411,"byte_end":5475,"line_start":111,"line_end":111,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5476,"byte_end":5479,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ If you're the maintainer of a crate that supports Tower, we'd love to add","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5480,"byte_end":5557,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/ your crate to this list! Please [open a PR] adding a brief description of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5558,"byte_end":5635,"line_start":114,"line_end":114,"column_start":1,"column_end":78}},{"value":"/ your library!","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5636,"byte_end":5653,"line_start":115,"line_end":115,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5654,"byte_end":5657,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ## Getting Started","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5658,"byte_end":5680,"line_start":117,"line_end":117,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5681,"byte_end":5684,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ If you're brand new to Tower and want to start with the basics, we recommend you","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5685,"byte_end":5769,"line_start":119,"line_end":119,"column_start":1,"column_end":85}},{"value":"/ check out some of our [guides].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5770,"byte_end":5805,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5806,"byte_end":5809,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ The various middleware implementations provided by this crate are feature","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5810,"byte_end":5887,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/ flagged, so that users can only compile the parts of Tower they need. By","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5888,"byte_end":5964,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/ default, all the optional middleware are disabled.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":5965,"byte_end":6019,"line_start":124,"line_end":124,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6020,"byte_end":6023,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ To get started using all of Tower's optional middleware, add this to your","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6024,"byte_end":6101,"line_start":126,"line_end":126,"column_start":1,"column_end":78}},{"value":"/ `Cargo.toml`:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6102,"byte_end":6119,"line_start":127,"line_end":127,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6120,"byte_end":6123,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6124,"byte_end":6135,"line_start":129,"line_end":129,"column_start":1,"column_end":12}},{"value":"/ tower = { version = \"0.4\", features = [\"full\"] }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6136,"byte_end":6188,"line_start":130,"line_end":130,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6189,"byte_end":6196,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6197,"byte_end":6200,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can only enable some features. For example, to enable","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6201,"byte_end":6277,"line_start":133,"line_end":133,"column_start":1,"column_end":77}},{"value":"/ only the [`retry`] and [`timeout`][timeouts] middleware, write:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6278,"byte_end":6345,"line_start":134,"line_end":134,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6346,"byte_end":6349,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6350,"byte_end":6361,"line_start":136,"line_end":136,"column_start":1,"column_end":12}},{"value":"/ tower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6362,"byte_end":6426,"line_start":137,"line_end":137,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6427,"byte_end":6434,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6435,"byte_end":6438,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ See [here](#modules) for a complete list of all middleware provided by","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6439,"byte_end":6513,"line_start":140,"line_end":140,"column_start":1,"column_end":75}},{"value":"/ Tower.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6514,"byte_end":6524,"line_start":141,"line_end":141,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6525,"byte_end":6528,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6529,"byte_end":6560,"line_start":143,"line_end":143,"column_start":1,"column_end":32}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6561,"byte_end":6588,"line_start":144,"line_end":144,"column_start":1,"column_end":28}},{"value":"/ [timeouts]: crate::timeout","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6589,"byte_end":6619,"line_start":145,"line_end":145,"column_start":1,"column_end":31}},{"value":"/ [rate limiting]: crate::limit::rate","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6620,"byte_end":6659,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"/ [load balancing]: crate::balance","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6660,"byte_end":6696,"line_start":147,"line_end":147,"column_start":1,"column_end":37}},{"value":"/ [`ServiceBuilder`]: crate::ServiceBuilder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6697,"byte_end":6742,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/ [utilities]: crate::ServiceExt","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6743,"byte_end":6777,"line_start":149,"line_end":149,"column_start":1,"column_end":35}},{"value":"/ [`tower`]: https://crates.io/crates/tower","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6778,"byte_end":6823,"line_start":150,"line_end":150,"column_start":1,"column_end":46}},{"value":"/ [`tower-service`]: https://crates.io/crates/tower-service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6824,"byte_end":6885,"line_start":151,"line_end":151,"column_start":1,"column_end":62}},{"value":"/ [`tower-layer`]: https://crates.io/crates/tower-layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6886,"byte_end":6943,"line_start":152,"line_end":152,"column_start":1,"column_end":58}},{"value":"/ [`tower-test`]: https://crates.io/crates/tower-test","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":6944,"byte_end":6999,"line_start":153,"line_end":153,"column_start":1,"column_end":56}},{"value":"/ [`retry`]: crate::retry","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7000,"byte_end":7027,"line_start":154,"line_end":154,"column_start":1,"column_end":28}},{"value":"/ [open a PR]: https://github.com/tower-rs/tower/compare","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7028,"byte_end":7086,"line_start":155,"line_end":155,"column_start":1,"column_end":59}},{"value":"/ [guides]: https://github.com/tower-rs/tower/tree/master/guides","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7087,"byte_end":7153,"line_start":156,"line_end":156,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"balance","qualname":"::balance","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":14},{"krate":0,"index":278}],"decl_id":null,"docs":" Middleware that allows balancing load among multiple services.","sig":null,"attributes":[{"value":"cfg(feature = \"balance\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7191,"byte_end":7218,"line_start":160,"line_end":160,"column_start":1,"column_end":28}},{"value":"/ Middleware that allows balancing load among multiple services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":10603,"byte_end":10669,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":10670,"byte_end":10673,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ In larger systems, multiple endpoints are often available for a given service. As load","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":10674,"byte_end":10764,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/ increases, you want to ensure that that load is spread evenly across the available services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":10765,"byte_end":10861,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"/ Otherwise, clients could see spikes in latency if their request goes to a particularly loaded","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":10862,"byte_end":10959,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ service, even when spare capacity is available to handle that request elsewhere.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":10960,"byte_end":11044,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11045,"byte_end":11048,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This module provides two pieces of middleware that helps with this type of load balancing:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11049,"byte_end":11143,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11144,"byte_end":11147,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ First, [`p2c`] implements the \"[Power of Two Random Choices]\" algorithm, a simple but robust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11148,"byte_end":11244,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ technique for spreading load across services with only inexact load measurements. Use this if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11245,"byte_end":11342,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ the set of available services is not within your control, and you simply want to spread load","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11343,"byte_end":11439,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ among that set of services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11440,"byte_end":11471,"line_start":13,"line_end":13,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11472,"byte_end":11475,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [Power of Two Random Choices]: http://www.eecs.harvard.edu/~michaelm/postscripts/handbook2001.pdf","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11476,"byte_end":11577,"line_start":15,"line_end":15,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11578,"byte_end":11581,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Second, [`pool`] implements a dynamically sized pool of services. It estimates the overall","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11582,"byte_end":11676,"line_start":17,"line_end":17,"column_start":1,"column_end":95}},{"value":"/ current load by tracking successful and unsuccessful calls to [`poll_ready`], and uses an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11677,"byte_end":11770,"line_start":18,"line_end":18,"column_start":1,"column_end":94}},{"value":"/ exponentially weighted moving average to add (using [`MakeService`]) or remove (by dropping)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11771,"byte_end":11867,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ services in response to increases or decreases in load. Use this if you are able to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11868,"byte_end":11955,"line_start":20,"line_end":20,"column_start":1,"column_end":88}},{"value":"/ dynamically add more service endpoints to the system to handle added load.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":11956,"byte_end":12034,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12035,"byte_end":12038,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12039,"byte_end":12053,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12054,"byte_end":12057,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12058,"byte_end":12069,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12070,"byte_end":12100,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"load\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12101,"byte_end":12131,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/ # fn warnings_are_errors() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12132,"byte_end":12164,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"/ use tower::balance::p2c::Balance;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12165,"byte_end":12202,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/ use tower::load::Load;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12203,"byte_end":12229,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/ use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12230,"byte_end":12267,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ use futures_util::pin_mut;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12268,"byte_end":12298,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"/ # use futures_core::Stream;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12299,"byte_end":12330,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ # use futures_util::StreamExt;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12331,"byte_end":12365,"line_start":34,"line_end":34,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12366,"byte_end":12369,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ async fn spread<Req, S: Service<Req> + Load>(svc1: S, svc2: S, reqs: impl Stream<Item = Req>)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12370,"byte_end":12467,"line_start":36,"line_end":36,"column_start":1,"column_end":98}},{"value":"/ where","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12468,"byte_end":12477,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"/     S::Error: Into<tower::BoxError>,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12478,"byte_end":12518,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ # // this bound is pretty unfortunate, and the compiler does _not_ help","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12519,"byte_end":12594,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/     S::Metric: std::fmt::Debug,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12595,"byte_end":12630,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/ {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12631,"byte_end":12636,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/     // Spread load evenly across the two services","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12637,"byte_end":12690,"line_start":42,"line_end":42,"column_start":1,"column_end":54}},{"value":"/     let p2c = Balance::new(tower::discover::ServiceList::new(vec![svc1, svc2]));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12691,"byte_end":12775,"line_start":43,"line_end":43,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12776,"byte_end":12779,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/     // Issue all the requests that come in.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12780,"byte_end":12827,"line_start":45,"line_end":45,"column_start":1,"column_end":48}},{"value":"/     // Some will go to svc1, some will go to svc2.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12828,"byte_end":12882,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/     pin_mut!(reqs);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12883,"byte_end":12906,"line_start":47,"line_end":47,"column_start":1,"column_end":24}},{"value":"/     let mut responses = p2c.call_all(reqs);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12907,"byte_end":12954,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"/     while let Some(rsp) = responses.next().await {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":12955,"byte_end":13009,"line_start":49,"line_end":49,"column_start":1,"column_end":55}},{"value":"/         // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13010,"byte_end":13028,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13029,"byte_end":13038,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13039,"byte_end":13044,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13045,"byte_end":13052,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13053,"byte_end":13060,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13061,"byte_end":13064,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`MakeService`]: crate::MakeService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13065,"byte_end":13104,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13105,"byte_end":13151,"line_start":57,"line_end":57,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::balance::error","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":3140},{"krate":0,"index":3143},{"krate":0,"index":10},{"krate":0,"index":12}],"decl_id":null,"docs":" Error types for the [`tower::balance`] middleware.","sig":null,"attributes":[{"value":"/ Error types for the [`tower::balance`] middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13196,"byte_end":13250,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13251,"byte_end":13254,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`tower::balance`]: crate::balance","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13255,"byte_end":13293,"line_start":3,"line_end":3,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":3140},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13391,"byte_end":13399,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"Discover","qualname":"::balance::error::Discover","value":"","parent":null,"children":[],"decl_id":null,"docs":" The balancer's endpoint discovery stream failed.\n","sig":null,"attributes":[{"value":"/ The balancer's endpoint discovery stream failed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13310,"byte_end":13362,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"p2c","qualname":"::balance::p2c","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":54},{"krate":0,"index":130},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":275}],"decl_id":null,"docs":" This module implements the \"[Power of Two Random Choices]\" load balancing algorithm.","sig":null,"attributes":[{"value":"/ This module implements the \"[Power of Two Random Choices]\" load balancing algorithm.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":13733,"byte_end":13821,"line_start":1,"line_end":1,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":13822,"byte_end":13825,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ It is a simple but robust technique for spreading load across services with only inexact load","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":13826,"byte_end":13923,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ measurements. As its name implies, whenever a request comes in, it samples two ready services","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":13924,"byte_end":14021,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ at random, and issues the request to whichever service is less loaded. How loaded a service is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14022,"byte_end":14120,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ is determined by the return value of [`Load`](crate::load::Load).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14121,"byte_end":14190,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14191,"byte_end":14194,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ As described in the [Finagle Guide][finagle]:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14195,"byte_end":14244,"line_start":8,"line_end":8,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14245,"byte_end":14248,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ > The algorithm randomly picks two services from the set of ready endpoints and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14249,"byte_end":14332,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"/ > selects the least loaded of the two. By repeatedly using this strategy, we can","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14333,"byte_end":14417,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"/ > expect a manageable upper bound on the maximum load of any server.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14418,"byte_end":14490,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ >","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14491,"byte_end":14496,"line_start":13,"line_end":13,"column_start":1,"column_end":6}},{"value":"/ > The maximum load variance between any two servers is bound by `ln(ln(n))` where","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14497,"byte_end":14582,"line_start":14,"line_end":14,"column_start":1,"column_end":86}},{"value":"/ > `n` is the number of servers in the cluster.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14583,"byte_end":14633,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14634,"byte_end":14637,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The balance service and layer implementations rely on _service discovery_ to provide the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14638,"byte_end":14730,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ underlying set of services to balance requests across. This happens through the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14731,"byte_end":14814,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ [`Discover`](crate::discover::Discover) trait, which is essentially a [`Stream`] that indicates","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14815,"byte_end":14914,"line_start":19,"line_end":19,"column_start":1,"column_end":100}},{"value":"/ when services become available or go away. If you have a fixed set of services, consider using","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":14915,"byte_end":15013,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/ [`ServiceList`](crate::discover::ServiceList).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15014,"byte_end":15064,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15065,"byte_end":15068,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Since the load balancer needs to perform _random_ choices, the constructors in this module","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15069,"byte_end":15163,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"/ usually come in two forms: one that uses randomness provided by the operating system, and one","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15164,"byte_end":15261,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/ that lets you specify the random seed to use. Usually the former is what you'll want, though","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15262,"byte_end":15358,"line_start":25,"line_end":25,"column_start":1,"column_end":97}},{"value":"/ the latter may come in handy for reproducability or to reduce reliance on the operating system.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15359,"byte_end":15458,"line_start":26,"line_end":26,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15459,"byte_end":15462,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [Power of Two Random Choices]: http://www.eecs.harvard.edu/~michaelm/postscripts/handbook2001.pdf","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15463,"byte_end":15564,"line_start":28,"line_end":28,"column_start":1,"column_end":102}},{"value":"/ [finagle]: https://twitter.github.io/finagle/guide/Clients.html#power-of-two-choices-p2c-least-loaded","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15565,"byte_end":15670,"line_start":29,"line_end":29,"column_start":1,"column_end":106}},{"value":"/ [`Stream`]: https://docs.rs/futures/0.3/futures/stream/trait.Stream.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/mod.rs","byte_start":15671,"byte_end":15747,"line_start":30,"line_end":30,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":29},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16925,"byte_end":16941,"line_start":21,"line_end":21,"column_start":12,"column_end":28},"name":"MakeBalanceLayer","qualname":"::balance::p2c::layer::MakeBalanceLayer","value":"MakeBalanceLayer {  }","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":" Construct load balancers ([`Balance`]) over dynamic service sets ([`Discover`]) produced by the\n \"inner\" service in response to requests coming from the \"outer\" service.","sig":null,"attributes":[{"value":"/ Construct load balancers ([`Balance`]) over dynamic service sets ([`Discover`]) produced by the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":15995,"byte_end":16094,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ \"inner\" service in response to requests coming from the \"outer\" service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16095,"byte_end":16171,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16172,"byte_end":16175,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This construction may seem a little odd at first glance. This is not a layer that takes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16176,"byte_end":16267,"line_start":8,"line_end":8,"column_start":1,"column_end":92}},{"value":"/ requests and produces responses in the traditional sense. Instead, it is more like","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16268,"byte_end":16354,"line_start":9,"line_end":9,"column_start":1,"column_end":87}},{"value":"/ [`MakeService`] in that it takes service _descriptors_ (see `Target` on [`MakeService`])","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16355,"byte_end":16447,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/ and produces _services_. Since [`Balance`] spreads requests across a _set_ of services,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16448,"byte_end":16539,"line_start":11,"line_end":11,"column_start":1,"column_end":92}},{"value":"/ the inner service should produce a [`Discover`], not just a single","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16540,"byte_end":16610,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/ [`Service`], given a service descriptor.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16611,"byte_end":16655,"line_start":13,"line_end":13,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16656,"byte_end":16659,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](crate::balance) for details on load balancing.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16660,"byte_end":16747,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16748,"byte_end":16751,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Balance`]: crate::balance::p2c::Balance","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16752,"byte_end":16797,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"/ [`Discover`]: crate::discover::Discover","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16798,"byte_end":16841,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/ [`MakeService`]: crate::MakeService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16842,"byte_end":16881,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":16882,"byte_end":16913,"line_start":20,"line_end":20,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17100,"byte_end":17103,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<MakeBalanceLayer<D, Req>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build balancers using operating system entropy.\n","sig":null,"attributes":[{"value":"/ Build balancers using operating system entropy.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17037,"byte_end":17088,"line_start":26,"line_end":26,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":93},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18756,"byte_end":18767,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"MakeBalance","qualname":"::balance::p2c::make::MakeBalance","value":"MakeBalance {  }","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" Constructs load balancers over dynamic service sets produced by a wrapped \"inner\" service.","sig":null,"attributes":[{"value":"/ Constructs load balancers over dynamic service sets produced by a wrapped \"inner\" service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18090,"byte_end":18184,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18185,"byte_end":18188,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is effectively an implementation of [`MakeService`] except that it forwards the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18189,"byte_end":18285,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/ descriptors (`Target`) to an inner service (`S`), and expects that service to produce a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18286,"byte_end":18377,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ service set in the form of a [`Discover`]. It then wraps the service set in a [`Balance`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18378,"byte_end":18471,"line_start":19,"line_end":19,"column_start":1,"column_end":94}},{"value":"/ before returning it as the \"made\" service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18472,"byte_end":18518,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18519,"byte_end":18522,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](crate::balance) for details on load balancing.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18523,"byte_end":18610,"line_start":22,"line_end":22,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18611,"byte_end":18614,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`MakeService`]: crate::MakeService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18615,"byte_end":18654,"line_start":24,"line_end":24,"column_start":1,"column_end":40}},{"value":"/ [`Discover`]: crate::discover::Discover","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18655,"byte_end":18698,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ [`Balance`]: crate::balance::p2c::Balance","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18699,"byte_end":18744,"line_start":26,"line_end":26,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3145},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":18955,"byte_end":18965,"line_start":36,"line_end":36,"column_start":16,"column_end":26},"name":"MakeFuture","qualname":"::balance::p2c::make::MakeFuture","value":"MakeFuture {  }","parent":null,"children":[{"krate":0,"index":3148},{"krate":0,"index":3149}],"decl_id":null,"docs":" A [`Balance`] in the making.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":19159,"byte_end":19162,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<MakeBalance<S, Req>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build balancers using operating system entropy.\n","sig":null,"attributes":[{"value":"/ Build balancers using operating system entropy.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":19096,"byte_end":19147,"line_start":44,"line_end":44,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":210},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22429,"byte_end":22436,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"Balance","qualname":"::balance::p2c::service::Balance","value":"Balance {  }","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"decl_id":null,"docs":" Efficiently distributes requests across an arbitrary number of services.","sig":null,"attributes":[{"value":"/ Efficiently distributes requests across an arbitrary number of services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":21802,"byte_end":21878,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":21879,"byte_end":21882,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](..) for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":21883,"byte_end":21940,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":21941,"byte_end":21944,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Note that [`Balance`] requires that the [`Discover`] you use is [`Unpin`] in order to implement","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":21945,"byte_end":22044,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ [`Service`]. This is because it needs to be accessed from [`Service::poll_ready`], which takes","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22045,"byte_end":22143,"line_start":26,"line_end":26,"column_start":1,"column_end":99}},{"value":"/ `&mut self`. You can achieve this easily by wrapping your [`Discover`] in [`Box::pin`] before you","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22144,"byte_end":22245,"line_start":27,"line_end":27,"column_start":1,"column_end":102}},{"value":"/ construct the [`Balance`] instance. For more details, see [#319].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22246,"byte_end":22315,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22316,"byte_end":22319,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`Box::pin`]: std::boxed::Box::pin()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22320,"byte_end":22360,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/ [#319]: https://github.com/tower-rs/tower/issues/319","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22361,"byte_end":22417,"line_start":31,"line_end":31,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":23685,"byte_end":23688,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<Balance<D, Req>>::new","value":"pub fn new(D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a load balancer that uses operating system entropy.\n","sig":null,"attributes":[{"value":"/ Constructs a load balancer that uses operating system entropy.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":23607,"byte_end":23673,"line_start":87,"line_end":87,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":23907,"byte_end":23915,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"from_rng","qualname":"<Balance<D, Req>>::from_rng","value":"pub fn from_rng<R: Rng>(D, R) -> Result<Self, rand::Error>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a load balancer seeded with the provided random number generator.\n","sig":null,"attributes":[{"value":"/ Constructs a load balancer seeded with the provided random number generator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":23815,"byte_end":23895,"line_start":92,"line_end":92,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":24289,"byte_end":24292,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"len","qualname":"<Balance<D, Req>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of endpoints currently tracked by the balancer.\n","sig":null,"attributes":[{"value":"/ Returns the number of endpoints currently tracked by the balancer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":24207,"byte_end":24277,"line_start":105,"line_end":105,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":24411,"byte_end":24419,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Balance<D, Req>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether or not the balancer is empty.\n","sig":null,"attributes":[{"value":"/ Returns whether or not the balancer is empty.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":24350,"byte_end":24399,"line_start":110,"line_end":110,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":278},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::balance::pool","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":3459},{"krate":0,"index":3466},{"krate":0,"index":3468},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3474},{"krate":0,"index":3475},{"krate":0,"index":3477},{"krate":0,"index":3489},{"krate":0,"index":324},{"krate":0,"index":329},{"krate":0,"index":3710},{"krate":0,"index":3716},{"krate":0,"index":3717},{"krate":0,"index":3719},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":349},{"krate":0,"index":356},{"krate":0,"index":361},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":3799},{"krate":0,"index":3804},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":385}],"decl_id":null,"docs":" This module defines a load-balanced pool of services that adds new services when load is high.","sig":null,"attributes":[{"value":"/ This module defines a load-balanced pool of services that adds new services when load is high.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":32505,"byte_end":32603,"line_start":1,"line_end":1,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":32604,"byte_end":32607,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The pool uses `poll_ready` as a signal indicating whether additional services should be spawned","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":32608,"byte_end":32707,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ to handle the current level of load. Specifically, every time `poll_ready` on the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":32708,"byte_end":32807,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ returns `Ready`, [`Pool`] consider that a 0, and every time it returns `Pending`, [`Pool`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":32808,"byte_end":32902,"line_start":5,"line_end":5,"column_start":1,"column_end":95}},{"value":"/ considers it a 1. [`Pool`] then maintains an [exponential moving","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":32903,"byte_end":32971,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ average](https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average) over those","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":32972,"byte_end":33068,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ samples, which gives an estimate of how often the underlying service has been ready when it was","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":33069,"byte_end":33168,"line_start":8,"line_end":8,"column_start":1,"column_end":100}},{"value":"/ needed \"recently\" (see [`Builder::urgency`]). If the service is loaded (see","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":33169,"byte_end":33248,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ [`Builder::loaded_above`]), a new service is created and added to the underlying [`Balance`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":33249,"byte_end":33346,"line_start":10,"line_end":10,"column_start":1,"column_end":98}},{"value":"/ If the service is underutilized (see [`Builder::underutilized_below`]) and there are two or","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":33347,"byte_end":33442,"line_start":11,"line_end":11,"column_start":1,"column_end":96}},{"value":"/ more services, then the latest added service is removed. In either case, the load estimate is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":33443,"byte_end":33540,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ reset to its initial value (see [`Builder::initial`] to prevent services from being rapidly","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":33541,"byte_end":33636,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"/ added or removed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":33637,"byte_end":33658,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"deny(missing_docs)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":33659,"byte_end":33681,"line_start":15,"line_end":15,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3477},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":34445,"byte_end":34459,"line_start":48,"line_end":48,"column_start":16,"column_end":30},"name":"PoolDiscoverer","qualname":"::balance::pool::PoolDiscoverer","value":"PoolDiscoverer {  }","parent":null,"children":[{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":3483},{"krate":0,"index":3484},{"krate":0,"index":3485},{"krate":0,"index":3486},{"krate":0,"index":3487},{"krate":0,"index":3488}],"decl_id":null,"docs":" A wrapper around `MakeService` that discovers a new service when load is high, and removes a\n service when load is low. See [`Pool`].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3710},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39136,"byte_end":39143,"line_start":177,"line_end":177,"column_start":12,"column_end":19},"name":"Builder","qualname":"::balance::pool::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":3711},{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3714},{"krate":0,"index":3715}],"decl_id":null,"docs":" A [builder] that lets you configure how a [`Pool`] determines whether the underlying service is\n loaded or not. See the [module-level documentation](self) and the builder's methods for\n details.","sig":null,"attributes":[{"value":"/ A [builder] that lets you configure how a [`Pool`] determines whether the underlying service is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":38745,"byte_end":38844,"line_start":171,"line_end":171,"column_start":1,"column_end":100}},{"value":"/ loaded or not. See the [module-level documentation](self) and the builder's methods for","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":38845,"byte_end":38936,"line_start":172,"line_end":172,"column_start":1,"column_end":92}},{"value":"/ details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":38937,"byte_end":38949,"line_start":173,"line_end":173,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":38950,"byte_end":38953,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/  [builder]: https://rust-lang-nursery.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":38954,"byte_end":39094,"line_start":175,"line_end":175,"column_start":1,"column_end":141}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39632,"byte_end":39635,"line_start":201,"line_end":201,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder with default values for all load settings.","sig":null,"attributes":[{"value":"/ Create a new builder with default values for all load settings.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39467,"byte_end":39534,"line_start":198,"line_end":198,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39539,"byte_end":39542,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ If you just want to use the defaults, you can just use [`Pool::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39547,"byte_end":39620,"line_start":200,"line_end":200,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40036,"byte_end":40055,"line_start":210,"line_end":210,"column_start":12,"column_end":31},"name":"underutilized_below","qualname":"<Builder>::underutilized_below","value":"pub fn underutilized_below(&mut Self, f64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" When the estimated load (see the [module-level docs](self)) drops below this\n threshold, and there are at least two services active, a service is removed.","sig":null,"attributes":[{"value":"/ When the estimated load (see the [module-level docs](self)) drops below this","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39683,"byte_end":39763,"line_start":205,"line_end":205,"column_start":5,"column_end":85}},{"value":"/ threshold, and there are at least two services active, a service is removed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39768,"byte_end":39848,"line_start":206,"line_end":206,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39853,"byte_end":39856,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ The default value is 0.01. That is, when one in every 100 `poll_ready` calls return","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39861,"byte_end":39948,"line_start":208,"line_end":208,"column_start":5,"column_end":92}},{"value":"/ `Pending`, then the underlying service is considered underutilized.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39953,"byte_end":40024,"line_start":209,"line_end":209,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40557,"byte_end":40569,"line_start":221,"line_end":221,"column_start":12,"column_end":24},"name":"loaded_above","qualname":"<Builder>::loaded_above","value":"pub fn loaded_above(&mut Self, f64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" When the estimated load (see the [module-level docs](self)) exceeds this\n threshold, and no service is currently in the process of being added, a new service is\n scheduled to be added to the underlying [`Balance`].","sig":null,"attributes":[{"value":"/ When the estimated load (see the [module-level docs](self)) exceeds this","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40140,"byte_end":40216,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ threshold, and no service is currently in the process of being added, a new service is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40221,"byte_end":40311,"line_start":216,"line_end":216,"column_start":5,"column_end":95}},{"value":"/ scheduled to be added to the underlying [`Balance`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40316,"byte_end":40372,"line_start":217,"line_end":217,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40377,"byte_end":40380,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ The default value is 0.5. That is, when every other call to `poll_ready` returns","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40385,"byte_end":40469,"line_start":219,"line_end":219,"column_start":5,"column_end":89}},{"value":"/ `Pending`, then the underlying service is considered highly loaded.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40474,"byte_end":40545,"line_start":220,"line_end":220,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40878,"byte_end":40885,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"initial","qualname":"<Builder>::initial","value":"pub fn initial(&mut Self, f64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" The initial estimated load average.","sig":null,"attributes":[{"value":"/ The initial estimated load average.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40657,"byte_end":40696,"line_start":226,"line_end":226,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40701,"byte_end":40704,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This is also the value that the estimated load will be reset to whenever a service is added","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40709,"byte_end":40804,"line_start":228,"line_end":228,"column_start":5,"column_end":100}},{"value":"/ or removed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40809,"byte_end":40824,"line_start":229,"line_end":229,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40829,"byte_end":40832,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The default value is 0.1.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40837,"byte_end":40866,"line_start":231,"line_end":231,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41773,"byte_end":41780,"line_start":250,"line_end":250,"column_start":12,"column_end":19},"name":"urgency","qualname":"<Builder>::urgency","value":"pub fn urgency(&mut Self, f64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" How aggressively the estimated load average is updated.","sig":null,"attributes":[{"value":"/ How aggressively the estimated load average is updated.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":40973,"byte_end":41032,"line_start":237,"line_end":237,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41037,"byte_end":41040,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This is the α parameter of the formula for the [exponential moving","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41045,"byte_end":41116,"line_start":239,"line_end":239,"column_start":5,"column_end":75}},{"value":"/ average](https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average), and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41121,"byte_end":41211,"line_start":240,"line_end":240,"column_start":5,"column_end":95}},{"value":"/ dictates how quickly new samples of the current load affect the estimated load. If the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41216,"byte_end":41306,"line_start":241,"line_end":241,"column_start":5,"column_end":95}},{"value":"/ value is closer to 1, newer samples affect the load average a lot (when α is 1, the load","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41311,"byte_end":41404,"line_start":242,"line_end":242,"column_start":5,"column_end":97}},{"value":"/ average is immediately set to the current load). If the value is closer to 0, newer samples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41409,"byte_end":41504,"line_start":243,"line_end":243,"column_start":5,"column_end":100}},{"value":"/ affect the load average very little at a time.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41509,"byte_end":41559,"line_start":244,"line_end":244,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41564,"byte_end":41567,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ The given value is clamped to `[0,1]`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41572,"byte_end":41614,"line_start":246,"line_end":246,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41619,"byte_end":41622,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ The default value is 0.05, meaning, in very approximate terms, that each new load sample","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41627,"byte_end":41719,"line_start":248,"line_end":248,"column_start":5,"column_end":97}},{"value":"/ affects the estimated load by 5%.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41724,"byte_end":41761,"line_start":249,"line_end":249,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":42163,"byte_end":42175,"line_start":261,"line_end":261,"column_start":12,"column_end":24},"name":"max_services","qualname":"<Builder>::max_services","value":"pub fn max_services(&mut Self, Option<usize>) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" The maximum number of backing `Service` instances to maintain.","sig":null,"attributes":[{"value":"/ The maximum number of backing `Service` instances to maintain.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41889,"byte_end":41955,"line_start":255,"line_end":255,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41960,"byte_end":41963,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ When the limit is reached, the load estimate is clamped to the high load threshhold, and no","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":41968,"byte_end":42063,"line_start":257,"line_end":257,"column_start":5,"column_end":100}},{"value":"/ new service is spawned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":42068,"byte_end":42095,"line_start":258,"line_end":258,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":42100,"byte_end":42103,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ No maximum limit is imposed by default.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":42108,"byte_end":42151,"line_start":260,"line_end":260,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":42310,"byte_end":42315,"line_start":267,"line_end":267,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"pub fn build<MS, Target, Request>(&Self, MS, Target)\n-> Pool<MS, Target, Request> where MS: MakeService<Target, Request>,\nMS::Service: Load, <MS::Service as Load>::Metric: std::fmt::Debug,\nMS::MakeError: Into<crate::BoxError>, MS::Error: Into<crate::BoxError>,\nTarget: Clone","parent":null,"children":[],"decl_id":null,"docs":" See [`Pool::new`].\n","sig":null,"attributes":[{"value":"/ See [`Pool::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":42276,"byte_end":42298,"line_start":266,"line_end":266,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":349},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":43246,"byte_end":43250,"line_start":301,"line_end":301,"column_start":12,"column_end":16},"name":"Pool","qualname":"::balance::pool::Pool","value":"Pool {  }","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"decl_id":null,"docs":" A dynamically sized, load-balanced pool of `Service` instances.\n","sig":null,"attributes":[{"value":"/ A dynamically sized, load-balanced pool of `Service` instances.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":43167,"byte_end":43234,"line_start":300,"line_end":300,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44760,"byte_end":44763,"line_start":346,"line_end":346,"column_start":12,"column_end":15},"name":"new","qualname":"<Pool<MS, Target, Request>>::new","value":"pub fn new(MS, Target) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new dynamically sized `Pool`.","sig":null,"attributes":[{"value":"/ Construct a new dynamically sized `Pool`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44417,"byte_end":44462,"line_start":340,"line_end":340,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44467,"byte_end":44470,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ If many calls to `poll_ready` return `Pending`, `new_service` is used to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44475,"byte_end":44551,"line_start":342,"line_end":342,"column_start":5,"column_end":81}},{"value":"/ construct another `Service` that is then added to the load-balanced pool.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44556,"byte_end":44633,"line_start":343,"line_end":343,"column_start":5,"column_end":82}},{"value":"/ If many calls to `poll_ready` succeed, the most recently added `Service`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44638,"byte_end":44714,"line_start":344,"line_end":344,"column_start":5,"column_end":81}},{"value":"/ is dropped from the pool.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44719,"byte_end":44748,"line_start":345,"line_end":345,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":3799},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":47918,"byte_end":47935,"line_start":428,"line_end":428,"column_start":12,"column_end":29},"name":"DropNotifyService","qualname":"::balance::pool::DropNotifyService","value":"DropNotifyService {  }","parent":null,"children":[{"krate":0,"index":3801},{"krate":0,"index":3802},{"krate":0,"index":3803}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":393},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::buffer","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":421},{"krate":0,"index":459},{"krate":0,"index":496},{"krate":0,"index":511},{"krate":0,"index":577},{"krate":0,"index":647},{"krate":0,"index":650}],"decl_id":null,"docs":" Middleware that provides a buffered mpsc channel to a service.","sig":null,"attributes":[{"value":"cfg(feature = \"buffer\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7287,"byte_end":7313,"line_start":163,"line_end":163,"column_start":1,"column_end":27}},{"value":"/ Middleware that provides a buffered mpsc channel to a service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":48705,"byte_end":48771,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":48772,"byte_end":48775,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Sometimes you want to give out multiple handles to a single service, and allow each handle to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":48776,"byte_end":48873,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ enqueue requests. That is, you want a [`Service`] to be [`Clone`]. This module allows you to do","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":48874,"byte_end":48973,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ that by placing the service behind a multi-producer, single-consumer buffering channel. Clients","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":48974,"byte_end":49073,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ enqueue requests by sending on the channel from any of the handles ([`Buffer`]), and the single","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49074,"byte_end":49173,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ service running elsewhere (usually spawned) receives and services the requests one by one. Each","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49174,"byte_end":49273,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ request is enqueued alongside a response channel that allows the service to report the result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49274,"byte_end":49371,"line_start":8,"line_end":8,"column_start":1,"column_end":98}},{"value":"/ of the request back to the caller.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49372,"byte_end":49410,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49411,"byte_end":49414,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49415,"byte_end":49429,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49430,"byte_end":49433,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49434,"byte_end":49445,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49446,"byte_end":49476,"line_start":14,"line_end":14,"column_start":1,"column_end":31}},{"value":"/ use tower::buffer::Buffer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49477,"byte_end":49507,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49508,"byte_end":49538,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49539,"byte_end":49576,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49577,"byte_end":49607,"line_start":18,"line_end":18,"column_start":1,"column_end":31}},{"value":"/ async fn mass_produce<S: Service<usize>>(svc: S)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49608,"byte_end":49660,"line_start":19,"line_end":19,"column_start":1,"column_end":53}},{"value":"/ where","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49661,"byte_end":49670,"line_start":20,"line_end":20,"column_start":1,"column_end":10}},{"value":"/   S: 'static + Send,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49671,"byte_end":49695,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/   S::Error: Send + Sync + std::error::Error,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49696,"byte_end":49744,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/   S::Future: Send","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49745,"byte_end":49766,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/ {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49767,"byte_end":49772,"line_start":24,"line_end":24,"column_start":1,"column_end":6}},{"value":"/     let svc = Buffer::new(svc, 10 /* buffer length */);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49773,"byte_end":49832,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/     for _ in 0..10 {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49833,"byte_end":49857,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/         let mut svc = svc.clone();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49858,"byte_end":49896,"line_start":27,"line_end":27,"column_start":1,"column_end":39}},{"value":"/         tokio::spawn(async move {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49897,"byte_end":49934,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/             for i in 0usize.. {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49935,"byte_end":49970,"line_start":29,"line_end":29,"column_start":1,"column_end":36}},{"value":"/                 svc.ready().await.expect(\"service crashed\").call(i).await;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":49971,"byte_end":50049,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/             }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50050,"byte_end":50067,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/         });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50068,"byte_end":50083,"line_start":32,"line_end":32,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50084,"byte_end":50093,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50094,"byte_end":50099,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50100,"byte_end":50107,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50108,"byte_end":50111,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50112,"byte_end":50143,"line_start":37,"line_end":37,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":394},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::buffer::error","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":3807},{"krate":0,"index":3809},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420}],"decl_id":null,"docs":" Error types for the `Buffer` middleware.\n","sig":null,"attributes":[{"value":"/ Error types for the `Buffer` middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50292,"byte_end":50336,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":3807},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50552,"byte_end":50564,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"ServiceError","qualname":"::buffer::error::ServiceError","value":"ServiceError {  }","parent":null,"children":[{"krate":0,"index":3808}],"decl_id":null,"docs":" An error produced by a [`Service`] wrapped by a [`Buffer`]","sig":null,"attributes":[{"value":"/ An error produced by a [`Service`] wrapped by a [`Buffer`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50387,"byte_end":50449,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50450,"byte_end":50453,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50454,"byte_end":50485,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/ [`Buffer`]: crate::buffer::Buffer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50486,"byte_end":50523,"line_start":9,"line_end":9,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50677,"byte_end":50683,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"name":"Closed","qualname":"::buffer::error::Closed","value":"Closed {  }","parent":null,"children":[{"krate":0,"index":406}],"decl_id":null,"docs":" An error produced when the a buffer's worker closes unexpectedly.\n","sig":null,"attributes":[{"value":"/ An error produced when the a buffer's worker closes unexpectedly.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50596,"byte_end":50665,"line_start":15,"line_end":15,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":421},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::buffer::future","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":3811},{"krate":0,"index":3814},{"krate":0,"index":3817},{"krate":0,"index":3847},{"krate":0,"index":3855},{"krate":0,"index":3858},{"krate":0,"index":3867},{"krate":0,"index":449},{"krate":0,"index":453}],"decl_id":null,"docs":" Future types for the [`Buffer`] middleware.","sig":null,"attributes":[{"value":"/ Future types for the [`Buffer`] middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":51861,"byte_end":51908,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":51909,"byte_end":51912,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`Buffer`]: crate::buffer::Buffer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":51913,"byte_end":51950,"line_start":3,"line_end":3,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3811},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":52275,"byte_end":52289,"line_start":17,"line_end":17,"column_start":16,"column_end":30},"name":"ResponseFuture","qualname":"::buffer::future::ResponseFuture","value":"ResponseFuture {  }","parent":null,"children":[{"krate":0,"index":3813}],"decl_id":null,"docs":" Future that completes when the buffered service eventually services the submitted request.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":476},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54341,"byte_end":54352,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"BufferLayer","qualname":"::buffer::layer::BufferLayer","value":"BufferLayer {  }","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" Adds an mpsc buffer in front of an inner service.","sig":null,"attributes":[{"value":"/ Adds an mpsc buffer in front of an inner service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54081,"byte_end":54134,"line_start":6,"line_end":6,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54135,"byte_end":54138,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The default Tokio executor is used to run the given service,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54139,"byte_end":54203,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/ which means that this layer can only be used on the Tokio runtime.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54204,"byte_end":54274,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54275,"byte_end":54278,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See the module documentation for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54279,"byte_end":54329,"line_start":11,"line_end":11,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55483,"byte_end":55486,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferLayer<Request>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`BufferLayer`] with the provided `bound`.","sig":null,"attributes":[{"value":"/ Creates a new [`BufferLayer`] with the provided `bound`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54460,"byte_end":54520,"line_start":18,"line_end":18,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54525,"byte_end":54528,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ `bound` gives the maximal number of requests that can be queued for the service before","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54533,"byte_end":54623,"line_start":20,"line_end":20,"column_start":5,"column_end":95}},{"value":"/ backpressure is applied to callers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54628,"byte_end":54667,"line_start":21,"line_end":21,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54672,"byte_end":54675,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ # A note on choosing a `bound`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54680,"byte_end":54714,"line_start":23,"line_end":23,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54719,"byte_end":54722,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ When [`Buffer`]'s implementation of [`poll_ready`] returns [`Poll::Ready`], it reserves a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54727,"byte_end":54820,"line_start":25,"line_end":25,"column_start":5,"column_end":98}},{"value":"/ slot in the channel for the forthcoming [`call`]. However, if this call doesn't arrive,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54825,"byte_end":54916,"line_start":26,"line_end":26,"column_start":5,"column_end":96}},{"value":"/ this reserved slot may be held up for a long time. As a result, it's advisable to set","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54921,"byte_end":55010,"line_start":27,"line_end":27,"column_start":5,"column_end":94}},{"value":"/ `bound` to be at least the maximum number of concurrent requests the [`Buffer`] will see.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55015,"byte_end":55108,"line_start":28,"line_end":28,"column_start":5,"column_end":98}},{"value":"/ If you do not, all the slots in the buffer may be held up by futures that have just called","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55113,"byte_end":55207,"line_start":29,"line_end":29,"column_start":5,"column_end":99}},{"value":"/ [`poll_ready`] but will not issue a [`call`], which prevents other senders from issuing new","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55212,"byte_end":55307,"line_start":30,"line_end":30,"column_start":5,"column_end":100}},{"value":"/ requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55312,"byte_end":55325,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55330,"byte_end":55333,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ [`Poll::Ready`]: std::task::Poll::Ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55338,"byte_end":55381,"line_start":33,"line_end":33,"column_start":5,"column_end":48}},{"value":"/ [`call`]: crate::Service::call","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55386,"byte_end":55420,"line_start":34,"line_end":34,"column_start":5,"column_end":39}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55425,"byte_end":55471,"line_start":35,"line_end":35,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":3898},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":57330,"byte_end":57336,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::buffer::service::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":3901},{"krate":0,"index":3902},{"krate":0,"index":3903},{"krate":0,"index":3904}],"decl_id":null,"docs":" Adds an mpsc buffer in front of an inner service.","sig":null,"attributes":[{"value":"/ Adds an mpsc buffer in front of an inner service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":57193,"byte_end":57246,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":57247,"byte_end":57250,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ See the module documentation for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":57251,"byte_end":57301,"line_start":16,"line_end":16,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59685,"byte_end":59688,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<Buffer<T, Request>>::new","value":"pub fn new(T, usize) -> Self where T: Send + 'static, T::Future: Send,\nT::Error: Send + Sync, Request: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Buffer`] wrapping `service`.","sig":null,"attributes":[{"value":"/ Creates a new [`Buffer`] wrapping `service`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58517,"byte_end":58565,"line_start":47,"line_end":47,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58570,"byte_end":58573,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ `bound` gives the maximal number of requests that can be queued for the service before","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58578,"byte_end":58668,"line_start":49,"line_end":49,"column_start":5,"column_end":95}},{"value":"/ backpressure is applied to callers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58673,"byte_end":58712,"line_start":50,"line_end":50,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58717,"byte_end":58720,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The default Tokio executor is used to run the given service, which means that this method","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58725,"byte_end":58818,"line_start":52,"line_end":52,"column_start":5,"column_end":98}},{"value":"/ must be called while on the Tokio runtime.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58823,"byte_end":58869,"line_start":53,"line_end":53,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58874,"byte_end":58877,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # A note on choosing a `bound`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58882,"byte_end":58916,"line_start":55,"line_end":55,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58921,"byte_end":58924,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ When [`Buffer`]'s implementation of [`poll_ready`] returns [`Poll::Ready`], it reserves a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58929,"byte_end":59022,"line_start":57,"line_end":57,"column_start":5,"column_end":98}},{"value":"/ slot in the channel for the forthcoming [`call`]. However, if this call doesn't arrive,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59027,"byte_end":59118,"line_start":58,"line_end":58,"column_start":5,"column_end":96}},{"value":"/ this reserved slot may be held up for a long time. As a result, it's advisable to set","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59123,"byte_end":59212,"line_start":59,"line_end":59,"column_start":5,"column_end":94}},{"value":"/ `bound` to be at least the maximum number of concurrent requests the [`Buffer`] will see.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59217,"byte_end":59310,"line_start":60,"line_end":60,"column_start":5,"column_end":98}},{"value":"/ If you do not, all the slots in the buffer may be held up by futures that have just called","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59315,"byte_end":59409,"line_start":61,"line_end":61,"column_start":5,"column_end":99}},{"value":"/ [`poll_ready`] but will not issue a [`call`], which prevents other senders from issuing new","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59414,"byte_end":59509,"line_start":62,"line_end":62,"column_start":5,"column_end":100}},{"value":"/ requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59514,"byte_end":59527,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59532,"byte_end":59535,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ [`Poll::Ready`]: std::task::Poll::Ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59540,"byte_end":59583,"line_start":65,"line_end":65,"column_start":5,"column_end":48}},{"value":"/ [`call`]: crate::Service::call","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59588,"byte_end":59622,"line_start":66,"line_end":66,"column_start":5,"column_end":39}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59627,"byte_end":59673,"line_start":67,"line_end":67,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":60302,"byte_end":60306,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"pair","qualname":"<Buffer<T, Request>>::pair","value":"pub fn pair(T, usize) -> (Buffer<T, Request>, Worker<T, Request>) where\nT: Send + 'static, T::Error: Send + Sync, Request: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Buffer`] wrapping `service`, but returns the background worker.","sig":null,"attributes":[{"value":"/ Creates a new [`Buffer`] wrapping `service`, but returns the background worker.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":59972,"byte_end":60055,"line_start":80,"line_end":80,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":60060,"byte_end":60063,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ This is useful if you do not want to spawn directly onto the tokio runtime","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":60068,"byte_end":60146,"line_start":82,"line_end":82,"column_start":5,"column_end":83}},{"value":"/ but instead want to use your own executor. This will return the [`Buffer`] and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":60151,"byte_end":60233,"line_start":83,"line_end":83,"column_start":5,"column_end":87}},{"value":"/ the background `Worker` that you can then spawn.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":60238,"byte_end":60290,"line_start":84,"line_end":84,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":3935},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":64368,"byte_end":64374,"line_start":24,"line_end":24,"column_start":16,"column_end":22},"name":"Worker","qualname":"::buffer::worker::Worker","value":"Worker {  }","parent":null,"children":[{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3940},{"krate":0,"index":3941},{"krate":0,"index":3942},{"krate":0,"index":3943},{"krate":0,"index":3944}],"decl_id":null,"docs":" Task that handles processing the buffer. This type should not be used\n directly, instead `Buffer` requires an `Executor` that can accept this task.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":653},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"discover","qualname":"::discover","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":665},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":735},{"krate":0,"index":740},{"krate":0,"index":4387},{"krate":0,"index":4397}],"decl_id":null,"docs":" Service discovery","sig":null,"attributes":[{"value":"cfg(feature = \"discover\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7380,"byte_end":7408,"line_start":166,"line_end":166,"column_start":1,"column_end":29}},{"value":"/ Service discovery","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":72859,"byte_end":72880,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":72881,"byte_end":72884,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides the [`Change`] enum, which indicates the arrival or departure of a service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":72885,"byte_end":72984,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ from a collection of similar services. Most implementations should use the [`Discover`] trait","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":72985,"byte_end":73082,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ in their bounds to indicate that they can handle services coming and going. [`Discover`] itself","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73083,"byte_end":73182,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ is primarily a convenience wrapper around [`TryStream<Ok = Change>`][`TryStream`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73183,"byte_end":73269,"line_start":6,"line_end":6,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73270,"byte_end":73273,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Every discovered service is assigned an identifier that is distinct among the currently active","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73274,"byte_end":73372,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ services. If that service later goes away, a [`Change::Remove`] is yielded with that service's","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73373,"byte_end":73471,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"/ identifier. From that point forward, the identifier may be re-used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73472,"byte_end":73543,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73544,"byte_end":73547,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73548,"byte_end":73562,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73563,"byte_end":73566,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73567,"byte_end":73578,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/ use futures_util::{future::poll_fn, pin_mut};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73579,"byte_end":73628,"line_start":15,"line_end":15,"column_start":1,"column_end":50}},{"value":"/ use tower::discover::{Change, Discover};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73629,"byte_end":73673,"line_start":16,"line_end":16,"column_start":1,"column_end":45}},{"value":"/ async fn services_monitor<D: Discover>(services: D) {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73674,"byte_end":73731,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/     pin_mut!(services);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73732,"byte_end":73759,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/     while let Some(Ok(change)) = poll_fn(|cx| services.as_mut().poll_discover(cx)).await {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73760,"byte_end":73854,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/         match change {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73855,"byte_end":73881,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/             Change::Insert(key, svc) => {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73882,"byte_end":73927,"line_start":21,"line_end":21,"column_start":1,"column_end":46}},{"value":"/                 // a new service with identifier `key` was discovered","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":73928,"byte_end":74001,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/                 # let _ = (key, svc);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74002,"byte_end":74043,"line_start":23,"line_end":23,"column_start":1,"column_end":42}},{"value":"/             }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74044,"byte_end":74061,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/             Change::Remove(key) => {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74062,"byte_end":74102,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/                 // the service with identifier `key` has gone away","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74103,"byte_end":74173,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/                 # let _ = (key);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74174,"byte_end":74210,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/             }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74211,"byte_end":74228,"line_start":28,"line_end":28,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74229,"byte_end":74242,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74243,"byte_end":74252,"line_start":30,"line_end":30,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74253,"byte_end":74258,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74259,"byte_end":74266,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74267,"byte_end":74270,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [`TryStream`]: https://docs.rs/futures/latest/futures/stream/trait.TryStream.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74271,"byte_end":74356,"line_start":34,"line_end":34,"column_start":1,"column_end":86}}]},{"kind":"Enum","id":{"krate":0,"index":4348},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/error.rs","byte_start":76148,"byte_end":76153,"line_start":4,"line_end":4,"column_start":10,"column_end":15},"name":"Never","qualname":"::discover::error::Never","value":"pub enum Never { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4351},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/list.rs","byte_start":76808,"byte_end":76819,"line_start":17,"line_end":17,"column_start":16,"column_end":27},"name":"ServiceList","qualname":"::discover::list::ServiceList","value":"ServiceList {  }","parent":null,"children":[{"krate":0,"index":4353}],"decl_id":null,"docs":" Static service discovery based on a predetermined list of services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/list.rs","byte_start":77015,"byte_end":77018,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<ServiceList<T>>::new","value":"pub fn new<Request>(T) -> ServiceList<T> where U: Service<Request>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/list.rs","byte_start":76981,"byte_end":77003,"line_start":29,"line_end":29,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":730},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74788,"byte_end":74796,"line_start":55,"line_end":55,"column_start":11,"column_end":19},"name":"Discover","qualname":"::discover::Discover","value":"Discover: Sealed<Change<(), ()>>","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734}],"decl_id":null,"docs":" A dynamically changing set of related services.","sig":null,"attributes":[{"value":"/ A dynamically changing set of related services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74526,"byte_end":74577,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74578,"byte_end":74581,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ As new services arrive and old services are retired,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74582,"byte_end":74638,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/ [`Change`]s are returned which provide unique identifiers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74639,"byte_end":74700,"line_start":51,"line_end":51,"column_start":1,"column_end":62}},{"value":"/ for the services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74701,"byte_end":74722,"line_start":52,"line_end":52,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74723,"byte_end":74726,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ See the module documentation for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74727,"byte_end":74777,"line_start":54,"line_end":54,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":731},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74990,"byte_end":74993,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"name":"Key","qualname":"::discover::Discover::Key","value":"type Key: Eq;","parent":{"krate":0,"index":730},"children":[],"decl_id":null,"docs":" A unique identifier for each active service.","sig":null,"attributes":[{"value":"/ A unique identifier for each active service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74827,"byte_end":74875,"line_start":56,"line_end":56,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74880,"byte_end":74883,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ An identifier can be re-used once a [`Change::Remove`] has been yielded for its service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74888,"byte_end":74980,"line_start":58,"line_end":58,"column_start":5,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":732},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75115,"byte_end":75122,"line_start":64,"line_end":64,"column_start":10,"column_end":17},"name":"Service","qualname":"::discover::Discover::Service","value":"type Service;","parent":{"krate":0,"index":730},"children":[],"decl_id":null,"docs":" The type of [`Service`] yielded by this [`Discover`].","sig":null,"attributes":[{"value":"/ The type of [`Service`] yielded by this [`Discover`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75004,"byte_end":75061,"line_start":61,"line_end":61,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75066,"byte_end":75069,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75074,"byte_end":75105,"line_start":63,"line_end":63,"column_start":5,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":733},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75174,"byte_end":75179,"line_start":67,"line_end":67,"column_start":10,"column_end":15},"name":"Error","qualname":"::discover::Discover::Error","value":"type Error;","parent":{"krate":0,"index":730},"children":[],"decl_id":null,"docs":" Error produced during discovery\n","sig":null,"attributes":[{"value":"/ Error produced during discovery","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75129,"byte_end":75164,"line_start":66,"line_end":66,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75235,"byte_end":75248,"line_start":70,"line_end":70,"column_start":8,"column_end":21},"name":"poll_discover","qualname":"::discover::Discover::poll_discover","value":"pub fn poll_discover(Pin<&mut Self>, &mut Context)\n-> Poll<Option<Result<Change<Self::Key, Self::Service>, Self::Error>>>","parent":{"krate":0,"index":730},"children":[],"decl_id":null,"docs":" Yields the next discovery change set.\n","sig":null,"attributes":[{"value":"/ Yields the next discovery change set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75186,"byte_end":75227,"line_start":69,"line_end":69,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4390},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":76004,"byte_end":76010,"line_start":104,"line_end":104,"column_start":5,"column_end":11},"name":"Insert","qualname":"::discover::Change::Insert","value":"Change::Insert(K, V)","parent":{"krate":0,"index":4387},"children":[],"decl_id":null,"docs":" A new service identified by key `K` was identified.\n","sig":null,"attributes":[{"value":"/ A new service identified by key `K` was identified.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75944,"byte_end":75999,"line_start":103,"line_end":103,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4394},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":76077,"byte_end":76083,"line_start":106,"line_end":106,"column_start":5,"column_end":11},"name":"Remove","qualname":"::discover::Change::Remove","value":"Change::Remove(K)","parent":{"krate":0,"index":4387},"children":[],"decl_id":null,"docs":" The service identified by key `K` disappeared.\n","sig":null,"attributes":[{"value":"/ The service identified by key `K` disappeared.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":76022,"byte_end":76072,"line_start":105,"line_end":105,"column_start":5,"column_end":55}}]},{"kind":"Enum","id":{"krate":0,"index":4387},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75925,"byte_end":75931,"line_start":102,"line_end":102,"column_start":10,"column_end":16},"name":"Change","qualname":"::discover::Change","value":"pub enum Change<K, V> { Insert(K, V), Remove(K), }","parent":null,"children":[{"krate":0,"index":4390},{"krate":0,"index":4394}],"decl_id":null,"docs":" A change in the service set.\n","sig":null,"attributes":[{"value":"/ A change in the service set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75866,"byte_end":75898,"line_start":100,"line_end":100,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":749},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"limit","qualname":"::limit","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":874},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":977}],"decl_id":null,"docs":" Tower middleware for limiting requests.\n","sig":null,"attributes":[{"value":"cfg(feature = \"limit\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7662,"byte_end":7687,"line_start":175,"line_end":175,"column_start":1,"column_end":26}},{"value":"/ Tower middleware for limiting requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":77828,"byte_end":77871,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":750},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"concurrency","qualname":"::limit::concurrency","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/mod.rs","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":784},{"krate":0,"index":810},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871}],"decl_id":null,"docs":" Limit the max number of requests being concurrently processed.\n","sig":null,"attributes":[{"value":"/ Limit the max number of requests being concurrently processed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/mod.rs","byte_start":78057,"byte_end":78123,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":751},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::limit::concurrency::future","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":4401},{"krate":0,"index":4405},{"krate":0,"index":4408},{"krate":0,"index":775},{"krate":0,"index":778}],"decl_id":null,"docs":" [`Future`] types","sig":null,"attributes":[{"value":"/ [`Future`] types","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":78282,"byte_end":78302,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":78303,"byte_end":78306,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`Future`]: std::future::Future","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":78307,"byte_end":78342,"line_start":3,"line_end":3,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":4401},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":78691,"byte_end":78705,"line_start":18,"line_end":18,"column_start":16,"column_end":30},"name":"ResponseFuture","qualname":"::limit::concurrency::future::ResponseFuture","value":"ResponseFuture {  }","parent":null,"children":[{"krate":0,"index":4403},{"krate":0,"index":4404}],"decl_id":null,"docs":" Future for the [`ConcurrencyLimit`] service.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4441},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79538,"byte_end":79559,"line_start":10,"line_end":10,"column_start":12,"column_end":33},"name":"ConcurrencyLimitLayer","qualname":"::limit::concurrency::layer::ConcurrencyLimitLayer","value":"ConcurrencyLimitLayer {  }","parent":null,"children":[{"krate":0,"index":4442}],"decl_id":null,"docs":" Enforces a limit on the concurrent number of requests the underlying\n service can handle.\n","sig":null,"attributes":[{"value":"/ Enforces a limit on the concurrent number of requests the underlying","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79406,"byte_end":79478,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ service can handle.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79479,"byte_end":79502,"line_start":8,"line_end":8,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79667,"byte_end":79670,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<ConcurrencyLimitLayer>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new concurrency limit layer.\n","sig":null,"attributes":[{"value":"/ Create a new concurrency limit layer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79614,"byte_end":79655,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4447},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80327,"byte_end":80354,"line_start":38,"line_end":38,"column_start":12,"column_end":39},"name":"GlobalConcurrencyLimitLayer","qualname":"::limit::concurrency::layer::GlobalConcurrencyLimitLayer","value":"GlobalConcurrencyLimitLayer {  }","parent":null,"children":[{"krate":0,"index":4448}],"decl_id":null,"docs":" Enforces a limit on the concurrent number of requests the underlying\n service can handle.","sig":null,"attributes":[{"value":"/ Enforces a limit on the concurrent number of requests the underlying","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79935,"byte_end":80007,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ service can handle.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80008,"byte_end":80031,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80032,"byte_end":80035,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Unlike [`ConcurrencyLimitLayer`], which enforces a per-service concurrency","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80036,"byte_end":80114,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ limit, this layer accepts a owned semaphore (`Arc<Semaphore>`) which can be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80115,"byte_end":80194,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ shared across multiple services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80195,"byte_end":80231,"line_start":34,"line_end":34,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80232,"byte_end":80235,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Cloning this layer will not create a new semaphore.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80236,"byte_end":80291,"line_start":36,"line_end":36,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80489,"byte_end":80492,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<GlobalConcurrencyLimitLayer>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `GlobalConcurrencyLimitLayer`.\n","sig":null,"attributes":[{"value":"/ Create a new `GlobalConcurrencyLimitLayer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80430,"byte_end":80477,"line_start":43,"line_end":43,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80668,"byte_end":80682,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"with_semaphore","qualname":"<GlobalConcurrencyLimitLayer>::with_semaphore","value":"pub fn with_semaphore(Arc<Semaphore>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `GlobalConcurrencyLimitLayer` from a `Arc<Semaphore>`\n","sig":null,"attributes":[{"value":"/ Create a new `GlobalConcurrencyLimitLayer` from a `Arc<Semaphore>`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80586,"byte_end":80656,"line_start":48,"line_end":48,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":4453},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81365,"byte_end":81381,"line_start":15,"line_end":15,"column_start":12,"column_end":28},"name":"ConcurrencyLimit","qualname":"::limit::concurrency::service::ConcurrencyLimit","value":"ConcurrencyLimit {  }","parent":null,"children":[{"krate":0,"index":4455},{"krate":0,"index":4456},{"krate":0,"index":4457}],"decl_id":null,"docs":" Enforces a limit on the concurrent number of requests the underlying\n service can handle.\n","sig":null,"attributes":[{"value":"/ Enforces a limit on the concurrent number of requests the underlying","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81240,"byte_end":81312,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ service can handle.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81313,"byte_end":81336,"line_start":13,"line_end":13,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81786,"byte_end":81789,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<ConcurrencyLimit<T>>::new","value":"pub fn new(T, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new concurrency limiter.\n","sig":null,"attributes":[{"value":"/ Create a new concurrency limiter.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81737,"byte_end":81774,"line_start":27,"line_end":27,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81981,"byte_end":81995,"line_start":33,"line_end":33,"column_start":12,"column_end":26},"name":"with_semaphore","qualname":"<ConcurrencyLimit<T>>::with_semaphore","value":"pub fn with_semaphore(T, Arc<Semaphore>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new concurrency limiter with a provided shared semaphore\n","sig":null,"attributes":[{"value":"/ Create a new concurrency limiter with a provided shared semaphore","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81900,"byte_end":81969,"line_start":32,"line_end":32,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":82242,"byte_end":82249,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ConcurrencyLimit<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a reference to the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":82190,"byte_end":82230,"line_start":41,"line_end":41,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":82356,"byte_end":82363,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ConcurrencyLimit<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":82296,"byte_end":82344,"line_start":46,"line_end":46,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":82481,"byte_end":82491,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ConcurrencyLimit<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume `self`, returning the inner service\n","sig":null,"attributes":[{"value":"/ Consume `self`, returning the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":82422,"byte_end":82469,"line_start":51,"line_end":51,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":874},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rate","qualname":"::limit::rate","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/mod.rs","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":895},{"krate":0,"index":903},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959}],"decl_id":null,"docs":" Limit the rate at which requests are processed.\n","sig":null,"attributes":[{"value":"/ Limit the rate at which requests are processed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/mod.rs","byte_start":84455,"byte_end":84506,"line_start":1,"line_end":1,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":4461},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":84878,"byte_end":84892,"line_start":8,"line_end":8,"column_start":12,"column_end":26},"name":"RateLimitLayer","qualname":"::limit::rate::layer::RateLimitLayer","value":"RateLimitLayer {  }","parent":null,"children":[{"krate":0,"index":4462}],"decl_id":null,"docs":" Enforces a rate limit on the number of requests the underlying\n service can handle over a period of time.\n","sig":null,"attributes":[{"value":"/ Enforces a rate limit on the number of requests the underlying","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":84730,"byte_end":84796,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/ service can handle over a period of time.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":84797,"byte_end":84842,"line_start":6,"line_end":6,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":84984,"byte_end":84987,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<RateLimitLayer>::new","value":"pub fn new(u64, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new rate limit layer.\n","sig":null,"attributes":[{"value":"/ Create new rate limit layer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":84940,"byte_end":84972,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":4467},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85386,"byte_end":85390,"line_start":5,"line_end":5,"column_start":12,"column_end":16},"name":"Rate","qualname":"::limit::rate::rate::Rate","value":"Rate {  }","parent":null,"children":[{"krate":0,"index":4468},{"krate":0,"index":4469}],"decl_id":null,"docs":" A rate of requests per time period.\n","sig":null,"attributes":[{"value":"/ A rate of requests per time period.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85305,"byte_end":85344,"line_start":3,"line_end":3,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85565,"byte_end":85568,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Rate>::new","value":"pub fn new(u64, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new rate.","sig":null,"attributes":[{"value":"/ Create a new rate.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85445,"byte_end":85467,"line_start":11,"line_end":11,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85472,"byte_end":85475,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85480,"byte_end":85492,"line_start":13,"line_end":13,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85497,"byte_end":85500,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ This function panics if `num` or `per` is 0.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85505,"byte_end":85553,"line_start":15,"line_end":15,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":4475},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":86166,"byte_end":86175,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"RateLimit","qualname":"::limit::rate::service::RateLimit","value":"RateLimit {  }","parent":null,"children":[{"krate":0,"index":4477},{"krate":0,"index":4478},{"krate":0,"index":4479},{"krate":0,"index":4480}],"decl_id":null,"docs":" Enforces a rate limit on the number of requests the underlying\n service can handle over a period of time.\n","sig":null,"attributes":[{"value":"/ Enforces a rate limit on the number of requests the underlying","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":86025,"byte_end":86091,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ service can handle over a period of time.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":86092,"byte_end":86137,"line_start":12,"line_end":12,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":86451,"byte_end":86454,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<RateLimit<T>>::new","value":"pub fn new(T, Rate) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new rate limiter\n","sig":null,"attributes":[{"value":"/ Create a new rate limiter","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":86410,"byte_end":86439,"line_start":29,"line_end":29,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":87050,"byte_end":87057,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<RateLimit<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a reference to the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":86998,"byte_end":87038,"line_start":48,"line_end":48,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":87164,"byte_end":87171,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RateLimit<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":87104,"byte_end":87152,"line_start":53,"line_end":53,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":87289,"byte_end":87299,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RateLimit<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume `self`, returning the inner service\n","sig":null,"attributes":[{"value":"/ Consume `self`, returning the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":87230,"byte_end":87277,"line_start":58,"line_end":58,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":980},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"load","qualname":"::load","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":1025},{"krate":0,"index":1083},{"krate":0,"index":1186},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1289}],"decl_id":null,"docs":" Service load measurement","sig":null,"attributes":[{"value":"cfg(feature = \"load\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7752,"byte_end":7776,"line_start":178,"line_end":178,"column_start":1,"column_end":25}},{"value":"/ Service load measurement","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89514,"byte_end":89542,"line_start":1,"line_end":1,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89543,"byte_end":89546,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides the [`Load`] trait, which allows measuring how loaded a service is.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89547,"byte_end":89639,"line_start":3,"line_end":3,"column_start":1,"column_end":93}},{"value":"/ It also provides several wrapper types that measure load in different ways:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89640,"byte_end":89719,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89720,"byte_end":89723,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ - [`Constant`] — Always returns the same constant load value for a service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89724,"byte_end":89805,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ - [`PendingRequests`] — Measures load by tracking the number of in-flight requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89806,"byte_end":89895,"line_start":7,"line_end":7,"column_start":1,"column_end":88}},{"value":"/ - [`PeakEwma`] — Measures load using a moving average of the peak latency for the service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89896,"byte_end":89992,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89993,"byte_end":89996,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ In general, you will want to use one of these when using the types in [`tower::balance`] which","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":89997,"byte_end":90095,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ balance services depending on their load. Which load metric to use depends on your exact","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90096,"byte_end":90188,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ use-case, but the ones above should get you quite far!","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90189,"byte_end":90247,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90248,"byte_end":90251,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ When the `discover` feature is enabled, wrapper types for [`Discover`] that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90252,"byte_end":90331,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ wrap the discovered services with the given load estimator are also provided.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90332,"byte_end":90413,"line_start":15,"line_end":15,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90414,"byte_end":90417,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # When does a request complete?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90418,"byte_end":90453,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90454,"byte_end":90457,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ For many applications, the request life-cycle is relatively simple: when a service responds to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90458,"byte_end":90556,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ a request, that request is done, and the system can forget about it. However, for some","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90557,"byte_end":90647,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ applications, the service may respond to the initial request while other parts of the system","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90648,"byte_end":90744,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ are still acting on that request. In such an application, the system load must take these","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90745,"byte_end":90838,"line_start":22,"line_end":22,"column_start":1,"column_end":94}},{"value":"/ requests into account as well, or risk the system underestimating its own load.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90839,"byte_end":90922,"line_start":23,"line_end":23,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90923,"byte_end":90926,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ To support these use-cases, the load estimators in this module are parameterized by the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":90927,"byte_end":91018,"line_start":25,"line_end":25,"column_start":1,"column_end":92}},{"value":"/ [`TrackCompletion`] trait, with [`CompleteOnResponse`] as the default type. The behavior of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91019,"byte_end":91114,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ [`CompleteOnResponse`] is what you would normally expect for a request-response cycle: when the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91115,"byte_end":91214,"line_start":27,"line_end":27,"column_start":1,"column_end":100}},{"value":"/ response is produced, the request is considered \"finished\", and load goes down. This can be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91215,"byte_end":91310,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ overriden by your own user-defined type to track more complex request completion semantics. See","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91311,"byte_end":91410,"line_start":29,"line_end":29,"column_start":1,"column_end":100}},{"value":"/ the documentation for [`completion`] for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91411,"byte_end":91469,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91470,"byte_end":91473,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91474,"byte_end":91488,"line_start":32,"line_end":32,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91489,"byte_end":91492,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91493,"byte_end":91504,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91505,"byte_end":91535,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ use tower::util::ServiceExt;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91536,"byte_end":91568,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91569,"byte_end":91599,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/ use tower::{load::Load, Service};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91600,"byte_end":91637,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/ # #[cfg(feature = \"util\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91638,"byte_end":91668,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/ async fn simple_balance<S1, S2, R>(","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91669,"byte_end":91708,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/     svc1: &mut S1,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91709,"byte_end":91731,"line_start":41,"line_end":41,"column_start":1,"column_end":23}},{"value":"/     svc2: &mut S2,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91732,"byte_end":91754,"line_start":42,"line_end":42,"column_start":1,"column_end":23}},{"value":"/     request: R","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91755,"byte_end":91773,"line_start":43,"line_end":43,"column_start":1,"column_end":19}},{"value":"/ ) -> Result<S1::Response, S1::Error>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91774,"byte_end":91814,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/ where","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91815,"byte_end":91824,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"/     S1: Load + Service<R>,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91825,"byte_end":91855,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/     S2: Load<Metric = S1::Metric> + Service<R, Response = S1::Response, Error = S1::Error>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91856,"byte_end":91950,"line_start":47,"line_end":47,"column_start":1,"column_end":95}},{"value":"/ {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91951,"byte_end":91956,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/     if svc1.load() < svc2.load() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91957,"byte_end":91995,"line_start":49,"line_end":49,"column_start":1,"column_end":39}},{"value":"/         svc1.ready().await?.call(request).await","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":91996,"byte_end":92047,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/     } else {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92048,"byte_end":92064,"line_start":51,"line_end":51,"column_start":1,"column_end":17}},{"value":"/         svc2.ready().await?.call(request).await","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92065,"byte_end":92116,"line_start":52,"line_end":52,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92117,"byte_end":92126,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92127,"byte_end":92132,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92133,"byte_end":92140,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92141,"byte_end":92144,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`tower::balance`]: crate::balance","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92145,"byte_end":92183,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/ [`Discover`]: crate::discover::Discover","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92184,"byte_end":92227,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/ [`CompleteOnResponse`]: crate::load::completion::CompleteOnResponse","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92228,"byte_end":92299,"line_start":59,"line_end":59,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":981},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"completion","qualname":"::load::completion","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":4518},{"krate":0,"index":4520},{"krate":0,"index":4522},{"krate":0,"index":4523},{"krate":0,"index":4525},{"krate":0,"index":4527},{"krate":0,"index":4534},{"krate":0,"index":4539},{"krate":0,"index":1007},{"krate":0,"index":1012},{"krate":0,"index":1020}],"decl_id":null,"docs":" Application-specific request completion semantics.\n","sig":null,"attributes":[{"value":"/ Application-specific request completion semantics.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93182,"byte_end":93236,"line_start":1,"line_end":1,"column_start":1,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":1002},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94801,"byte_end":94816,"line_start":33,"line_end":33,"column_start":11,"column_end":26},"name":"TrackCompletion","qualname":"::load::completion::TrackCompletion","value":"TrackCompletion<H, V>: Clone","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006}],"decl_id":null,"docs":" Attaches `H`-typed completion tracker to `V` typed values.","sig":null,"attributes":[{"value":"/ Attaches `H`-typed completion tracker to `V` typed values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93374,"byte_end":93436,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93437,"byte_end":93440,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Handles (of type `H`) are intended to be RAII guards that primarily implement [`Drop`] and update","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93441,"byte_end":93542,"line_start":13,"line_end":13,"column_start":1,"column_end":102}},{"value":"/ load metric state as they are dropped. This trait allows implementors to \"forward\" the handle","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93543,"byte_end":93640,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ to later parts of the request-handling pipeline, so that the handle is only dropped when the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93641,"byte_end":93737,"line_start":15,"line_end":15,"column_start":1,"column_end":97}},{"value":"/ request has truly completed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93738,"byte_end":93770,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93771,"byte_end":93774,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This utility allows load metrics to have a protocol-agnostic means to track streams past their","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93775,"byte_end":93873,"line_start":18,"line_end":18,"column_start":1,"column_end":99}},{"value":"/ initial response future. For example, if `V` represents an HTTP response type, an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93874,"byte_end":93959,"line_start":19,"line_end":19,"column_start":1,"column_end":86}},{"value":"/ implementation could add `H`-typed handles to each response's extensions to detect when all the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":93960,"byte_end":94059,"line_start":20,"line_end":20,"column_start":1,"column_end":100}},{"value":"/ response's extensions have been dropped.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94060,"byte_end":94104,"line_start":21,"line_end":21,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94105,"byte_end":94108,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ A base `impl<H, V> TrackCompletion<H, V> for CompleteOnResponse` is provided to drop the handle","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94109,"byte_end":94208,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ once the response future is resolved. This is appropriate when a response is discrete and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94209,"byte_end":94302,"line_start":24,"line_end":24,"column_start":1,"column_end":94}},{"value":"/ cannot comprise multiple messages.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94303,"byte_end":94341,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94342,"byte_end":94345,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ In many cases, the `Output` type is simply `V`. However, [`TrackCompletion`] may alter the type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94346,"byte_end":94445,"line_start":27,"line_end":27,"column_start":1,"column_end":100}},{"value":"/ in order to instrument it appropriately. For example, an HTTP [`TrackCompletion`] may modify","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94446,"byte_end":94542,"line_start":28,"line_end":28,"column_start":1,"column_end":97}},{"value":"/ the body type: so a [`TrackCompletion`] that takes values of type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94543,"byte_end":94612,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ [`http::Response<A>`][response] may output values of type [`http::Response<B>`][response].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94613,"byte_end":94707,"line_start":30,"line_end":30,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94708,"byte_end":94711,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ [response]: https://docs.rs/http/latest/http/response/struct.Response.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94712,"byte_end":94790,"line_start":32,"line_end":32,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":1005},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94878,"byte_end":94884,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"name":"Output","qualname":"::load::completion::TrackCompletion::Output","value":"type Output;","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" The instrumented value type.\n","sig":null,"attributes":[{"value":"/ The instrumented value type.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94836,"byte_end":94868,"line_start":34,"line_end":34,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94952,"byte_end":94968,"line_start":38,"line_end":38,"column_start":8,"column_end":24},"name":"track_completion","qualname":"::load::completion::TrackCompletion::track_completion","value":"pub fn track_completion(&Self, H, V) -> Self::Output","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Attaches a `H`-typed handle to a `V`-typed value.\n","sig":null,"attributes":[{"value":"/ Attaches a `H`-typed handle to a `V`-typed value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94891,"byte_end":94944,"line_start":37,"line_end":37,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":4518},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95205,"byte_end":95223,"line_start":45,"line_end":45,"column_start":12,"column_end":30},"name":"CompleteOnResponse","qualname":"::load::completion::CompleteOnResponse","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`TrackCompletion`] implementation that considers the request completed when the response\n future is resolved.\n","sig":null,"attributes":[{"value":"/ A [`TrackCompletion`] implementation that considers the request completed when the response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95017,"byte_end":95112,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ future is resolved.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95113,"byte_end":95136,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"non_exhaustive","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95176,"byte_end":95193,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":4527},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95367,"byte_end":95388,"line_start":50,"line_end":50,"column_start":16,"column_end":37},"name":"TrackCompletionFuture","qualname":"::load::completion::TrackCompletionFuture","value":"TrackCompletionFuture {  }","parent":null,"children":[{"krate":0,"index":4531},{"krate":0,"index":4532},{"krate":0,"index":4533}],"decl_id":null,"docs":" Attaches a `C`-typed completion tracker to the result of an `F`-typed [`Future`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95667,"byte_end":95670,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<TrackCompletionFuture<F, C, H>>::new","value":"pub fn new(C, H, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a future, propagating the tracker into its value if successful.\n","sig":null,"attributes":[{"value":"/ Wraps a future, propagating the tracker into its value if successful.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95582,"byte_end":95655,"line_start":61,"line_end":61,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":4589},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97082,"byte_end":97090,"line_start":20,"line_end":20,"column_start":16,"column_end":24},"name":"Constant","qualname":"::load::constant::Constant","value":"Constant {  }","parent":null,"children":[{"krate":0,"index":4592},{"krate":0,"index":4593}],"decl_id":null,"docs":" Wraps a type so that it implements [`Load`] and returns a constant load metric.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97291,"byte_end":97294,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<Constant<T, M>>::new","value":"pub fn new(T, M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a `T`-typed service with a constant `M`-typed load metric.\n","sig":null,"attributes":[{"value":"/ Wraps a `T`-typed service with a constant `M`-typed load metric.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97211,"byte_end":97279,"line_start":29,"line_end":29,"column_start":5,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":1083},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"peak_ewma","qualname":"::load::peak_ewma","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1114},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1129},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":4638},{"krate":0,"index":4645},{"krate":0,"index":4649},{"krate":0,"index":4656},{"krate":0,"index":4660},{"krate":0,"index":4706},{"krate":0,"index":4709},{"krate":0,"index":4710},{"krate":0,"index":4712},{"krate":0,"index":4714},{"krate":0,"index":4715},{"krate":0,"index":4718},{"krate":0,"index":4720},{"krate":0,"index":4724},{"krate":0,"index":4726},{"krate":0,"index":4729},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1150},{"krate":0,"index":1159},{"krate":0,"index":1164},{"krate":0,"index":1168},{"krate":0,"index":1173},{"krate":0,"index":1178},{"krate":0,"index":1182},{"krate":0,"index":1184}],"decl_id":null,"docs":" A `Load` implementation that measures load using the PeakEWMA response latency.\n","sig":null,"attributes":[{"value":"/ A `Load` implementation that measures load using the PeakEWMA response latency.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":98723,"byte_end":98806,"line_start":1,"line_end":1,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":4638},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100450,"byte_end":100458,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"PeakEwma","qualname":"::load::peak_ewma::PeakEwma","value":"PeakEwma {  }","parent":null,"children":[{"krate":0,"index":4641},{"krate":0,"index":4642},{"krate":0,"index":4643},{"krate":0,"index":4644}],"decl_id":null,"docs":" Measures the load of the underlying service using Peak-EWMA load measurement.","sig":null,"attributes":[{"value":"/ Measures the load of the underlying service using Peak-EWMA load measurement.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99322,"byte_end":99403,"line_start":23,"line_end":23,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99404,"byte_end":99407,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`PeakEwma`] implements [`Load`] with the [`Cost`] metric that estimates the amount of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99408,"byte_end":99498,"line_start":25,"line_end":25,"column_start":1,"column_end":91}},{"value":"/ pending work to an endpoint. Work is calculated by multiplying the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99499,"byte_end":99569,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ exponentially-weighted moving average (EWMA) of response latencies by the number of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99570,"byte_end":99657,"line_start":27,"line_end":27,"column_start":1,"column_end":88}},{"value":"/ pending requests. The Peak-EWMA algorithm is designed to be especially sensitive to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99658,"byte_end":99745,"line_start":28,"line_end":28,"column_start":1,"column_end":88}},{"value":"/ worst-case latencies. Over time, the peak latency value decays towards the moving","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99746,"byte_end":99831,"line_start":29,"line_end":29,"column_start":1,"column_end":86}},{"value":"/ average of latencies to the endpoint.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99832,"byte_end":99873,"line_start":30,"line_end":30,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99874,"byte_end":99877,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ When no latency information has been measured for an endpoint, an arbitrary default","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99878,"byte_end":99965,"line_start":32,"line_end":32,"column_start":1,"column_end":88}},{"value":"/ RTT of 1 second is used to prevent the endpoint from being overloaded before a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":99966,"byte_end":100048,"line_start":33,"line_end":33,"column_start":1,"column_end":83}},{"value":"/ meaningful baseline can be established..","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100049,"byte_end":100093,"line_start":34,"line_end":34,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100094,"byte_end":100097,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## Note","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100098,"byte_end":100109,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100110,"byte_end":100113,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This is derived from [Finagle][finagle], which is distributed under the Apache V2","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100114,"byte_end":100199,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"/ license. Copyright 2017, Twitter Inc.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100200,"byte_end":100241,"line_start":39,"line_end":39,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100242,"byte_end":100245,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [finagle]:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100246,"byte_end":100260,"line_start":41,"line_end":41,"column_start":1,"column_end":15}},{"value":"/ https://github.com/twitter/finagle/blob/9cc08d15216497bb03a1cafda96b7266cfbbcff1/finagle-core/src/main/scala/com/twitter/finagle/loadbalancer/PeakEwma.scala","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100261,"byte_end":100421,"line_start":42,"line_end":42,"column_start":1,"column_end":161}}]},{"kind":"Struct","id":{"krate":0,"index":4649},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100797,"byte_end":100813,"line_start":56,"line_end":56,"column_start":16,"column_end":32},"name":"PeakEwmaDiscover","qualname":"::load::peak_ewma::PeakEwmaDiscover","value":"PeakEwmaDiscover {  }","parent":null,"children":[{"krate":0,"index":4652},{"krate":0,"index":4653},{"krate":0,"index":4654},{"krate":0,"index":4655}],"decl_id":null,"docs":" Wraps a `D`-typed stream of discovered services with `PeakEwma`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4706},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101256,"byte_end":101260,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"Cost","qualname":"::load::peak_ewma::Cost","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents the relative cost of communicating with a service.","sig":null,"attributes":[{"value":"/ Represents the relative cost of communicating with a service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":100965,"byte_end":101030,"line_start":65,"line_end":65,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101031,"byte_end":101034,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The underlying value estimates the amount of pending work to a service: the Peak-EWMA","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101035,"byte_end":101124,"line_start":67,"line_end":67,"column_start":1,"column_end":90}},{"value":"/ latency estimate multiplied by the number of pending requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101125,"byte_end":101191,"line_start":68,"line_end":68,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4720},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101366,"byte_end":101372,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"Handle","qualname":"::load::peak_ewma::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":4721},{"krate":0,"index":4722},{"krate":0,"index":4723}],"decl_id":null,"docs":" Tracks an in-flight request and updates the RTT-estimate on Drop.\n","sig":null,"attributes":[{"value":"/ Tracks an in-flight request and updates the RTT-estimate on Drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101268,"byte_end":101337,"line_start":72,"line_end":72,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101829,"byte_end":101832,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<PeakEwma<S, C>>::new","value":"pub fn new(S, Duration, f64, C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps an `S`-typed service so that its load is tracked by the EWMA of its peak latency.\n","sig":null,"attributes":[{"value":"/ Wraps an `S`-typed service so that its load is tracked by the EWMA of its peak latency.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101726,"byte_end":101817,"line_start":92,"line_end":92,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":104116,"byte_end":104119,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"new","qualname":"<PeakEwmaDiscover<D, C>>::new","value":"pub fn new<Request>(D, Duration, Duration, C) -> Self where D: Discover,\nD::Service: Service<Request>,\nC: TrackCompletion<Handle, <D::Service as Service<Request>>::Response>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a `D`-typed [`Discover`] so that services have a [`PeakEwma`] load metric.","sig":null,"attributes":[{"value":"/ Wraps a `D`-typed [`Discover`] so that services have a [`PeakEwma`] load metric.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":103802,"byte_end":103886,"line_start":165,"line_end":165,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":103891,"byte_end":103894,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ The provided `default_rtt` is used as the default RTT estimate for newly","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":103899,"byte_end":103975,"line_start":167,"line_end":167,"column_start":5,"column_end":81}},{"value":"/ added services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":103980,"byte_end":103999,"line_start":168,"line_end":168,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":104004,"byte_end":104007,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ They `decay` value determines over what time period a RTT estimate should","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":104012,"byte_end":104089,"line_start":170,"line_end":170,"column_start":5,"column_end":82}},{"value":"/ decay.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":104094,"byte_end":104104,"line_start":171,"line_end":171,"column_start":5,"column_end":15}}]},{"kind":"Mod","id":{"krate":0,"index":1186},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pending_requests","qualname":"::load::pending_requests","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1191},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1204},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1211},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":4809},{"krate":0,"index":4815},{"krate":0,"index":4819},{"krate":0,"index":4822},{"krate":0,"index":4824},{"krate":0,"index":4826},{"krate":0,"index":4828},{"krate":0,"index":4833},{"krate":0,"index":4837},{"krate":0,"index":4877},{"krate":0,"index":4880},{"krate":0,"index":4882},{"krate":0,"index":4883},{"krate":0,"index":4885},{"krate":0,"index":4887},{"krate":0,"index":4889},{"krate":0,"index":4890},{"krate":0,"index":4893},{"krate":0,"index":4895},{"krate":0,"index":4896},{"krate":0,"index":4898},{"krate":0,"index":4901},{"krate":0,"index":1233},{"krate":0,"index":1238},{"krate":0,"index":1243},{"krate":0,"index":1252},{"krate":0,"index":1257},{"krate":0,"index":1263}],"decl_id":null,"docs":" A [`Load`] implementation that measures load using the number of in-flight requests.\n","sig":null,"attributes":[{"value":"/ A [`Load`] implementation that measures load using the number of in-flight requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":111516,"byte_end":111604,"line_start":1,"line_end":1,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":4809},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":112160,"byte_end":112175,"line_start":20,"line_end":20,"column_start":12,"column_end":27},"name":"PendingRequests","qualname":"::load::pending_requests::PendingRequests","value":"PendingRequests {  }","parent":null,"children":[{"krate":0,"index":4812},{"krate":0,"index":4813},{"krate":0,"index":4814}],"decl_id":null,"docs":" Measures the load of the underlying service using the number of currently-pending requests.\n","sig":null,"attributes":[{"value":"/ Measures the load of the underlying service using the number of currently-pending requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":112036,"byte_end":112131,"line_start":18,"line_end":18,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":4828},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":112641,"byte_end":112664,"line_start":35,"line_end":35,"column_start":16,"column_end":39},"name":"PendingRequestsDiscover","qualname":"::load::pending_requests::PendingRequestsDiscover","value":"PendingRequestsDiscover {  }","parent":null,"children":[{"krate":0,"index":4831},{"krate":0,"index":4832}],"decl_id":null,"docs":" Wraps a `D`-typed stream of discovered services with [`PendingRequests`].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4877},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":112920,"byte_end":112925,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"Count","qualname":"::load::pending_requests::Count","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents the number of currently-pending requests to a given service.\n","sig":null,"attributes":[{"value":"/ Represents the number of currently-pending requests to a given service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":112762,"byte_end":112837,"line_start":42,"line_end":42,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":4898},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113015,"byte_end":113021,"line_start":48,"line_end":48,"column_start":12,"column_end":18},"name":"Handle","qualname":"::load::pending_requests::Handle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Tracks an in-flight request by reference count.\n","sig":null,"attributes":[{"value":"/ Tracks an in-flight request by reference count.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":112935,"byte_end":112986,"line_start":46,"line_end":46,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113215,"byte_end":113218,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<PendingRequests<S, C>>::new","value":"pub fn new(S, C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps an `S`-typed service so that its load is tracked by the number of pending requests.\n","sig":null,"attributes":[{"value":"/ Wraps an `S`-typed service so that its load is tracked by the number of pending requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113110,"byte_end":113203,"line_start":53,"line_end":53,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":114490,"byte_end":114493,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<PendingRequestsDiscover<D, C>>::new","value":"pub fn new<Request>(D, C) -> Self where D: Discover,\nD::Service: Service<Request>,\nC: TrackCompletion<Handle, <D::Service as Service<Request>>::Response>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a [`Discover`], wrapping all of its services with [`PendingRequests`].\n","sig":null,"attributes":[{"value":"/ Wraps a [`Discover`], wrapping all of its services with [`PendingRequests`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":114398,"byte_end":114478,"line_start":102,"line_end":102,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1289},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92864,"byte_end":92868,"line_start":80,"line_end":80,"column_start":11,"column_end":15},"name":"Load","qualname":"::load::Load","value":"Load","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291}],"decl_id":null,"docs":" Types that implement this trait can give an estimate of how loaded they are.","sig":null,"attributes":[{"value":"/ Types that implement this trait can give an estimate of how loaded they are.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92718,"byte_end":92798,"line_start":77,"line_end":77,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92799,"byte_end":92802,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ See the module documentation for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92803,"byte_end":92853,"line_start":79,"line_end":79,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1290},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":93077,"byte_end":93083,"line_start":85,"line_end":85,"column_start":10,"column_end":16},"name":"Metric","qualname":"::load::Load::Metric","value":"type Metric: PartialOrd;","parent":{"krate":0,"index":1289},"children":[],"decl_id":null,"docs":" A comparable load metric.","sig":null,"attributes":[{"value":"/ A comparable load metric.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92875,"byte_end":92904,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92909,"byte_end":92912,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Lesser values indicate that the service is less loaded, and should be preferred for new","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92917,"byte_end":93008,"line_start":83,"line_end":83,"column_start":5,"column_end":96}},{"value":"/ requests over another service with a higher value.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":93013,"byte_end":93067,"line_start":84,"line_end":84,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":93150,"byte_end":93154,"line_start":88,"line_end":88,"column_start":8,"column_end":12},"name":"load","qualname":"::load::Load::load","value":"pub fn load(&Self) -> Self::Metric","parent":{"krate":0,"index":1289},"children":[],"decl_id":null,"docs":" Estimate the service's current load.\n","sig":null,"attributes":[{"value":"/ Estimate the service's current load.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":93102,"byte_end":93142,"line_start":87,"line_end":87,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1292},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"make","qualname":"::make","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1335},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1465},{"krate":0,"index":1468},{"krate":0,"index":1471}],"decl_id":null,"docs":" Trait aliases for Services that produce specific types of Responses.\n","sig":null,"attributes":[{"value":"cfg(feature = \"make\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7942,"byte_end":7966,"line_start":185,"line_end":185,"column_start":1,"column_end":25}},{"value":"/ Trait aliases for Services that produce specific types of Responses.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117485,"byte_end":117557,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":1317},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118310,"byte_end":118324,"line_start":12,"line_end":12,"column_start":11,"column_end":25},"name":"MakeConnection","qualname":"::make::make_connection::MakeConnection","value":"MakeConnection<Target>: Sealed<(Target,)>","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323}],"decl_id":null,"docs":" The [`MakeConnection`] trait is used to create transports.","sig":null,"attributes":[{"value":"/ The [`MakeConnection`] trait is used to create transports.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118008,"byte_end":118070,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118071,"byte_end":118074,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The goal of this service is to allow composable methods for creating","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118075,"byte_end":118147,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ `AsyncRead + AsyncWrite` transports. This could mean creating a TLS","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118148,"byte_end":118219,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ based connection or using some other method to authenticate the connection.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118220,"byte_end":118299,"line_start":11,"line_end":11,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":1319},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118410,"byte_end":118420,"line_start":14,"line_end":14,"column_start":10,"column_end":20},"name":"Connection","qualname":"::make::make_connection::MakeConnection::Connection","value":"type Connection: AsyncRead + AsyncWrite;","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" The transport provided by this service\n","sig":null,"attributes":[{"value":"/ The transport provided by this service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118358,"byte_end":118400,"line_start":13,"line_end":13,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1320},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118506,"byte_end":118511,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::make::make_connection::MakeConnection::Error","value":"type Error;","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" Errors produced by the connecting service\n","sig":null,"attributes":[{"value":"/ Errors produced by the connecting service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118451,"byte_end":118496,"line_start":16,"line_end":16,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1321},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118581,"byte_end":118587,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Future","qualname":"::make::make_connection::MakeConnection::Future","value":"type Future: Future<Output = Result<Self::Connection, Self::Error>>;","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" The future that eventually produces the transport\n","sig":null,"attributes":[{"value":"/ The future that eventually produces the transport","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118518,"byte_end":118571,"line_start":19,"line_end":19,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118733,"byte_end":118743,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"::make::make_connection::MakeConnection::poll_ready","value":"pub fn poll_ready(&mut Self, &mut Context) -> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" Returns `Poll::Ready(Ok(()))` when it is able to make more connections.\n","sig":null,"attributes":[{"value":"/ Returns `Poll::Ready(Ok(()))` when it is able to make more connections.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118650,"byte_end":118725,"line_start":22,"line_end":22,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118873,"byte_end":118888,"line_start":26,"line_end":26,"column_start":8,"column_end":23},"name":"make_connection","qualname":"::make::make_connection::MakeConnection::make_connection","value":"pub fn make_connection(&mut Self, Target) -> Self::Future","parent":{"krate":0,"index":1317},"children":[],"decl_id":null,"docs":" Connect and return a transport asynchronously\n","sig":null,"attributes":[{"value":"/ Connect and return a transport asynchronously","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118816,"byte_end":118865,"line_start":25,"line_end":25,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4903},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128423,"byte_end":128429,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"Shared","qualname":"::make::make_service::shared::Shared","value":"Shared {  }","parent":null,"children":[{"krate":0,"index":4905}],"decl_id":null,"docs":" A [`MakeService`] that produces services by cloning an inner service.","sig":null,"attributes":[{"value":"/ A [`MakeService`] that produces services by cloning an inner service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126566,"byte_end":126639,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126640,"byte_end":126643,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`MakeService`]: super::MakeService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126644,"byte_end":126683,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126684,"byte_end":126687,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126688,"byte_end":126701,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126702,"byte_end":126705,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126706,"byte_end":126713,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # use std::task::{Context, Poll};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126714,"byte_end":126751,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/ # use std::pin::Pin;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126752,"byte_end":126776,"line_start":13,"line_end":13,"column_start":1,"column_end":25}},{"value":"/ # use std::convert::Infallible;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126777,"byte_end":126812,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/ use tower::make::{MakeService, Shared};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126813,"byte_end":126856,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/ use tower::buffer::Buffer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126857,"byte_end":126887,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126888,"byte_end":126911,"line_start":17,"line_end":17,"column_start":1,"column_end":24}},{"value":"/ use futures::future::{Ready, ready};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126912,"byte_end":126952,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126953,"byte_end":126956,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // An example connection type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126957,"byte_end":126990,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/ struct Connection {}","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":126991,"byte_end":127015,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127016,"byte_end":127019,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ // An example request type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127020,"byte_end":127050,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/ struct Request {}","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127051,"byte_end":127072,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127073,"byte_end":127076,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // An example response type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127077,"byte_end":127108,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/ struct Response {}","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127109,"byte_end":127131,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127132,"byte_end":127135,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Some service that doesn't implement `Clone`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127136,"byte_end":127186,"line_start":29,"line_end":29,"column_start":1,"column_end":51}},{"value":"/ struct MyService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127187,"byte_end":127208,"line_start":30,"line_end":30,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127209,"byte_end":127212,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ impl Service<Request> for MyService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127213,"byte_end":127254,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/     type Response = Response;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127255,"byte_end":127288,"line_start":33,"line_end":33,"column_start":1,"column_end":34}},{"value":"/     type Error = Infallible;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127289,"byte_end":127321,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/     type Future = Ready<Result<Response, Infallible>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127322,"byte_end":127380,"line_start":35,"line_end":35,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127381,"byte_end":127384,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     fn poll_ready(&mut self, _cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127385,"byte_end":127475,"line_start":37,"line_end":37,"column_start":1,"column_end":91}},{"value":"/         Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127476,"byte_end":127507,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127508,"byte_end":127517,"line_start":39,"line_end":39,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127518,"byte_end":127521,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/     fn call(&mut self, req: Request) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127522,"byte_end":127580,"line_start":41,"line_end":41,"column_start":1,"column_end":59}},{"value":"/         ready(Ok(Response {}))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127581,"byte_end":127615,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127616,"byte_end":127625,"line_start":43,"line_end":43,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127626,"byte_end":127631,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127632,"byte_end":127635,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // Example function that runs a service by accepting new connections and using","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127636,"byte_end":127718,"line_start":46,"line_end":46,"column_start":1,"column_end":83}},{"value":"/ // `Make` to create new services that might be bound to the connection.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127719,"byte_end":127794,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ //","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127795,"byte_end":127801,"line_start":48,"line_end":48,"column_start":1,"column_end":7}},{"value":"/ // This is similar to what you might find in hyper.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127802,"byte_end":127857,"line_start":49,"line_end":49,"column_start":1,"column_end":56}},{"value":"/ async fn serve_make_service<Make>(make: Make)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127858,"byte_end":127907,"line_start":50,"line_end":50,"column_start":1,"column_end":50}},{"value":"/ where","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127908,"byte_end":127917,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/     Make: MakeService<Connection, Request>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127918,"byte_end":127964,"line_start":52,"line_end":52,"column_start":1,"column_end":47}},{"value":"/ {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127965,"byte_end":127970,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/     // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127971,"byte_end":127985,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127986,"byte_end":127991,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127992,"byte_end":127995,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":127996,"byte_end":128009,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/ // Our service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128010,"byte_end":128028,"line_start":58,"line_end":58,"column_start":1,"column_end":19}},{"value":"/ let svc = MyService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128029,"byte_end":128053,"line_start":59,"line_end":59,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128054,"byte_end":128057,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ // Make it `Clone` by putting a channel in front","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128058,"byte_end":128110,"line_start":61,"line_end":61,"column_start":1,"column_end":53}},{"value":"/ let buffered = Buffer::new(svc, 1024);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128111,"byte_end":128153,"line_start":62,"line_end":62,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128154,"byte_end":128157,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Convert it into a `MakeService`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128158,"byte_end":128196,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/ let make = Shared::new(buffered);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128197,"byte_end":128234,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128235,"byte_end":128238,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // Run the service and just ignore the `Connection`s as `MyService` doesn't need them","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128239,"byte_end":128328,"line_start":67,"line_end":67,"column_start":1,"column_end":90}},{"value":"/ serve_make_service(make).await;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128329,"byte_end":128364,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"/ # };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128365,"byte_end":128373,"line_start":69,"line_end":69,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128374,"byte_end":128381,"line_start":70,"line_end":70,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128533,"byte_end":128536,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<Shared<S>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Shared`] from a service.\n","sig":null,"attributes":[{"value":"/ Create a new [`Shared`] from a service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128478,"byte_end":128521,"line_start":77,"line_end":77,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":4924},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":129084,"byte_end":129096,"line_start":102,"line_end":102,"column_start":14,"column_end":26},"name":"SharedFuture","qualname":"::make::make_service::shared::SharedFuture","value":"SharedFuture {  }","parent":null,"children":[{"krate":0,"index":4926}],"decl_id":null,"docs":" Response future from [`Shared`] services.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1383},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120200,"byte_end":120211,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"MakeService","qualname":"::make::make_service::MakeService","value":"MakeService<Target, Request>: Sealed<(Target, Request)>","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394}],"decl_id":null,"docs":" Creates new [`Service`] values.","sig":null,"attributes":[{"value":"/ Creates new [`Service`] values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":119728,"byte_end":119763,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":119764,"byte_end":119767,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Acts as a service factory. This is useful for cases where new [`Service`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":119768,"byte_end":119845,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ values must be produced. One case is a TCP server listener. The listener","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":119846,"byte_end":119922,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ accepts new TCP streams, obtains a new [`Service`] value using the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":119923,"byte_end":119993,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ [`MakeService`] trait, and uses that new [`Service`] value to process inbound","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":119994,"byte_end":120075,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/ requests on that new TCP stream.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120076,"byte_end":120112,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120113,"byte_end":120116,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This is essentially a trait alias for a [`Service`] of [`Service`]s.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120117,"byte_end":120189,"line_start":20,"line_end":20,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":1386},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120306,"byte_end":120314,"line_start":23,"line_end":23,"column_start":10,"column_end":18},"name":"Response","qualname":"::make::make_service::MakeService::Response","value":"type Response;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Responses given by the service\n","sig":null,"attributes":[{"value":"/ Responses given by the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120262,"byte_end":120296,"line_start":22,"line_end":22,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1387},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120365,"byte_end":120370,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"name":"Error","qualname":"::make::make_service::MakeService::Error","value":"type Error;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Errors produced by the service\n","sig":null,"attributes":[{"value":"/ Errors produced by the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120321,"byte_end":120355,"line_start":25,"line_end":25,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1388},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120436,"byte_end":120443,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"Service","qualname":"::make::make_service::MakeService::Service","value":"type Service: Service<Request, Response = Self::Response, Error = Self::Error>;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" The [`Service`] value created by this factory\n","sig":null,"attributes":[{"value":"/ The [`Service`] value created by this factory","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120377,"byte_end":120426,"line_start":28,"line_end":28,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1389},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120571,"byte_end":120580,"line_start":32,"line_end":32,"column_start":10,"column_end":19},"name":"MakeError","qualname":"::make::make_service::MakeService::MakeError","value":"type MakeError;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Errors produced while building a service.\n","sig":null,"attributes":[{"value":"/ Errors produced while building a service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120516,"byte_end":120561,"line_start":31,"line_end":31,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1390},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120640,"byte_end":120646,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"name":"Future","qualname":"::make::make_service::MakeService::Future","value":"type Future: Future<Output = Result<Self::Service, Self::MakeError>>;","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" The future of the [`Service`] instance.\n","sig":null,"attributes":[{"value":"/ The future of the [`Service`] instance.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120587,"byte_end":120630,"line_start":34,"line_end":34,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121120,"byte_end":121130,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"::make::make_service::MakeService::poll_ready","value":"pub fn poll_ready(&mut Self, &mut Context)\n-> Poll<Result<(), Self::MakeError>>","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Returns [`Poll::Ready`] when the factory is able to create more services.","sig":null,"attributes":[{"value":"/ Returns [`Poll::Ready`] when the factory is able to create more services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120710,"byte_end":120787,"line_start":37,"line_end":37,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120792,"byte_end":120795,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ If the service is at capacity, then [`Poll::Pending`] is returned and the task","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120800,"byte_end":120882,"line_start":39,"line_end":39,"column_start":5,"column_end":87}},{"value":"/ is notified when the service becomes ready again. This function is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120887,"byte_end":120957,"line_start":40,"line_end":40,"column_start":5,"column_end":75}},{"value":"/ expected to be called while on a task.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120962,"byte_end":121004,"line_start":41,"line_end":41,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121009,"byte_end":121012,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ [`Poll::Ready`]: std::task::Poll::Ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121017,"byte_end":121060,"line_start":43,"line_end":43,"column_start":5,"column_end":48}},{"value":"/ [`Poll::Pending`]: std::task::Poll::Pending","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121065,"byte_end":121112,"line_start":44,"line_end":44,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121272,"byte_end":121284,"line_start":48,"line_end":48,"column_start":8,"column_end":20},"name":"make_service","qualname":"::make::make_service::MakeService::make_service","value":"pub fn make_service(&mut Self, Target) -> Self::Future","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Create and return a new service value asynchronously.\n","sig":null,"attributes":[{"value":"/ Create and return a new service value asynchronously.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121207,"byte_end":121264,"line_start":47,"line_end":47,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122197,"byte_end":122209,"line_start":79,"line_end":79,"column_start":8,"column_end":20},"name":"into_service","qualname":"::make::make_service::MakeService::into_service","value":"pub fn into_service(Self) -> IntoService<Self, Request> where Self: Sized","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Consume this [`MakeService`] and convert it into a [`Service`].","sig":null,"attributes":[{"value":"/ Consume this [`MakeService`] and convert it into a [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121334,"byte_end":121401,"line_start":50,"line_end":50,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121406,"byte_end":121409,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121414,"byte_end":121427,"line_start":52,"line_end":52,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121432,"byte_end":121439,"line_start":53,"line_end":53,"column_start":5,"column_end":12}},{"value":"/ use std::convert::Infallible;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121444,"byte_end":121477,"line_start":54,"line_end":54,"column_start":5,"column_end":38}},{"value":"/ use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121482,"byte_end":121505,"line_start":55,"line_end":55,"column_start":5,"column_end":28}},{"value":"/ use tower::make::MakeService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121510,"byte_end":121543,"line_start":56,"line_end":56,"column_start":5,"column_end":38}},{"value":"/ use tower::service_fn;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121548,"byte_end":121574,"line_start":57,"line_end":57,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121579,"byte_end":121582,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121587,"byte_end":121604,"line_start":59,"line_end":59,"column_start":5,"column_end":22}},{"value":"/ # async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121609,"byte_end":121622,"line_start":60,"line_end":60,"column_start":5,"column_end":18}},{"value":"/ // A `MakeService`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121627,"byte_end":121649,"line_start":61,"line_end":61,"column_start":5,"column_end":27}},{"value":"/ let make_service = service_fn(|make_req: ()| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121654,"byte_end":121710,"line_start":62,"line_end":62,"column_start":5,"column_end":61}},{"value":"/     Ok::<_, Infallible>(service_fn(|req: String| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121715,"byte_end":121775,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/         Ok::<_, Infallible>(req)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121780,"byte_end":121816,"line_start":64,"line_end":64,"column_start":5,"column_end":41}},{"value":"/     }))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121821,"byte_end":121832,"line_start":65,"line_end":65,"column_start":5,"column_end":16}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121837,"byte_end":121844,"line_start":66,"line_end":66,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121849,"byte_end":121852,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ // Convert the `MakeService` into a `Service`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121857,"byte_end":121906,"line_start":68,"line_end":68,"column_start":5,"column_end":54}},{"value":"/ let mut svc = make_service.into_service();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121911,"byte_end":121957,"line_start":69,"line_end":69,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121962,"byte_end":121965,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ // Make a new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":121970,"byte_end":121995,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ let mut new_svc = svc.call(()).await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122000,"byte_end":122050,"line_start":72,"line_end":72,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122055,"byte_end":122058,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ // Call the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122063,"byte_end":122086,"line_start":74,"line_end":74,"column_start":5,"column_end":28}},{"value":"/ let res = new_svc.call(\"foo\".to_string()).await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122091,"byte_end":122152,"line_start":75,"line_end":75,"column_start":5,"column_end":66}},{"value":"/ # };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122157,"byte_end":122165,"line_start":76,"line_end":76,"column_start":5,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122170,"byte_end":122177,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122182,"byte_end":122189,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123415,"byte_end":123425,"line_start":121,"line_end":121,"column_start":8,"column_end":18},"name":"as_service","qualname":"::make::make_service::MakeService::as_service","value":"pub fn as_service(&mut Self) -> AsService<, Self, Request> where Self: Sized","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Convert this [`MakeService`] into a [`Service`] without consuming the original [`MakeService`].","sig":null,"attributes":[{"value":"/ Convert this [`MakeService`] into a [`Service`] without consuming the original [`MakeService`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122384,"byte_end":122483,"line_start":89,"line_end":89,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122488,"byte_end":122491,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122496,"byte_end":122509,"line_start":91,"line_end":91,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122514,"byte_end":122521,"line_start":92,"line_end":92,"column_start":5,"column_end":12}},{"value":"/ use std::convert::Infallible;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122526,"byte_end":122559,"line_start":93,"line_end":93,"column_start":5,"column_end":38}},{"value":"/ use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122564,"byte_end":122587,"line_start":94,"line_end":94,"column_start":5,"column_end":28}},{"value":"/ use tower::make::MakeService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122592,"byte_end":122625,"line_start":95,"line_end":95,"column_start":5,"column_end":38}},{"value":"/ use tower::service_fn;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122630,"byte_end":122656,"line_start":96,"line_end":96,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122661,"byte_end":122664,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122669,"byte_end":122686,"line_start":98,"line_end":98,"column_start":5,"column_end":22}},{"value":"/ # async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122691,"byte_end":122704,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/ // A `MakeService`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122709,"byte_end":122731,"line_start":100,"line_end":100,"column_start":5,"column_end":27}},{"value":"/ let mut make_service = service_fn(|make_req: ()| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122736,"byte_end":122796,"line_start":101,"line_end":101,"column_start":5,"column_end":65}},{"value":"/     Ok::<_, Infallible>(service_fn(|req: String| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122801,"byte_end":122861,"line_start":102,"line_end":102,"column_start":5,"column_end":65}},{"value":"/         Ok::<_, Infallible>(req)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122866,"byte_end":122902,"line_start":103,"line_end":103,"column_start":5,"column_end":41}},{"value":"/     }))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122907,"byte_end":122918,"line_start":104,"line_end":104,"column_start":5,"column_end":16}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122923,"byte_end":122930,"line_start":105,"line_end":105,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122935,"byte_end":122938,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // Convert the `MakeService` into a `Service`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122943,"byte_end":122992,"line_start":107,"line_end":107,"column_start":5,"column_end":54}},{"value":"/ let mut svc = make_service.as_service();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":122997,"byte_end":123041,"line_start":108,"line_end":108,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123046,"byte_end":123049,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ // Make a new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123054,"byte_end":123079,"line_start":110,"line_end":110,"column_start":5,"column_end":30}},{"value":"/ let mut new_svc = svc.call(()).await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123084,"byte_end":123134,"line_start":111,"line_end":111,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123139,"byte_end":123142,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ // Call the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123147,"byte_end":123170,"line_start":113,"line_end":113,"column_start":5,"column_end":28}},{"value":"/ let res = new_svc.call(\"foo\".to_string()).await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123175,"byte_end":123236,"line_start":114,"line_end":114,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123241,"byte_end":123244,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ // The original `MakeService` is still accessible","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123249,"byte_end":123302,"line_start":116,"line_end":116,"column_start":5,"column_end":58}},{"value":"/ let new_svc = make_service.make_service(()).await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123307,"byte_end":123370,"line_start":117,"line_end":117,"column_start":5,"column_end":68}},{"value":"/ # };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123375,"byte_end":123383,"line_start":118,"line_end":118,"column_start":5,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123388,"byte_end":123395,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123400,"byte_end":123407,"line_start":120,"line_end":120,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1412},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124438,"byte_end":124449,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"IntoService","qualname":"::make::make_service::IntoService","value":"IntoService {  }","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416}],"decl_id":null,"docs":" Service returned by [`MakeService::into_service`][into].","sig":null,"attributes":[{"value":"/ Service returned by [`MakeService::into_service`][into].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124255,"byte_end":124315,"line_start":159,"line_end":159,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124316,"byte_end":124319,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ See the documentation on [`into_service`][into] for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124320,"byte_end":124384,"line_start":161,"line_end":161,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124385,"byte_end":124388,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [into]: MakeService::into_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124389,"byte_end":124426,"line_start":163,"line_end":163,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1435},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125640,"byte_end":125649,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"AsService","qualname":"::make::make_service::AsService","value":"AsService {  }","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1440}],"decl_id":null,"docs":" Service returned by [`MakeService::as_service`][as].","sig":null,"attributes":[{"value":"/ Service returned by [`MakeService::as_service`][as].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125469,"byte_end":125525,"line_start":212,"line_end":212,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125526,"byte_end":125529,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ See the documentation on [`as_service`][as] for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125530,"byte_end":125590,"line_start":214,"line_end":214,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125591,"byte_end":125594,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ [as]: MakeService::as_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125595,"byte_end":125628,"line_start":216,"line_end":216,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":1471},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117766,"byte_end":117772,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"future","qualname":"::make::future","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","parent":null,"children":[{"krate":0,"index":1472}],"decl_id":null,"docs":" Future types\n","sig":null,"attributes":[{"value":"/ Future types","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/mod.rs","byte_start":117779,"byte_end":117795,"line_start":11,"line_end":11,"column_start":5,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":1475},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ready_cache","qualname":"::ready_cache","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/mod.rs","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1607},{"krate":0,"index":1622}],"decl_id":null,"docs":" A cache of services\n","sig":null,"attributes":[{"value":"cfg(feature = \"ready-cache\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8029,"byte_end":8060,"line_start":188,"line_end":188,"column_start":1,"column_end":32}},{"value":"/ A cache of services","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/mod.rs","byte_start":130338,"byte_end":130361,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":1476},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cache","qualname":"::ready_cache::cache","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","parent":null,"children":[{"krate":0,"index":1477},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1508},{"krate":0,"index":1511},{"krate":0,"index":1514},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1524},{"krate":0,"index":1531},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":4957},{"krate":0,"index":4967},{"krate":0,"index":1538},{"krate":0,"index":1546},{"krate":0,"index":1551},{"krate":0,"index":1556},{"krate":0,"index":1579},{"krate":0,"index":1592},{"krate":0,"index":1596},{"krate":0,"index":1602}],"decl_id":null,"docs":" A cache of services.\n","sig":null,"attributes":[{"value":"/ A cache of services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":130428,"byte_end":130452,"line_start":1,"line_end":1,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1524},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":133049,"byte_end":133059,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"ReadyCache","qualname":"::ready_cache::cache::ReadyCache","value":"ReadyCache {  }","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530}],"decl_id":null,"docs":" Drives readiness over a set of services.","sig":null,"attributes":[{"value":"/ Drives readiness over a set of services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":130791,"byte_end":130835,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":130836,"byte_end":130839,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The cache maintains two internal data structures:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":130840,"byte_end":130893,"line_start":19,"line_end":19,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":130894,"byte_end":130897,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * a set of _pending_ services that have not yet become ready; and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":130898,"byte_end":130967,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ * a set of _ready_ services that have previously polled ready.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":130968,"byte_end":131034,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131035,"byte_end":131038,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ As each `S` typed [`Service`] is added to the cache via [`ReadyCache::push`], it","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131039,"byte_end":131123,"line_start":24,"line_end":24,"column_start":1,"column_end":85}},{"value":"/ is added to the _pending set_. As [`ReadyCache::poll_pending`] is invoked,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131124,"byte_end":131202,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ pending services are polled and added to the _ready set_.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131203,"byte_end":131264,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131265,"byte_end":131268,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`ReadyCache::call_ready`] (or [`ReadyCache::call_ready_index`]) dispatches a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131269,"byte_end":131350,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ request to the specified service, but panics if the specified service is not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131351,"byte_end":131431,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in the ready set. The `ReadyCache::check_*` functions can be used to ensure","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131432,"byte_end":131511,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ that a service is ready before dispatching a request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131512,"byte_end":131569,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131570,"byte_end":131573,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The ready set can hold services for an abitrarily long time. During this","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131574,"byte_end":131650,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ time, the runtime may process events that invalidate that ready state (for","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131651,"byte_end":131729,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ instance, if a keepalive detects a lost connection). In such cases, callers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131730,"byte_end":131809,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ should use [`ReadyCache::check_ready`] (or [`ReadyCache::check_ready_index`])","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131810,"byte_end":131891,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/ immediately before dispatching a request to ensure that the service has not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131892,"byte_end":131971,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ become unavailable.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131972,"byte_end":131995,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":131996,"byte_end":131999,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Once `ReadyCache::call_ready*` is invoked, the service is placed back into","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132000,"byte_end":132078,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ the _pending_ set to be driven to readiness again.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132079,"byte_end":132133,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132134,"byte_end":132137,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ When `ReadyCache::check_ready*` returns `false`, it indicates that the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132138,"byte_end":132212,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ specified service is _not_ ready. If an error is returned, this indicats that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132213,"byte_end":132294,"line_start":44,"line_end":44,"column_start":1,"column_end":82}},{"value":"/ the server failed and has been removed from the cache entirely.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132295,"byte_end":132362,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132363,"byte_end":132366,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ [`ReadyCache::evict`] can be used to remove a service from the cache (by key),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132367,"byte_end":132449,"line_start":47,"line_end":47,"column_start":1,"column_end":83}},{"value":"/ though the service may not be dropped (if it is currently pending) until","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132450,"byte_end":132526,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/ [`ReadyCache::poll_pending`] is invoked.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132527,"byte_end":132571,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132572,"byte_end":132575,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Note that the by-index accessors are provided to support use cases (like","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132576,"byte_end":132652,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"/ power-of-two-choices load balancing) where the caller does not care to keep","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132653,"byte_end":132732,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ track of each service's key. Instead, it needs only to access _some_ ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132733,"byte_end":132811,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ service. In such a case, it should be noted that calls to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132812,"byte_end":132873,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/ [`ReadyCache::poll_pending`] and [`ReadyCache::evict`] may perturb the order of","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132874,"byte_end":132957,"line_start":55,"line_end":55,"column_start":1,"column_end":84}},{"value":"/ the ready set, so any cached indexes should be discarded after such a call.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":132958,"byte_end":133037,"line_start":56,"line_end":56,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135254,"byte_end":135257,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"len","qualname":"<ReadyCache<K, S, Req>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of services in the cache.\n","sig":null,"attributes":[{"value":"/ Returns the total number of services in the cache.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135188,"byte_end":135242,"line_start":137,"line_end":137,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135408,"byte_end":135416,"line_start":143,"line_end":143,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ReadyCache<K, S, Req>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether or not there are any services in the cache.\n","sig":null,"attributes":[{"value":"/ Returns whether or not there are any services in the cache.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135333,"byte_end":135396,"line_start":142,"line_end":142,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135566,"byte_end":135575,"line_start":148,"line_end":148,"column_start":12,"column_end":21},"name":"ready_len","qualname":"<ReadyCache<K, S, Req>>::ready_len","value":"pub fn ready_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of services in the ready set.\n","sig":null,"attributes":[{"value":"/ Returns the number of services in the ready set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135502,"byte_end":135554,"line_start":147,"line_end":147,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135696,"byte_end":135707,"line_start":153,"line_end":153,"column_start":12,"column_end":23},"name":"pending_len","qualname":"<ReadyCache<K, S, Req>>::pending_len","value":"pub fn pending_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of services in the unready set.\n","sig":null,"attributes":[{"value":"/ Returns the number of services in the unready set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135630,"byte_end":135684,"line_start":152,"line_end":152,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135833,"byte_end":135849,"line_start":158,"line_end":158,"column_start":12,"column_end":28},"name":"pending_contains","qualname":"<ReadyCache<K, S, Req>>::pending_contains","value":"pub fn pending_contains<Q: Hash + Equivalent<K>>(&Self, &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the given key is in the unready set.\n","sig":null,"attributes":[{"value":"/ Returns true iff the given key is in the unready set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135764,"byte_end":135821,"line_start":157,"line_end":157,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136035,"byte_end":136044,"line_start":163,"line_end":163,"column_start":12,"column_end":21},"name":"get_ready","qualname":"<ReadyCache<K, S, Req>>::get_ready","value":"pub fn get_ready<Q: Hash + Equivalent<K>>(&Self, &Q)\n-> Option<(usize, &K, &S)>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a reference to a service in the ready set by key.\n","sig":null,"attributes":[{"value":"/ Obtains a reference to a service in the ready set by key.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135962,"byte_end":136023,"line_start":162,"line_end":162,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136270,"byte_end":136283,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"get_ready_mut","qualname":"<ReadyCache<K, S, Req>>::get_ready_mut","value":"pub fn get_ready_mut<Q: Hash + Equivalent<K>>(&mut Self, &Q)\n-> Option<(usize, &K, &mut S)>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a mutable reference to a service in the ready set by key.\n","sig":null,"attributes":[{"value":"/ Obtains a mutable reference to a service in the ready set by key.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136189,"byte_end":136258,"line_start":167,"line_end":167,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136568,"byte_end":136583,"line_start":178,"line_end":178,"column_start":12,"column_end":27},"name":"get_ready_index","qualname":"<ReadyCache<K, S, Req>>::get_ready_index","value":"pub fn get_ready_index(&Self, usize) -> Option<(&K, &S)>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a reference to a service in the ready set by index.\n","sig":null,"attributes":[{"value":"/ Obtains a reference to a service in the ready set by index.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136493,"byte_end":136556,"line_start":177,"line_end":177,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136777,"byte_end":136796,"line_start":183,"line_end":183,"column_start":12,"column_end":31},"name":"get_ready_index_mut","qualname":"<ReadyCache<K, S, Req>>::get_ready_index_mut","value":"pub fn get_ready_index_mut(&mut Self, usize) -> Option<(&mut K, &mut S)>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a mutable reference to a service in the ready set by index.\n","sig":null,"attributes":[{"value":"/ Obtains a mutable reference to a service in the ready set by index.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136694,"byte_end":136765,"line_start":182,"line_end":182,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137266,"byte_end":137271,"line_start":194,"line_end":194,"column_start":12,"column_end":17},"name":"evict","qualname":"<ReadyCache<K, S, Req>>::evict","value":"pub fn evict<Q: Hash + Equivalent<K>>(&mut Self, &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Evicts an item from the cache.","sig":null,"attributes":[{"value":"/ Evicts an item from the cache.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136927,"byte_end":136961,"line_start":187,"line_end":187,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136966,"byte_end":136969,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Returns true if a service was marked for eviction.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":136974,"byte_end":137028,"line_start":189,"line_end":189,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137033,"byte_end":137036,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Services are dropped from the ready set immediately. Services in the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137041,"byte_end":137113,"line_start":191,"line_end":191,"column_start":5,"column_end":77}},{"value":"/ pending set are marked for cancellation, but [`ReadyCache::poll_pending`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137118,"byte_end":137195,"line_start":192,"line_end":192,"column_start":5,"column_end":82}},{"value":"/ must be called to cause the service to be dropped.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137200,"byte_end":137254,"line_start":193,"line_end":193,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1583},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":138372,"byte_end":138376,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"push","qualname":"<ReadyCache<K, S, Req>>::push","value":"pub fn push(&mut Self, K, S)","parent":null,"children":[],"decl_id":null,"docs":" Pushes a new service onto the pending set.","sig":null,"attributes":[{"value":"/ Pushes a new service onto the pending set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137841,"byte_end":137887,"line_start":216,"line_end":216,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137892,"byte_end":137895,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The service will be promoted to the ready set as [`poll_pending`] is invoked.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137900,"byte_end":137981,"line_start":218,"line_end":218,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137986,"byte_end":137989,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note that this does **not** remove services from the ready set. Once the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137994,"byte_end":138070,"line_start":220,"line_end":220,"column_start":5,"column_end":81}},{"value":"/ old service is used, it will be dropped instead of being added back to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":138075,"byte_end":138149,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ the pending set; OR, when the new service becomes ready, it will replace","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":138154,"byte_end":138230,"line_start":222,"line_end":222,"column_start":5,"column_end":81}},{"value":"/ the prior service in the ready set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":138235,"byte_end":138274,"line_start":223,"line_end":223,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":138279,"byte_end":138282,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ [`poll_pending`]: crate::ready_cache::cache::ReadyCache::poll_pending","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":138287,"byte_end":138360,"line_start":225,"line_end":225,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139787,"byte_end":139799,"line_start":258,"line_end":258,"column_start":12,"column_end":24},"name":"poll_pending","qualname":"<ReadyCache<K, S, Req>>::poll_pending","value":"pub fn poll_pending(&mut Self, &mut Context)\n-> Poll<Result<(), error::Failed<K>>>","parent":null,"children":[],"decl_id":null,"docs":" Polls services pending readiness, adding ready services to the ready set.","sig":null,"attributes":[{"value":"/ Polls services pending readiness, adding ready services to the ready set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":138998,"byte_end":139075,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139080,"byte_end":139083,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Returns [`Poll::Ready`] when there are no remaining unready services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139088,"byte_end":139161,"line_start":246,"line_end":246,"column_start":5,"column_end":78}},{"value":"/ [`poll_pending`] should be called again after [`push`] or","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139166,"byte_end":139227,"line_start":247,"line_end":247,"column_start":5,"column_end":66}},{"value":"/ [`call_ready_index`] are invoked.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139232,"byte_end":139269,"line_start":248,"line_end":248,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139274,"byte_end":139277,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Failures indicate that an individual pending service failed to become","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139282,"byte_end":139355,"line_start":250,"line_end":250,"column_start":5,"column_end":78}},{"value":"/ ready (and has been removed from the cache). In such a case,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139360,"byte_end":139424,"line_start":251,"line_end":251,"column_start":5,"column_end":69}},{"value":"/ [`poll_pending`] should typically be called again to continue driving","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139429,"byte_end":139502,"line_start":252,"line_end":252,"column_start":5,"column_end":78}},{"value":"/ pending services to readiness.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139507,"byte_end":139541,"line_start":253,"line_end":253,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139546,"byte_end":139549,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ [`poll_pending`]: crate::ready_cache::cache::ReadyCache::poll_pending","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139554,"byte_end":139627,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/ [`push`]: crate::ready_cache::cache::ReadyCache::push","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139632,"byte_end":139689,"line_start":256,"line_end":256,"column_start":5,"column_end":62}},{"value":"/ [`call_ready_index`]: crate::ready_cache::cache::ReadyCache::call_ready_index","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":139694,"byte_end":139775,"line_start":257,"line_end":257,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":142765,"byte_end":142776,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"check_ready","qualname":"<ReadyCache<K, S, Req>>::check_ready","value":"pub fn check_ready<Q: Hash + Equivalent<K>>(&mut Self, &mut Context, &Q)\n-> Result<bool, error::Failed<K>>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the referenced endpoint is ready.","sig":null,"attributes":[{"value":"/ Checks whether the referenced endpoint is ready.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":142571,"byte_end":142623,"line_start":307,"line_end":307,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":142628,"byte_end":142631,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Returns true if the endpoint is ready and false if it is not. An error is","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":142636,"byte_end":142713,"line_start":309,"line_end":309,"column_start":5,"column_end":82}},{"value":"/ returned if the endpoint fails.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":142718,"byte_end":142753,"line_start":310,"line_end":310,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":143356,"byte_end":143373,"line_start":328,"line_end":328,"column_start":12,"column_end":29},"name":"check_ready_index","qualname":"<ReadyCache<K, S, Req>>::check_ready_index","value":"pub fn check_ready_index(&mut Self, &mut Context, usize)\n-> Result<bool, error::Failed<K>>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the referenced endpoint is ready.","sig":null,"attributes":[{"value":"/ Checks whether the referenced endpoint is ready.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":143078,"byte_end":143130,"line_start":322,"line_end":322,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":143135,"byte_end":143138,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ If the service is no longer ready, it is moved back into the pending set","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":143143,"byte_end":143219,"line_start":324,"line_end":324,"column_start":5,"column_end":81}},{"value":"/ and `false` is returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":143224,"byte_end":143252,"line_start":325,"line_end":325,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":143257,"byte_end":143260,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ If the service errors, it is removed and dropped and the error is returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":143265,"byte_end":143344,"line_start":327,"line_end":327,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":144727,"byte_end":144737,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"call_ready","qualname":"<ReadyCache<K, S, Req>>::call_ready","value":"pub fn call_ready<Q: Hash + Equivalent<K>>(&mut Self, &Q, Req) -> S::Future","parent":null,"children":[],"decl_id":null,"docs":" Calls a ready service by key.","sig":null,"attributes":[{"value":"/ Calls a ready service by key.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":144592,"byte_end":144625,"line_start":365,"line_end":365,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":144630,"byte_end":144633,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":144638,"byte_end":144650,"line_start":367,"line_end":367,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":144655,"byte_end":144658,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ If the specified key does not exist in the ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":144663,"byte_end":144715,"line_start":369,"line_end":369,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145123,"byte_end":145139,"line_start":383,"line_end":383,"column_start":12,"column_end":28},"name":"call_ready_index","qualname":"<ReadyCache<K, S, Req>>::call_ready_index","value":"pub fn call_ready_index(&mut Self, usize, Req) -> S::Future","parent":null,"children":[],"decl_id":null,"docs":" Calls a ready service by index.","sig":null,"attributes":[{"value":"/ Calls a ready service by index.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":144995,"byte_end":145030,"line_start":378,"line_end":378,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145035,"byte_end":145038,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145043,"byte_end":145055,"line_start":380,"line_end":380,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145060,"byte_end":145063,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ If the specified index is out of range.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145068,"byte_end":145111,"line_start":382,"line_end":382,"column_start":5,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1607},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::ready_cache::error","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1613},{"krate":0,"index":1616},{"krate":0,"index":1619}],"decl_id":null,"docs":" Errors\n","sig":null,"attributes":[{"value":"/ Errors","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147419,"byte_end":147429,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1608},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147530,"byte_end":147536,"line_start":5,"line_end":5,"column_start":12,"column_end":18},"name":"Failed","qualname":"::ready_cache::error::Failed","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error indicating that the service with a `K`-typed key failed with an\n error.\n","sig":null,"attributes":[{"value":"/ An error indicating that the service with a `K`-typed key failed with an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147431,"byte_end":147507,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/ error.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147508,"byte_end":147518,"line_start":4,"line_end":4,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1611},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147540,"byte_end":147545,"line_start":5,"line_end":5,"column_start":22,"column_end":27},"name":"0","qualname":"::ready_cache::error::Failed::0","value":"K","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1612},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147547,"byte_end":147566,"line_start":5,"line_end":5,"column_start":29,"column_end":48},"name":"1","qualname":"::ready_cache::error::Failed::1","value":"std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1625},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timeout","qualname":"::timeout","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1639},{"krate":0,"index":1672},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1704},{"krate":0,"index":5128},{"krate":0,"index":5132},{"krate":0,"index":5135},{"krate":0,"index":1707},{"krate":0,"index":1713}],"decl_id":null,"docs":" Middleware that applies a timeout to requests.","sig":null,"attributes":[{"value":"cfg(feature = \"timeout\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8527,"byte_end":8554,"line_start":203,"line_end":203,"column_start":1,"column_end":28}},{"value":"/ Middleware that applies a timeout to requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148136,"byte_end":148186,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148187,"byte_end":148190,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ If the response does not complete within the specified timeout, the response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148191,"byte_end":148271,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ will be aborted.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148272,"byte_end":148292,"line_start":4,"line_end":4,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":1626},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::timeout::error","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":5075},{"krate":0,"index":5078},{"krate":0,"index":5080},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638}],"decl_id":null,"docs":" Error types\n","sig":null,"attributes":[{"value":"/ Error types","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":149847,"byte_end":149862,"line_start":1,"line_end":1,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5075},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":149950,"byte_end":149957,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"Elapsed","qualname":"::timeout::error::Elapsed","value":"","parent":null,"children":[],"decl_id":null,"docs":" The timeout elapsed.\n","sig":null,"attributes":[{"value":"/ The timeout elapsed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":149888,"byte_end":149912,"line_start":5,"line_end":5,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1635},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":150039,"byte_end":150042,"line_start":11,"line_end":11,"column_start":12,"column_end":15},"name":"new","qualname":"<Elapsed>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new elapsed error\n","sig":null,"attributes":[{"value":"/ Construct a new elapsed error","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":149994,"byte_end":150027,"line_start":10,"line_end":10,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":1639},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::timeout::future","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/future.rs","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1650},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1657},{"krate":0,"index":1660},{"krate":0,"index":5082},{"krate":0,"index":5086},{"krate":0,"index":5089},{"krate":0,"index":1663},{"krate":0,"index":1666}],"decl_id":null,"docs":" Future types\n","sig":null,"attributes":[{"value":"/ Future types","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/future.rs","byte_start":150257,"byte_end":150273,"line_start":1,"line_end":1,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":5082},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/future.rs","byte_start":150577,"byte_end":150591,"line_start":17,"line_end":17,"column_start":16,"column_end":30},"name":"ResponseFuture","qualname":"::timeout::future::ResponseFuture","value":"ResponseFuture {  }","parent":null,"children":[{"krate":0,"index":5084},{"krate":0,"index":5085}],"decl_id":null,"docs":" [`Timeout`] response future","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5122},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/layer.rs","byte_start":151665,"byte_end":151677,"line_start":7,"line_end":7,"column_start":12,"column_end":24},"name":"TimeoutLayer","qualname":"::timeout::layer::TimeoutLayer","value":"TimeoutLayer {  }","parent":null,"children":[{"krate":0,"index":5123}],"decl_id":null,"docs":" Applies a timeout to requests via the supplied inner service.\n","sig":null,"attributes":[{"value":"/ Applies a timeout to requests via the supplied inner service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/layer.rs","byte_start":151564,"byte_end":151629,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/layer.rs","byte_start":151778,"byte_end":151781,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"new","qualname":"<TimeoutLayer>::new","value":"pub fn new(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a timeout from a duration\n","sig":null,"attributes":[{"value":"/ Create a timeout from a duration","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/layer.rs","byte_start":151730,"byte_end":151766,"line_start":12,"line_end":12,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5128},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148563,"byte_end":148570,"line_start":19,"line_end":19,"column_start":12,"column_end":19},"name":"Timeout","qualname":"::timeout::Timeout","value":"Timeout {  }","parent":null,"children":[{"krate":0,"index":5130},{"krate":0,"index":5131}],"decl_id":null,"docs":" Applies a timeout to requests.\n","sig":null,"attributes":[{"value":"/ Applies a timeout to requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148493,"byte_end":148527,"line_start":17,"line_end":17,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148711,"byte_end":148714,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Timeout<T>>::new","value":"pub fn new(T, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Timeout`]\n","sig":null,"attributes":[{"value":"/ Creates a new [`Timeout`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148670,"byte_end":148699,"line_start":27,"line_end":27,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148852,"byte_end":148859,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Timeout<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a reference to the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148800,"byte_end":148840,"line_start":32,"line_end":32,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148966,"byte_end":148973,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Timeout<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148906,"byte_end":148954,"line_start":37,"line_end":37,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":149091,"byte_end":149101,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Timeout<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume `self`, returning the inner service\n","sig":null,"attributes":[{"value":"/ Consume `self`, returning the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":149032,"byte_end":149079,"line_start":42,"line_end":42,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":1721},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1798},{"krate":0,"index":1991},{"krate":0,"index":2060},{"krate":0,"index":2208},{"krate":0,"index":2260},{"krate":0,"index":2308},{"krate":0,"index":2359},{"krate":0,"index":2403},{"krate":0,"index":2454},{"krate":0,"index":2506},{"krate":0,"index":2562},{"krate":0,"index":2607},{"krate":0,"index":2680},{"krate":0,"index":2759},{"krate":0,"index":2792},{"krate":0,"index":2849},{"krate":0,"index":2850},{"krate":0,"index":2851},{"krate":0,"index":2854},{"krate":0,"index":2857},{"krate":0,"index":2858},{"krate":0,"index":2861},{"krate":0,"index":2864},{"krate":0,"index":2867},{"krate":0,"index":2870},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2877},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2884},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2891},{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2898},{"krate":0,"index":2901},{"krate":0,"index":2902},{"krate":0,"index":2905},{"krate":0,"index":2908},{"krate":0,"index":2909},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":2918},{"krate":0,"index":2921},{"krate":0,"index":2922},{"krate":0,"index":2925},{"krate":0,"index":2928},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2935},{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2942},{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2949},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2958},{"krate":0,"index":2962},{"krate":0,"index":2981},{"krate":0,"index":3016},{"krate":0,"index":3019}],"decl_id":null,"docs":" Various utility types and functions that are generally used with Tower.\n","sig":null,"attributes":[{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8623,"byte_end":8647,"line_start":206,"line_end":206,"column_start":1,"column_end":25}},{"value":"/ Various utility types and functions that are generally used with Tower.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":152025,"byte_end":152100,"line_start":1,"line_end":1,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":5138},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188113,"byte_end":188120,"line_start":14,"line_end":14,"column_start":12,"column_end":19},"name":"AndThen","qualname":"::util::and_then::AndThen","value":"AndThen {  }","parent":null,"children":[{"krate":0,"index":5141},{"krate":0,"index":5142}],"decl_id":null,"docs":" Service returned by the [`and_then`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`and_then`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":187976,"byte_end":188028,"line_start":10,"line_end":10,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188029,"byte_end":188032,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`and_then`]: crate::util::ServiceExt::and_then","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188033,"byte_end":188084,"line_start":12,"line_end":12,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5147},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188614,"byte_end":188627,"line_start":35,"line_end":35,"column_start":16,"column_end":29},"name":"AndThenFuture","qualname":"::util::and_then::AndThenFuture","value":"AndThenFuture {  }","parent":null,"children":[{"krate":0,"index":5151}],"decl_id":null,"docs":" Response future from [`AndThen`] services.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5196},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189687,"byte_end":189699,"line_start":71,"line_end":71,"column_start":12,"column_end":24},"name":"AndThenLayer","qualname":"::util::and_then::AndThenLayer","value":"AndThenLayer {  }","parent":null,"children":[{"krate":0,"index":5198}],"decl_id":null,"docs":" A [`Layer`] that produces a [`AndThen`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`AndThen`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189561,"byte_end":189613,"line_start":67,"line_end":67,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189614,"byte_end":189617,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189618,"byte_end":189651,"line_start":69,"line_end":69,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189797,"byte_end":189800,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<AndThen<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `AndThen` service.\n","sig":null,"attributes":[{"value":"/ Creates a new `AndThen` service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189749,"byte_end":189785,"line_start":76,"line_end":76,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190076,"byte_end":190081,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"layer","qualname":"<AndThen<S, F>>::layer","value":"pub fn layer(F) -> AndThenLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`AndThen`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`AndThen`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189867,"byte_end":189930,"line_start":81,"line_end":81,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189935,"byte_end":189938,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`AndThenLayer::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189943,"byte_end":190018,"line_start":83,"line_end":83,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190023,"byte_end":190026,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190031,"byte_end":190064,"line_start":85,"line_end":85,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190831,"byte_end":190834,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<AndThenLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`AndThenLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`AndThenLayer`] layer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190778,"byte_end":190819,"line_start":112,"line_end":112,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1820},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194265,"byte_end":194273,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"BoxLayer","qualname":"::util::boxed::layer::BoxLayer","value":"BoxLayer {  }","parent":null,"children":[{"krate":0,"index":1825}],"decl_id":null,"docs":" A boxed [`Layer`] trait object.","sig":null,"attributes":[{"value":"/ A boxed [`Layer`] trait object.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":192664,"byte_end":192699,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":192700,"byte_end":192703,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`BoxLayer`] turns a layer into a trait object, allowing both the [`Layer`] itself","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":192704,"byte_end":192790,"line_start":8,"line_end":8,"column_start":1,"column_end":87}},{"value":"/ and the output [`Service`] to be dynamic, while having consistent types.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":192791,"byte_end":192867,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":192868,"byte_end":192871,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This [`Layer`] produces [`BoxService`] instances erasing the type of the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":192872,"byte_end":192948,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ [`Service`] produced by the wrapped [`Layer`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":192949,"byte_end":192999,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193000,"byte_end":193003,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193004,"byte_end":193017,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193018,"byte_end":193021,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ `BoxLayer` can, for example, be useful to create layers dynamically that otherwise wouldn't have","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193022,"byte_end":193122,"line_start":16,"line_end":16,"column_start":1,"column_end":101}},{"value":"/ the same types. In this example, we include a [`Timeout`] layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193123,"byte_end":193190,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ only if an environment variable is set. We can use `BoxLayer`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193191,"byte_end":193256,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ to return a consistent type regardless of runtime configuration:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193257,"byte_end":193325,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193326,"byte_end":193329,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193330,"byte_end":193337,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193338,"byte_end":193366,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use tower::{Service, ServiceBuilder, BoxError, util::BoxLayer};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193367,"byte_end":193434,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193435,"byte_end":193438,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ fn common_layer<S, T>() -> BoxLayer<S, T, S::Response, BoxError>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193439,"byte_end":193507,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ where","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193508,"byte_end":193517,"line_start":26,"line_end":26,"column_start":1,"column_end":10}},{"value":"/     S: Service<T> + Send + 'static,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193518,"byte_end":193557,"line_start":27,"line_end":27,"column_start":1,"column_end":40}},{"value":"/     S::Future: Send + 'static,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193558,"byte_end":193592,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/     S::Error: Into<BoxError> + 'static,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193593,"byte_end":193636,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"/ {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193637,"byte_end":193642,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/     let builder = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193643,"byte_end":193686,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/         .concurrency_limit(100);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193687,"byte_end":193723,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193724,"byte_end":193727,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     if std::env::var(\"SET_TIMEOUT\").is_ok() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193728,"byte_end":193777,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/         let layer = builder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193778,"byte_end":193809,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/             .timeout(Duration::from_secs(30))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193810,"byte_end":193859,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/             .into_inner();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193860,"byte_end":193890,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193891,"byte_end":193894,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/         BoxLayer::new(layer)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193895,"byte_end":193927,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"/     } else {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193928,"byte_end":193944,"line_start":40,"line_end":40,"column_start":1,"column_end":17}},{"value":"/         let layer = builder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193945,"byte_end":193976,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/             .map_err(Into::into)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":193977,"byte_end":194013,"line_start":42,"line_end":42,"column_start":1,"column_end":37}},{"value":"/             .into_inner();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194014,"byte_end":194044,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194045,"byte_end":194048,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/         BoxLayer::new(layer)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194049,"byte_end":194081,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194082,"byte_end":194091,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194092,"byte_end":194097,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194098,"byte_end":194105,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194106,"byte_end":194109,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194110,"byte_end":194143,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/ [`Service`]: tower_service::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194144,"byte_end":194183,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/ [`BoxService`]: super::BoxService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194184,"byte_end":194221,"line_start":52,"line_end":52,"column_start":1,"column_end":38}},{"value":"/ [`Timeout`]: crate::timeout","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194222,"byte_end":194253,"line_start":53,"line_end":53,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194466,"byte_end":194469,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<BoxLayer<In, T, U, E>>::new","value":"pub fn new<L>(L) -> Self where L: Layer<In> + Send + Sync + 'static,\nL::Service: Service<T, Response = U, Error = U> + Send + 'static,\n<L::Service as Service<T>>::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`BoxLayer`].\n","sig":null,"attributes":[{"value":"/ Create a new [`BoxLayer`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194424,"byte_end":194454,"line_start":59,"line_end":59,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1884},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196046,"byte_end":196056,"line_start":22,"line_end":22,"column_start":12,"column_end":22},"name":"BoxService","qualname":"::util::boxed::sync::BoxService","value":"BoxService {  }","parent":null,"children":[{"krate":0,"index":1888}],"decl_id":null,"docs":" A boxed `Service + Send` trait object.","sig":null,"attributes":[{"value":"/ A boxed `Service + Send` trait object.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195606,"byte_end":195648,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195649,"byte_end":195652,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`BoxService`] turns a service into a trait object, allowing the response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195653,"byte_end":195730,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ future type to be dynamic. This type requires both the service and the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195731,"byte_end":195805,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ response future to be [`Send`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195806,"byte_end":195841,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195842,"byte_end":195845,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If you need a boxed [`Service`] that implements [`Clone`] consider using","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195846,"byte_end":195922,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ [`BoxCloneService`](crate::util::BoxCloneService).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195923,"byte_end":195977,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195978,"byte_end":195981,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See module level documentation for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":195982,"byte_end":196034,"line_start":21,"line_end":21,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196457,"byte_end":196460,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<BoxService<T, U, E>>::new","value":"pub fn new<S>(S) -> Self where S: Service<T, Response = U, Error = U> + Send +\n'static, S::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196423,"byte_end":196445,"line_start":33,"line_end":33,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196861,"byte_end":196866,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"layer","qualname":"<BoxService<T, U, E>>::layer","value":"pub fn layer<S>() -> LayerFn<fn(: S) -> Self> where S: Service<T, Response =\nU, Error = U> + Send + 'static, S::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`Layer`] for wrapping a [`Service`] in a [`BoxService`]\n middleware.","sig":null,"attributes":[{"value":"/ Returns a [`Layer`] for wrapping a [`Service`] in a [`BoxService`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196719,"byte_end":196789,"line_start":43,"line_end":43,"column_start":5,"column_end":75}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196794,"byte_end":196809,"line_start":44,"line_end":44,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196814,"byte_end":196817,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196822,"byte_end":196849,"line_start":46,"line_end":46,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1943},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":197771,"byte_end":197787,"line_start":12,"line_end":12,"column_start":12,"column_end":28},"name":"UnsyncBoxService","qualname":"::util::boxed::unsync::UnsyncBoxService","value":"UnsyncBoxService {  }","parent":null,"children":[{"krate":0,"index":1947}],"decl_id":null,"docs":" A boxed [`Service`] trait object.\n","sig":null,"attributes":[{"value":"/ A boxed [`Service`] trait object.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":197722,"byte_end":197759,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198257,"byte_end":198260,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<UnsyncBoxService<T, U, E>>::new","value":"pub fn new<S>(S) -> Self where S: Service<T, Response = U, Error = U> +\n'static, S::Future: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198223,"byte_end":198245,"line_start":28,"line_end":28,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198624,"byte_end":198629,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"layer","qualname":"<UnsyncBoxService<T, U, E>>::layer","value":"pub fn layer<S>() -> LayerFn<fn(: S) -> Self> where S: Service<T, Response =\nU, Error = U> + 'static, S::Future: 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`Layer`] for wrapping a [`Service`] in an [`UnsyncBoxService`] middleware.","sig":null,"attributes":[{"value":"/ Returns a [`Layer`] for wrapping a [`Service`] in an [`UnsyncBoxService`] middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198483,"byte_end":198572,"line_start":38,"line_end":38,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198577,"byte_end":198580,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198585,"byte_end":198612,"line_start":40,"line_end":40,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2019},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201529,"byte_end":201544,"line_start":58,"line_end":58,"column_start":12,"column_end":27},"name":"BoxCloneService","qualname":"::util::boxed_clone::BoxCloneService","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`Clone`] + [`Send`] boxed [`Service`].","sig":null,"attributes":[{"value":"/ A [`Clone`] + [`Send`] boxed [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200020,"byte_end":200065,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200066,"byte_end":200069,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`BoxCloneService`] turns a service into a trait object, allowing the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200070,"byte_end":200143,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/ response future type to be dynamic, and allowing the service to be cloned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200144,"byte_end":200222,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200223,"byte_end":200226,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This is similar to [`BoxService`](super::BoxService) except the resulting","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200227,"byte_end":200304,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ service implements [`Clone`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200305,"byte_end":200338,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200339,"byte_end":200342,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200343,"byte_end":200356,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200357,"byte_end":200360,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200361,"byte_end":200368,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use tower::{Service, ServiceBuilder, BoxError, util::BoxCloneService};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200369,"byte_end":200443,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200444,"byte_end":200472,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200473,"byte_end":200478,"line_start":23,"line_end":23,"column_start":1,"column_end":6}},{"value":"/ # struct Request;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200479,"byte_end":200500,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/ # struct Response;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200501,"byte_end":200523,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/ # impl Response {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200524,"byte_end":200545,"line_start":26,"line_end":26,"column_start":1,"column_end":22}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200546,"byte_end":200581,"line_start":27,"line_end":27,"column_start":1,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200582,"byte_end":200589,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200590,"byte_end":200593,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // This service has a complex type that is hard to name","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200594,"byte_end":200653,"line_start":30,"line_end":30,"column_start":1,"column_end":60}},{"value":"/ let service = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200654,"byte_end":200693,"line_start":31,"line_end":31,"column_start":1,"column_end":40}},{"value":"/     .map_request(|req| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200694,"byte_end":200722,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/         println!(\"received request\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200723,"byte_end":200764,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/         req","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200765,"byte_end":200780,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200781,"byte_end":200791,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/     .map_response(|res| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200792,"byte_end":200821,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/         println!(\"response produced\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200822,"byte_end":200864,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/         res","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200865,"byte_end":200880,"line_start":38,"line_end":38,"column_start":1,"column_end":16}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200881,"byte_end":200891,"line_start":39,"line_end":39,"column_start":1,"column_end":11}},{"value":"/     .load_shed()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200892,"byte_end":200912,"line_start":40,"line_end":40,"column_start":1,"column_end":21}},{"value":"/     .concurrency_limit(64)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200913,"byte_end":200943,"line_start":41,"line_end":41,"column_start":1,"column_end":31}},{"value":"/     .timeout(Duration::from_secs(10))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200944,"byte_end":200985,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/     .service_fn(|req: Request| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":200986,"byte_end":201028,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"/         Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201029,"byte_end":201075,"line_start":44,"line_end":44,"column_start":1,"column_end":47}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201076,"byte_end":201087,"line_start":45,"line_end":45,"column_start":1,"column_end":12}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201088,"byte_end":201132,"line_start":46,"line_end":46,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201133,"byte_end":201136,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // `BoxCloneService` will erase the type so it's nameable","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201137,"byte_end":201198,"line_start":48,"line_end":48,"column_start":1,"column_end":62}},{"value":"/ let service: BoxCloneService<Request, Response, BoxError> = BoxCloneService::new(service);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201199,"byte_end":201293,"line_start":49,"line_end":49,"column_start":1,"column_end":95}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201294,"byte_end":201338,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201339,"byte_end":201342,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // And we can still clone the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201343,"byte_end":201384,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"/ let cloned_service = service.clone();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201385,"byte_end":201426,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201427,"byte_end":201432,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201433,"byte_end":201475,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201476,"byte_end":201509,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201510,"byte_end":201517,"line_start":57,"line_end":57,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2029},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201783,"byte_end":201786,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<BoxCloneService<T, U, E>>::new","value":"pub fn new<S>(S) -> Self where S: Service<T, Response = U, Error = U> +\nClone + Send + 'static, S::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BoxCloneService`.\n","sig":null,"attributes":[{"value":"/ Create a new `BoxCloneService`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201736,"byte_end":201771,"line_start":66,"line_end":66,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202191,"byte_end":202196,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"layer","qualname":"<BoxCloneService<T, U, E>>::layer","value":"pub fn layer<S>() -> LayerFn<fn(: S) -> Self> where S: Service<T, Response =\nU, Error = U> + Clone + Send + 'static, S::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`Layer`] for wrapping a [`Service`] in a [`BoxCloneService`]\n middleware.","sig":null,"attributes":[{"value":"/ Returns a [`Layer`] for wrapping a [`Service`] in a [`BoxCloneService`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202044,"byte_end":202119,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202124,"byte_end":202139,"line_start":77,"line_end":77,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202144,"byte_end":202147,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202152,"byte_end":202179,"line_start":79,"line_end":79,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5277},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":210828,"byte_end":210835,"line_start":88,"line_end":88,"column_start":16,"column_end":23},"name":"CallAll","qualname":"::util::call_all::ordered::CallAll","value":"CallAll {  }","parent":null,"children":[{"krate":0,"index":5280}],"decl_id":null,"docs":" This is a [`Stream`] of responses resulting from calling the wrapped [`Service`] for each\n request received on the wrapped [`Stream`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211455,"byte_end":211458,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<CallAll<Svc, S>>::new","value":"pub fn new(Svc, S) -> CallAll<Svc, S>","parent":null,"children":[],"decl_id":null,"docs":" Create new [`CallAll`] combinator.","sig":null,"attributes":[{"value":"/ Create new [`CallAll`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211125,"byte_end":211163,"line_start":104,"line_end":104,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211168,"byte_end":211171,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Each request yielded by `stream` is passed to `svc`, and the resulting responses are","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211176,"byte_end":211264,"line_start":106,"line_end":106,"column_start":5,"column_end":93}},{"value":"/ yielded in the same order by the implementation of [`Stream`] for [`CallAll`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211269,"byte_end":211351,"line_start":107,"line_end":107,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211356,"byte_end":211359,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: https://docs.rs/futures/latest/futures/stream/trait.Stream.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211364,"byte_end":211443,"line_start":109,"line_end":109,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211830,"byte_end":211840,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CallAll<Svc, S>>::into_inner","value":"pub fn into_inner(Self) -> Svc","parent":null,"children":[],"decl_id":null,"docs":" Extract the wrapped [`Service`].","sig":null,"attributes":[{"value":"/ Extract the wrapped [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211625,"byte_end":211661,"line_start":116,"line_end":116,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211666,"byte_end":211669,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211674,"byte_end":211686,"line_start":118,"line_end":118,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211691,"byte_end":211694,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Panics if [`take_service`] was already called.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211699,"byte_end":211749,"line_start":120,"line_end":120,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211754,"byte_end":211757,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [`take_service`]: crate::util::CallAll::take_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211762,"byte_end":211818,"line_start":122,"line_end":122,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212196,"byte_end":212208,"line_start":136,"line_end":136,"column_start":12,"column_end":24},"name":"take_service","qualname":"<CallAll<Svc, S>>::take_service","value":"pub fn take_service(Pin<&mut Self>) -> Svc","parent":null,"children":[],"decl_id":null,"docs":" Extract the wrapped [`Service`].","sig":null,"attributes":[{"value":"/ Extract the wrapped [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211899,"byte_end":211935,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211940,"byte_end":211943,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This [`CallAll`] can no longer be used after this function has been called.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211948,"byte_end":212027,"line_start":129,"line_end":129,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212032,"byte_end":212035,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212040,"byte_end":212052,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212057,"byte_end":212060,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Panics if [`take_service`] was already called.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212065,"byte_end":212115,"line_start":133,"line_end":133,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212120,"byte_end":212123,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ [`take_service`]: crate::util::CallAll::take_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212128,"byte_end":212184,"line_start":135,"line_end":135,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212577,"byte_end":212586,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"unordered","qualname":"<CallAll<Svc, S>>::unordered","value":"pub fn unordered(Self) -> super::CallAllUnordered<Svc, S>","parent":null,"children":[],"decl_id":null,"docs":" Return responses as they are ready, regardless of the initial order.","sig":null,"attributes":[{"value":"/ Return responses as they are ready, regardless of the initial order.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212295,"byte_end":212367,"line_start":140,"line_end":140,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212372,"byte_end":212375,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This function must be called before the stream is polled.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212380,"byte_end":212441,"line_start":142,"line_end":142,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212446,"byte_end":212449,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212454,"byte_end":212466,"line_start":144,"line_end":144,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212471,"byte_end":212474,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Panics if [`poll`] was called.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212479,"byte_end":212513,"line_start":146,"line_end":146,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212518,"byte_end":212521,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ [`poll`]: std::future::Future::poll","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212526,"byte_end":212565,"line_start":148,"line_end":148,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":5322},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214135,"byte_end":214151,"line_start":25,"line_end":25,"column_start":16,"column_end":32},"name":"CallAllUnordered","qualname":"::util::call_all::unordered::CallAllUnordered","value":"CallAllUnordered {  }","parent":null,"children":[{"krate":0,"index":5325}],"decl_id":null,"docs":" A stream of responses received from the inner service in received order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214603,"byte_end":214606,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<CallAllUnordered<Svc, S>>::new","value":"pub fn new(Svc, S) -> CallAllUnordered<Svc, S>","parent":null,"children":[],"decl_id":null,"docs":" Create new [`CallAllUnordered`] combinator.","sig":null,"attributes":[{"value":"/ Create new [`CallAllUnordered`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214452,"byte_end":214499,"line_start":41,"line_end":41,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214504,"byte_end":214507,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: https://docs.rs/futures/latest/futures/stream/trait.Stream.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214512,"byte_end":214591,"line_start":43,"line_end":43,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2189},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215007,"byte_end":215017,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CallAllUnordered<Svc, S>>::into_inner","value":"pub fn into_inner(Self) -> Svc","parent":null,"children":[],"decl_id":null,"docs":" Extract the wrapped [`Service`].","sig":null,"attributes":[{"value":"/ Extract the wrapped [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214793,"byte_end":214829,"line_start":50,"line_end":50,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214834,"byte_end":214837,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214842,"byte_end":214854,"line_start":52,"line_end":52,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214859,"byte_end":214862,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Panics if [`take_service`] was already called.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214867,"byte_end":214917,"line_start":54,"line_end":54,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214922,"byte_end":214925,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ [`take_service`]: crate::util::CallAllUnordered::take_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214930,"byte_end":214995,"line_start":56,"line_end":56,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215389,"byte_end":215401,"line_start":70,"line_end":70,"column_start":12,"column_end":24},"name":"take_service","qualname":"<CallAllUnordered<Svc, S>>::take_service","value":"pub fn take_service(Pin<&mut Self>) -> Svc","parent":null,"children":[],"decl_id":null,"docs":" Extract the wrapped `Service`.","sig":null,"attributes":[{"value":"/ Extract the wrapped `Service`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215076,"byte_end":215110,"line_start":61,"line_end":61,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215115,"byte_end":215118,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ This [`CallAllUnordered`] can no longer be used after this function has been called.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215123,"byte_end":215211,"line_start":63,"line_end":63,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215216,"byte_end":215219,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215224,"byte_end":215236,"line_start":65,"line_end":65,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215241,"byte_end":215244,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Panics if [`take_service`] was already called.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215249,"byte_end":215299,"line_start":67,"line_end":67,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215304,"byte_end":215307,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ [`take_service`]: crate::util::CallAllUnordered::take_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215312,"byte_end":215377,"line_start":69,"line_end":69,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5420},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216865,"byte_end":216866,"line_start":24,"line_end":24,"column_start":5,"column_end":6},"name":"A","qualname":"::util::either::Either::A","value":"Either::A(A)","parent":{"krate":0,"index":5417},"children":[],"decl_id":null,"docs":" One type of backing [`Service`].\n","sig":null,"attributes":[{"value":"/ One type of backing [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216824,"byte_end":216860,"line_start":23,"line_end":23,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5422},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216929,"byte_end":216930,"line_start":26,"line_end":26,"column_start":5,"column_end":6},"name":"B","qualname":"::util::either::Either::B","value":"Either::B(B)","parent":{"krate":0,"index":5417},"children":[],"decl_id":null,"docs":" The other type of backing [`Service`].\n","sig":null,"attributes":[{"value":"/ The other type of backing [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216882,"byte_end":216924,"line_start":25,"line_end":25,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":5417},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216805,"byte_end":216811,"line_start":22,"line_end":22,"column_start":10,"column_end":16},"name":"Either","qualname":"::util::either::Either","value":"pub enum Either<A, B> { A(A), B(B), }","parent":null,"children":[{"krate":0,"index":5420},{"krate":0,"index":5422}],"decl_id":null,"docs":" Combine two different service types into a single type.","sig":null,"attributes":[{"value":"pin(__private(project = EitherProj))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216735,"byte_end":216771,"line_start":20,"line_end":20,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5392},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216805,"byte_end":216811,"line_start":22,"line_end":22,"column_start":10,"column_end":16},"name":"__Either","qualname":"::util::either::_::__Either","value":"__Either {  }","parent":null,"children":[{"krate":0,"index":5396},{"krate":0,"index":5397},{"krate":0,"index":5398}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216735,"byte_end":216771,"line_start":20,"line_end":20,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":2281},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220430,"byte_end":220444,"line_start":48,"line_end":48,"column_start":8,"column_end":22},"name":"future_service","qualname":"::util::future_service::future_service","value":"pub fn future_service<F, S, R, E>(F) -> FutureService<F, S> where\nF: Future<Output = Result<S, E>> + Unpin, S: Service<R, Error = E>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`FutureService`] for the given future.","sig":null,"attributes":[{"value":"/ Returns a new [`FutureService`] for the given future.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":218876,"byte_end":218933,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":218934,"byte_end":218937,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A [`FutureService`] allows you to treat a future that resolves to a service as a service. This","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":218938,"byte_end":219036,"line_start":11,"line_end":11,"column_start":1,"column_end":99}},{"value":"/ can be useful for services that are created asynchronously.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219037,"byte_end":219100,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219101,"byte_end":219104,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219105,"byte_end":219118,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219119,"byte_end":219126,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use tower::{service_fn, Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219127,"byte_end":219176,"line_start":16,"line_end":16,"column_start":1,"column_end":50}},{"value":"/ use tower::util::future_service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219177,"byte_end":219213,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ use std::convert::Infallible;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219214,"byte_end":219247,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219248,"byte_end":219251,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219252,"byte_end":219269,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/ # async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219270,"byte_end":219283,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/ // A future which outputs a type implementing `Service`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219284,"byte_end":219344,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/ let future_of_a_service = async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219345,"byte_end":219382,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"/     let svc = service_fn(|_req: ()| async { Ok::<_, Infallible>(\"ok\") });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219383,"byte_end":219460,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/     Ok::<_, Infallible>(svc)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219461,"byte_end":219493,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219494,"byte_end":219500,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219501,"byte_end":219504,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // Wrap the future with a `FutureService`, allowing it to be used","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219505,"byte_end":219574,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ // as a service without awaiting the future's completion:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219575,"byte_end":219636,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/ let mut svc = future_service(Box::pin(future_of_a_service));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219637,"byte_end":219701,"line_start":30,"line_end":30,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219702,"byte_end":219705,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Now, when we wait for the service to become ready, it will","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219706,"byte_end":219771,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/ // drive the future to completion internally.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219772,"byte_end":219821,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/ let svc = svc.ready().await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219822,"byte_end":219863,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ let res = svc.call(()).await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219864,"byte_end":219906,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/ # };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219907,"byte_end":219915,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219916,"byte_end":219923,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219924,"byte_end":219931,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219932,"byte_end":219935,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Regarding the [`Unpin`] bound","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219936,"byte_end":219971,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219972,"byte_end":219975,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The [`Unpin`] bound on `F` is necessary because the future will be polled in","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":219976,"byte_end":220056,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ [`Service::poll_ready`] which doesn't have a pinned receiver (it takes `&mut self` and not `self:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220057,"byte_end":220158,"line_start":43,"line_end":43,"column_start":1,"column_end":102}},{"value":"/ Pin<&mut Self>`). So we cannot put the future into a `Pin` without requiring `Unpin`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220159,"byte_end":220248,"line_start":44,"line_end":44,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220249,"byte_end":220252,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This will most likely come up if you're calling `future_service` with an async block. In that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220253,"byte_end":220350,"line_start":46,"line_end":46,"column_start":1,"column_end":98}},{"value":"/ case you can use `Box::pin(async { ... })` as shown in the example.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220351,"byte_end":220422,"line_start":47,"line_end":47,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":5426},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220771,"byte_end":220784,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"FutureService","qualname":"::util::future_service::FutureService","value":"FutureService {  }","parent":null,"children":[{"krate":0,"index":5429}],"decl_id":null,"docs":" A type that implements [`Service`] for a [`Future`] that produces a [`Service`].","sig":null,"attributes":[{"value":"/ A type that implements [`Service`] for a [`Future`] that produces a [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220609,"byte_end":220693,"line_start":56,"line_end":56,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220694,"byte_end":220697,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ See [`future_service`] for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220698,"byte_end":220742,"line_start":58,"line_end":58,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222570,"byte_end":222573,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"new","qualname":"<FutureService<F, S>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`FutureService`] for the given future.","sig":null,"attributes":[{"value":"/ Returns a new [`FutureService`] for the given future.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220857,"byte_end":220914,"line_start":65,"line_end":65,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220919,"byte_end":220922,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ A [`FutureService`] allows you to treat a future that resolves to a service as a service. This","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220927,"byte_end":221025,"line_start":67,"line_end":67,"column_start":5,"column_end":103}},{"value":"/ can be useful for services that are created asynchronously.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221030,"byte_end":221093,"line_start":68,"line_end":68,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221098,"byte_end":221101,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221106,"byte_end":221119,"line_start":70,"line_end":70,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221124,"byte_end":221131,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ use tower::{service_fn, Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221136,"byte_end":221185,"line_start":72,"line_end":72,"column_start":5,"column_end":54}},{"value":"/ use tower::util::FutureService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221190,"byte_end":221225,"line_start":73,"line_end":73,"column_start":5,"column_end":40}},{"value":"/ use std::convert::Infallible;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221230,"byte_end":221263,"line_start":74,"line_end":74,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221268,"byte_end":221271,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221276,"byte_end":221293,"line_start":76,"line_end":76,"column_start":5,"column_end":22}},{"value":"/ # async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221298,"byte_end":221311,"line_start":77,"line_end":77,"column_start":5,"column_end":18}},{"value":"/ // A future which outputs a type implementing `Service`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221316,"byte_end":221376,"line_start":78,"line_end":78,"column_start":5,"column_end":65}},{"value":"/ let future_of_a_service = async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221381,"byte_end":221418,"line_start":79,"line_end":79,"column_start":5,"column_end":42}},{"value":"/     let svc = service_fn(|_req: ()| async { Ok::<_, Infallible>(\"ok\") });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221423,"byte_end":221500,"line_start":80,"line_end":80,"column_start":5,"column_end":82}},{"value":"/     Ok::<_, Infallible>(svc)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221505,"byte_end":221537,"line_start":81,"line_end":81,"column_start":5,"column_end":37}},{"value":"/ };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221542,"byte_end":221548,"line_start":82,"line_end":82,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221553,"byte_end":221556,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ // Wrap the future with a `FutureService`, allowing it to be used","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221561,"byte_end":221630,"line_start":84,"line_end":84,"column_start":5,"column_end":74}},{"value":"/ // as a service without awaiting the future's completion:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221635,"byte_end":221696,"line_start":85,"line_end":85,"column_start":5,"column_end":66}},{"value":"/ let mut svc = FutureService::new(Box::pin(future_of_a_service));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221701,"byte_end":221769,"line_start":86,"line_end":86,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221774,"byte_end":221777,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ // Now, when we wait for the service to become ready, it will","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221782,"byte_end":221847,"line_start":88,"line_end":88,"column_start":5,"column_end":70}},{"value":"/ // drive the future to completion internally.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221852,"byte_end":221901,"line_start":89,"line_end":89,"column_start":5,"column_end":54}},{"value":"/ let svc = svc.ready().await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221906,"byte_end":221947,"line_start":90,"line_end":90,"column_start":5,"column_end":46}},{"value":"/ let res = svc.call(()).await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221952,"byte_end":221994,"line_start":91,"line_end":91,"column_start":5,"column_end":47}},{"value":"/ # };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":221999,"byte_end":222007,"line_start":92,"line_end":92,"column_start":5,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222012,"byte_end":222019,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222024,"byte_end":222031,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222036,"byte_end":222039,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Regarding the [`Unpin`] bound","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222044,"byte_end":222079,"line_start":96,"line_end":96,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222084,"byte_end":222087,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ The [`Unpin`] bound on `F` is necessary because the future will be polled in","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222092,"byte_end":222172,"line_start":98,"line_end":98,"column_start":5,"column_end":85}},{"value":"/ [`Service::poll_ready`] which doesn't have a pinned receiver (it takes `&mut self` and not `self:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222177,"byte_end":222278,"line_start":99,"line_end":99,"column_start":5,"column_end":106}},{"value":"/ Pin<&mut Self>`). So we cannot put the future into a `Pin` without requiring `Unpin`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222283,"byte_end":222372,"line_start":100,"line_end":100,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222377,"byte_end":222380,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This will most likely come up if you're calling `future_service` with an async block. In that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222385,"byte_end":222482,"line_start":102,"line_end":102,"column_start":5,"column_end":102}},{"value":"/ case you can use `Box::pin(async { ... })` as shown in the example.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222487,"byte_end":222558,"line_start":103,"line_end":103,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":5447},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":225881,"byte_end":225887,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"MapErr","qualname":"::util::map_err::MapErr","value":"MapErr {  }","parent":null,"children":[{"krate":0,"index":5450},{"krate":0,"index":5451}],"decl_id":null,"docs":" Service returned by the [`map_err`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`map_err`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":225747,"byte_end":225798,"line_start":7,"line_end":7,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":225799,"byte_end":225802,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`map_err`]: crate::util::ServiceExt::map_err","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":225803,"byte_end":225852,"line_start":9,"line_end":9,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5456},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226354,"byte_end":226365,"line_start":32,"line_end":32,"column_start":12,"column_end":23},"name":"MapErrLayer","qualname":"::util::map_err::MapErrLayer","value":"MapErrLayer {  }","parent":null,"children":[{"krate":0,"index":5458}],"decl_id":null,"docs":" A [`Layer`] that produces [`MapErr`] services.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces [`MapErr`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226230,"byte_end":226280,"line_start":28,"line_end":28,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226281,"byte_end":226284,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226285,"byte_end":226318,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":5478},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226512,"byte_end":226524,"line_start":40,"line_end":40,"column_start":14,"column_end":26},"name":"MapErrFuture","qualname":"::util::map_err::MapErrFuture","value":"MapErrFuture {  }","parent":null,"children":[{"krate":0,"index":5481}],"decl_id":null,"docs":" Response future from [`MapErr`] services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2339},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226637,"byte_end":226640,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<MapErr<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapErr`] service.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapErr`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226588,"byte_end":226625,"line_start":44,"line_end":44,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226913,"byte_end":226918,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapErr<S, F>>::layer","value":"pub fn layer(F) -> MapErrLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapErr`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapErr`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226706,"byte_end":226768,"line_start":49,"line_end":49,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226773,"byte_end":226776,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapErrLayer::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226781,"byte_end":226855,"line_start":51,"line_end":51,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226860,"byte_end":226863,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226868,"byte_end":226901,"line_start":53,"line_end":53,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2353},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":227618,"byte_end":227621,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<MapErrLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapErrLayer`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapErrLayer`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":227572,"byte_end":227606,"line_start":80,"line_end":80,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":5519},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228146,"byte_end":228156,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"MapRequest","qualname":"::util::map_request::MapRequest","value":"MapRequest {  }","parent":null,"children":[{"krate":0,"index":5522},{"krate":0,"index":5523}],"decl_id":null,"docs":" Service returned by the [`MapRequest`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`MapRequest`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228002,"byte_end":228056,"line_start":6,"line_end":6,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228057,"byte_end":228060,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`MapRequest`]: crate::util::ServiceExt::map_request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228061,"byte_end":228117,"line_start":8,"line_end":8,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2383},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228594,"byte_end":228597,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<MapRequest<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapRequest`] service.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapRequest`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228541,"byte_end":228582,"line_start":28,"line_end":28,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228882,"byte_end":228887,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapRequest<S, F>>::layer","value":"pub fn layer(F) -> MapRequestLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapRequest`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapRequest`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228667,"byte_end":228733,"line_start":33,"line_end":33,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228738,"byte_end":228741,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapRequestLayer::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228746,"byte_end":228824,"line_start":35,"line_end":35,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228829,"byte_end":228832,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228837,"byte_end":228870,"line_start":37,"line_end":37,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5528},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229534,"byte_end":229549,"line_start":67,"line_end":67,"column_start":12,"column_end":27},"name":"MapRequestLayer","qualname":"::util::map_request::MapRequestLayer","value":"MapRequestLayer {  }","parent":null,"children":[{"krate":0,"index":5530}],"decl_id":null,"docs":" A [`Layer`] that produces [`MapRequest`] services.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces [`MapRequest`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229406,"byte_end":229460,"line_start":63,"line_end":63,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229461,"byte_end":229464,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229465,"byte_end":229498,"line_start":65,"line_end":65,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2397},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229651,"byte_end":229654,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<MapRequestLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapRequestLayer`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapRequestLayer`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229601,"byte_end":229639,"line_start":72,"line_end":72,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":5537},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230249,"byte_end":230260,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"MapResponse","qualname":"::util::map_response::MapResponse","value":"MapResponse {  }","parent":null,"children":[{"krate":0,"index":5540},{"krate":0,"index":5541}],"decl_id":null,"docs":" Service returned by the [`map_response`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`map_response`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230100,"byte_end":230156,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230157,"byte_end":230160,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`map_response`]: crate::util::ServiceExt::map_response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230161,"byte_end":230220,"line_start":9,"line_end":9,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5546},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230743,"byte_end":230759,"line_start":32,"line_end":32,"column_start":12,"column_end":28},"name":"MapResponseLayer","qualname":"::util::map_response::MapResponseLayer","value":"MapResponseLayer {  }","parent":null,"children":[{"krate":0,"index":5548}],"decl_id":null,"docs":" A [`Layer`] that produces a [`MapResponse`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`MapResponse`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230613,"byte_end":230669,"line_start":28,"line_end":28,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230670,"byte_end":230673,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230674,"byte_end":230707,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":5568},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230921,"byte_end":230938,"line_start":40,"line_end":40,"column_start":14,"column_end":31},"name":"MapResponseFuture","qualname":"::util::map_response::MapResponseFuture","value":"MapResponseFuture {  }","parent":null,"children":[{"krate":0,"index":5571}],"decl_id":null,"docs":" Response future from [`MapResponse`] services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231050,"byte_end":231053,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<MapResponse<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `MapResponse` service.\n","sig":null,"attributes":[{"value":"/ Creates a new `MapResponse` service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230998,"byte_end":231038,"line_start":44,"line_end":44,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2435},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231341,"byte_end":231346,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapResponse<S, F>>::layer","value":"pub fn layer(F) -> MapResponseLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapResponse`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapResponse`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231124,"byte_end":231191,"line_start":49,"line_end":49,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231196,"byte_end":231199,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapResponseLayer::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231204,"byte_end":231283,"line_start":51,"line_end":51,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231288,"byte_end":231291,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231296,"byte_end":231329,"line_start":53,"line_end":53,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":232071,"byte_end":232074,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<MapResponseLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapResponseLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapResponseLayer`] layer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":232014,"byte_end":232059,"line_start":80,"line_end":80,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5609},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":232662,"byte_end":232671,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"MapResult","qualname":"::util::map_result::MapResult","value":"MapResult {  }","parent":null,"children":[{"krate":0,"index":5612},{"krate":0,"index":5613}],"decl_id":null,"docs":" Service returned by the [`map_result`] combinator.","sig":null,"attributes":[{"value":"/ Service returned by the [`map_result`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":232519,"byte_end":232573,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":232574,"byte_end":232577,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`map_result`]: crate::util::ServiceExt::map_result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":232578,"byte_end":232633,"line_start":9,"line_end":9,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":5618},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233148,"byte_end":233162,"line_start":32,"line_end":32,"column_start":12,"column_end":26},"name":"MapResultLayer","qualname":"::util::map_result::MapResultLayer","value":"MapResultLayer {  }","parent":null,"children":[{"krate":0,"index":5620}],"decl_id":null,"docs":" A [`Layer`] that produces a [`MapResult`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`MapResult`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233020,"byte_end":233074,"line_start":28,"line_end":28,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233075,"byte_end":233078,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233079,"byte_end":233112,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":5640},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233318,"byte_end":233333,"line_start":40,"line_end":40,"column_start":14,"column_end":29},"name":"MapResultFuture","qualname":"::util::map_result::MapResultFuture","value":"MapResultFuture {  }","parent":null,"children":[{"krate":0,"index":5643}],"decl_id":null,"docs":" Response future from [`MapResult`] services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233441,"byte_end":233444,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<MapResult<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapResult`] service.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapResult`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233389,"byte_end":233429,"line_start":44,"line_end":44,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233726,"byte_end":233731,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapResult<S, F>>::layer","value":"pub fn layer(F) -> MapResultLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapResult`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapResult`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233513,"byte_end":233578,"line_start":49,"line_end":49,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233583,"byte_end":233586,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapResultLayer::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233591,"byte_end":233668,"line_start":51,"line_end":51,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233673,"byte_end":233676,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233681,"byte_end":233714,"line_start":53,"line_end":53,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":234523,"byte_end":234526,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<MapResultLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapResultLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapResultLayer`] layer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":234468,"byte_end":234511,"line_start":81,"line_end":81,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5681},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235090,"byte_end":235099,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"MapFuture","qualname":"::util::map_future::MapFuture","value":"MapFuture {  }","parent":null,"children":[{"krate":0,"index":5684},{"krate":0,"index":5685}],"decl_id":null,"docs":" [`Service`] returned by the [`map_future`] combinator.","sig":null,"attributes":[{"value":"/ [`Service`] returned by the [`map_future`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":234943,"byte_end":235001,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235002,"byte_end":235005,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`map_future`]: crate::util::ServiceExt::map_future","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235006,"byte_end":235061,"line_start":11,"line_end":11,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235220,"byte_end":235223,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<MapFuture<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapFuture`] service.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapFuture`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235168,"byte_end":235208,"line_start":19,"line_end":19,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235500,"byte_end":235505,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"layer","qualname":"<MapFuture<S, F>>::layer","value":"pub fn layer(F) -> MapFutureLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`MapFuture`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`MapFuture`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235287,"byte_end":235352,"line_start":24,"line_end":24,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235357,"byte_end":235360,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`MapFutureLayer::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235365,"byte_end":235442,"line_start":26,"line_end":26,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235447,"byte_end":235450,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235455,"byte_end":235488,"line_start":28,"line_end":28,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235629,"byte_end":235636,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MapFuture<S, F>>::get_ref","value":"pub fn get_ref(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a reference to the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235577,"byte_end":235617,"line_start":33,"line_end":33,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235743,"byte_end":235750,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MapFuture<S, F>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner service\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235683,"byte_end":235731,"line_start":38,"line_end":38,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235868,"byte_end":235878,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MapFuture<S, F>>::into_inner","value":"pub fn into_inner(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consume `self`, returning the inner service\n","sig":null,"attributes":[{"value":"/ Consume `self`, returning the inner service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235809,"byte_end":235856,"line_start":43,"line_end":43,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5690},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236843,"byte_end":236857,"line_start":85,"line_end":85,"column_start":12,"column_end":26},"name":"MapFutureLayer","qualname":"::util::map_future::MapFutureLayer","value":"MapFutureLayer {  }","parent":null,"children":[{"krate":0,"index":5692}],"decl_id":null,"docs":" A [`Layer`] that produces a [`MapFuture`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`MapFuture`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236722,"byte_end":236776,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236777,"byte_end":236780,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236781,"byte_end":236814,"line_start":83,"line_end":83,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2553},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236963,"byte_end":236966,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<MapFutureLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`MapFutureLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`MapFutureLayer`] layer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236908,"byte_end":236951,"line_start":90,"line_end":90,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5696},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":237891,"byte_end":237898,"line_start":16,"line_end":16,"column_start":16,"column_end":23},"name":"Oneshot","qualname":"::util::oneshot::Oneshot","value":"Oneshot {  }","parent":null,"children":[{"krate":0,"index":5699}],"decl_id":null,"docs":" A [`Future`] consuming a [`Service`] and request, waiting until the [`Service`]\n is ready, and then calling [`Service::call`] with the request, and\n waiting for that [`Future`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2601},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":239218,"byte_end":239221,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Oneshot<S, Req>>::new","value":"pub fn new(S, Req) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":239184,"byte_end":239206,"line_start":73,"line_end":73,"column_start":5,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":2608},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::util::optional::error","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","parent":null,"children":[{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2613},{"krate":0,"index":5786},{"krate":0,"index":5789},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2620}],"decl_id":null,"docs":" Error types for [`Optional`].\n","sig":null,"attributes":[{"value":"/ Error types for [`Optional`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240335,"byte_end":240368,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":5786},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":242007,"byte_end":242011,"line_start":7,"line_end":7,"column_start":12,"column_end":16},"name":"None","qualname":"::util::optional::error::None","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned if the inner [`Service`] has not been set.","sig":null,"attributes":[{"value":"/ Error returned if the inner [`Service`] has not been set.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":241881,"byte_end":241942,"line_start":3,"line_end":3,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":241943,"byte_end":241946,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":241947,"byte_end":241978,"line_start":5,"line_end":5,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":2621},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::util::optional::future","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/future.rs","parent":null,"children":[{"krate":0,"index":2622},{"krate":0,"index":2625},{"krate":0,"index":2628},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2635},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2642},{"krate":0,"index":5791},{"krate":0,"index":5794},{"krate":0,"index":5797},{"krate":0,"index":2645},{"krate":0,"index":2648}],"decl_id":null,"docs":" Future types for [`Optional`].\n","sig":null,"attributes":[{"value":"/ Future types for [`Optional`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240384,"byte_end":240418,"line_start":7,"line_end":7,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5791},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/future.rs","byte_start":242555,"byte_end":242569,"line_start":15,"line_end":15,"column_start":16,"column_end":30},"name":"ResponseFuture","qualname":"::util::optional::future::ResponseFuture","value":"ResponseFuture {  }","parent":null,"children":[{"krate":0,"index":5793}],"decl_id":null,"docs":" Response future returned by [`Optional`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5827},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240766,"byte_end":240774,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"Optional","qualname":"::util::optional::Optional","value":"Optional {  }","parent":null,"children":[{"krate":0,"index":5829}],"decl_id":null,"docs":" Optionally forwards requests to an inner service.","sig":null,"attributes":[{"value":"/ Optionally forwards requests to an inner service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240531,"byte_end":240584,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240585,"byte_end":240588,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ If the inner service is [`None`], [`optional::None`] is returned as the response.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240589,"byte_end":240674,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240675,"byte_end":240678,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`optional::None`]: crate::util::error::optional::None","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240679,"byte_end":240737,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240873,"byte_end":240876,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Optional<T>>::new","value":"pub fn new<Request>(Option<T>) -> Optional<T> where T: Service<Request>,\nT::Error: Into<crate::BoxError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Optional`].\n","sig":null,"attributes":[{"value":"/ Create a new [`Optional`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240831,"byte_end":240861,"line_start":25,"line_end":25,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":2708},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243641,"byte_end":243653,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"name":"ReadyOneshot","qualname":"::util::ready::ReadyOneshot","value":"ReadyOneshot {  }","parent":null,"children":[{"krate":0,"index":2711},{"krate":0,"index":2712}],"decl_id":null,"docs":" A [`Future`] that yields the service when it is ready to accept a request.","sig":null,"attributes":[{"value":"/ A [`Future`] that yields the service when it is ready to accept a request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243394,"byte_end":243472,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243473,"byte_end":243476,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`ReadyOneshot`] values are produced by [`ServiceExt::ready_oneshot`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243477,"byte_end":243551,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243552,"byte_end":243555,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`ServiceExt::ready_oneshot`]: crate::util::ServiceExt::ready_oneshot","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243556,"byte_end":243629,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2719},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243965,"byte_end":243968,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadyOneshot<T, Request>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243931,"byte_end":243953,"line_start":28,"line_end":28,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2729},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245011,"byte_end":245016,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"Ready","qualname":"::util::ready::Ready","value":"","parent":null,"children":[],"decl_id":null,"docs":" A future that yields a mutable reference to the service when it is ready to accept a request.","sig":null,"attributes":[{"value":"/ A future that yields a mutable reference to the service when it is ready to accept a request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244776,"byte_end":244873,"line_start":65,"line_end":65,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244874,"byte_end":244877,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ [`Ready`] values are produced by [`ServiceExt::ready`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244878,"byte_end":244937,"line_start":67,"line_end":67,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244938,"byte_end":244941,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ [`ServiceExt::ready`]: crate::util::ServiceExt::ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244942,"byte_end":244999,"line_start":69,"line_end":69,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":2735},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245394,"byte_end":245402,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"name":"ReadyAnd","qualname":"::util::ready::ReadyAnd","value":"Ready","parent":null,"children":[],"decl_id":null,"docs":" A future that yields a mutable reference to the service when it is ready to accept a request.","sig":null,"attributes":[{"value":"/ A future that yields a mutable reference to the service when it is ready to accept a request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245069,"byte_end":245166,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245167,"byte_end":245170,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ [`ReadyAnd`] values are produced by [`ServiceExt::ready_and`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245171,"byte_end":245237,"line_start":74,"line_end":74,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245238,"byte_end":245241,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [`ServiceExt::ready_and`]: crate::util::ServiceExt::ready_and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245242,"byte_end":245307,"line_start":76,"line_end":76,"column_start":1,"column_end":66}},{"value":"deprecated(since = \"0.4.6\", note = \"Please use the Ready future instead\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245308,"byte_end":245384,"line_start":77,"line_end":77,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2747},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245700,"byte_end":245703,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<Ready>::new","value":"pub fn new(&'a mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245666,"byte_end":245688,"line_start":87,"line_end":87,"column_start":5,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":2776},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247374,"byte_end":247384,"line_start":46,"line_end":46,"column_start":8,"column_end":18},"name":"service_fn","qualname":"::util::service_fn::service_fn","value":"pub fn service_fn<T>(T) -> ServiceFn<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`ServiceFn`] with the given closure.","sig":null,"attributes":[{"value":"/ Returns a new [`ServiceFn`] with the given closure.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246359,"byte_end":246414,"line_start":6,"line_end":6,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246415,"byte_end":246418,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This lets you build a [`Service`] from an async function that returns a [`Result`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246419,"byte_end":246506,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246507,"byte_end":246510,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246511,"byte_end":246524,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246525,"byte_end":246528,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246529,"byte_end":246536,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use tower::{service_fn, Service, ServiceExt, BoxError};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246537,"byte_end":246596,"line_start":13,"line_end":13,"column_start":1,"column_end":60}},{"value":"/ # struct Request;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246597,"byte_end":246618,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"/ # impl Request {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246619,"byte_end":246639,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246640,"byte_end":246675,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246676,"byte_end":246683,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ # struct Response(&'static str);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246684,"byte_end":246720,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/ # impl Response {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246721,"byte_end":246742,"line_start":19,"line_end":19,"column_start":1,"column_end":22}},{"value":"/ #     fn new(body: &'static str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246743,"byte_end":246789,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ #         Self(body)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246790,"byte_end":246814,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/ #     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246815,"byte_end":246826,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/ #     fn into_body(self) -> &'static str { self.0 }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246827,"byte_end":246882,"line_start":23,"line_end":23,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246883,"byte_end":246890,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246891,"byte_end":246894,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246895,"byte_end":246915,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"/ # async fn main() -> Result<(), BoxError> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246916,"byte_end":246963,"line_start":27,"line_end":27,"column_start":1,"column_end":48}},{"value":"/ async fn handle(request: Request) -> Result<Response, BoxError> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":246964,"byte_end":247033,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/     let response = Response::new(\"Hello, World!\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247034,"byte_end":247088,"line_start":29,"line_end":29,"column_start":1,"column_end":55}},{"value":"/     Ok(response)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247089,"byte_end":247109,"line_start":30,"line_end":30,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247110,"byte_end":247115,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247116,"byte_end":247119,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut service = service_fn(handle);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247120,"byte_end":247161,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247162,"byte_end":247165,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let response = service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247166,"byte_end":247192,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247193,"byte_end":247209,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247210,"byte_end":247225,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/     .call(Request::new())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247226,"byte_end":247255,"line_start":38,"line_end":38,"column_start":1,"column_end":30}},{"value":"/     .await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247256,"byte_end":247272,"line_start":39,"line_end":39,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247273,"byte_end":247276,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"Hello, World!\", response.into_body());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247277,"byte_end":247331,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247332,"byte_end":247337,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ # Ok(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247338,"byte_end":247350,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247351,"byte_end":247358,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247359,"byte_end":247366,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":5833},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247558,"byte_end":247567,"line_start":54,"line_end":54,"column_start":12,"column_end":21},"name":"ServiceFn","qualname":"::util::service_fn::ServiceFn","value":"ServiceFn {  }","parent":null,"children":[{"krate":0,"index":5835}],"decl_id":null,"docs":" A [`Service`] implemented by a closure.","sig":null,"attributes":[{"value":"/ A [`Service`] implemented by a closure.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247435,"byte_end":247478,"line_start":50,"line_end":50,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247479,"byte_end":247482,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ See [`service_fn`] for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247483,"byte_end":247523,"line_start":52,"line_end":52,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5841},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248507,"byte_end":248511,"line_start":14,"line_end":14,"column_start":12,"column_end":16},"name":"Then","qualname":"::util::then::Then","value":"Then {  }","parent":null,"children":[{"krate":0,"index":5844},{"krate":0,"index":5845}],"decl_id":null,"docs":" [`Service`] returned by the [`then`] combinator.","sig":null,"attributes":[{"value":"/ [`Service`] returned by the [`then`] combinator.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248378,"byte_end":248430,"line_start":10,"line_end":10,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248431,"byte_end":248434,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`then`]: crate::util::ServiceExt::then","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248435,"byte_end":248478,"line_start":12,"line_end":12,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":5850},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248973,"byte_end":248982,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"ThenLayer","qualname":"::util::then::ThenLayer","value":"ThenLayer {  }","parent":null,"children":[{"krate":0,"index":5852}],"decl_id":null,"docs":" A [`Layer`] that produces a [`Then`] service.","sig":null,"attributes":[{"value":"/ A [`Layer`] that produces a [`Then`] service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248850,"byte_end":248899,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248900,"byte_end":248903,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248904,"byte_end":248937,"line_start":33,"line_end":33,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249074,"byte_end":249077,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<Then<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Then` service.\n","sig":null,"attributes":[{"value":"/ Creates a new `Then` service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249029,"byte_end":249062,"line_start":40,"line_end":40,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249344,"byte_end":249349,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"layer","qualname":"<Then<S, F>>::layer","value":"pub fn layer(F) -> ThenLayer<F>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`Layer`] that produces [`Then`] services.","sig":null,"attributes":[{"value":"/ Returns a new [`Layer`] that produces [`Then`] services.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249141,"byte_end":249201,"line_start":45,"line_end":45,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249206,"byte_end":249209,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that simply calls [`ThenLayer::new`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249214,"byte_end":249286,"line_start":47,"line_end":47,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249291,"byte_end":249294,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: tower_layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249299,"byte_end":249332,"line_start":49,"line_end":49,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5875},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249529,"byte_end":249539,"line_start":59,"line_end":59,"column_start":14,"column_end":24},"name":"ThenFuture","qualname":"::util::then::ThenFuture","value":"ThenFuture {  }","parent":null,"children":[{"krate":0,"index":5879}],"decl_id":null,"docs":" Response future from [`Then`] services.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2843},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":250322,"byte_end":250325,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<ThenLayer<F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`ThenLayer`] layer.\n","sig":null,"attributes":[{"value":"/ Creates a new [`ThenLayer`] layer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":250272,"byte_end":250310,"line_start":85,"line_end":85,"column_start":5,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":2958},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153084,"byte_end":153089,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"name":"error","qualname":"::util::error","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","parent":null,"children":[{"krate":0,"index":2959}],"decl_id":null,"docs":" Error types\n","sig":null,"attributes":[{"value":"/ Error types","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153096,"byte_end":153111,"line_start":47,"line_end":47,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":2962},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153172,"byte_end":153178,"line_start":52,"line_end":52,"column_start":9,"column_end":15},"name":"future","qualname":"::util::future","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","parent":null,"children":[{"krate":0,"index":2963},{"krate":0,"index":2966},{"krate":0,"index":2969},{"krate":0,"index":2972},{"krate":0,"index":2975},{"krate":0,"index":2978}],"decl_id":null,"docs":" Future types\n","sig":null,"attributes":[{"value":"/ Future types","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153185,"byte_end":153201,"line_start":53,"line_end":53,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":2981},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153577,"byte_end":153587,"line_start":65,"line_end":65,"column_start":11,"column_end":21},"name":"ServiceExt","qualname":"::util::ServiceExt","value":"ServiceExt<Request>: tower_service::Service<Request>","parent":null,"children":[{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2989},{"krate":0,"index":2991},{"krate":0,"index":2994},{"krate":0,"index":2997},{"krate":0,"index":3001},{"krate":0,"index":3004},{"krate":0,"index":3009},{"krate":0,"index":3014},{"krate":0,"index":3015}],"decl_id":null,"docs":" An extension trait for `Service`s that provides a variety of convenient\n adapters\n","sig":null,"attributes":[{"value":"/ An extension trait for `Service`s that provides a variety of convenient","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153478,"byte_end":153553,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ adapters","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153554,"byte_end":153566,"line_start":64,"line_end":64,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":2983},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153727,"byte_end":153732,"line_start":67,"line_end":67,"column_start":8,"column_end":13},"name":"ready","qualname":"::util::ServiceExt::ready","value":"pub fn ready(&mut Self) -> Ready<, Self, Request> where Self: Sized","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Yields a mutable reference to the service when it is ready to accept a request.\n","sig":null,"attributes":[{"value":"/ Yields a mutable reference to the service when it is ready to accept a request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153636,"byte_end":153719,"line_start":66,"line_end":66,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2984},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154078,"byte_end":154087,"line_start":80,"line_end":80,"column_start":8,"column_end":17},"name":"ready_and","qualname":"::util::ServiceExt::ready_and","value":"pub fn ready_and(&mut Self) -> ReadyAnd<, Self, Request> where Self: Sized","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Yields a mutable reference to the service when it is ready to accept a request.\n","sig":null,"attributes":[{"value":"/ Yields a mutable reference to the service when it is ready to accept a request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153845,"byte_end":153928,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"deprecated(since = \"0.4.6\", note =\n             \"please use the `ServiceExt::ready` method instead\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153933,"byte_end":154045,"line_start":75,"line_end":78,"column_start":5,"column_end":7}},{"value":"allow(deprecated)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154050,"byte_end":154070,"line_start":79,"line_end":79,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2985},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154274,"byte_end":154287,"line_start":88,"line_end":88,"column_start":8,"column_end":21},"name":"ready_oneshot","qualname":"::util::ServiceExt::ready_oneshot","value":"pub fn ready_oneshot(Self) -> ReadyOneshot<Self, Request> where Self: Sized","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Yields the service when it is ready to accept a request.\n","sig":null,"attributes":[{"value":"/ Yields the service when it is ready to accept a request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154206,"byte_end":154266,"line_start":87,"line_end":87,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2986},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154493,"byte_end":154500,"line_start":96,"line_end":96,"column_start":8,"column_end":15},"name":"oneshot","qualname":"::util::ServiceExt::oneshot","value":"pub fn oneshot(Self, Request) -> Oneshot<Self, Request> where Self: Sized","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Consume this `Service`, calling with the providing request once it is ready.\n","sig":null,"attributes":[{"value":"/ Consume this `Service`, calling with the providing request once it is ready.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154405,"byte_end":154485,"line_start":95,"line_end":95,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155092,"byte_end":155100,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"call_all","qualname":"::util::ServiceExt::call_all","value":"pub fn call_all<S>(Self, S) -> CallAll<Self, S> where Self: Sized,\nSelf::Error: Into<crate::BoxError>, S: futures_core::Stream<Item = Request>","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Process all requests from the given [`Stream`], and produce a [`Stream`] of their responses.","sig":null,"attributes":[{"value":"/ Process all requests from the given [`Stream`], and produce a [`Stream`] of their responses.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154627,"byte_end":154723,"line_start":103,"line_end":103,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154728,"byte_end":154731,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ This is essentially [`Stream<Item = Request>`][stream] + `Self` => [`Stream<Item =","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154736,"byte_end":154822,"line_start":105,"line_end":105,"column_start":5,"column_end":91}},{"value":"/ Response>`][stream]. See the documentation for [`CallAll`] for","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154827,"byte_end":154893,"line_start":106,"line_end":106,"column_start":5,"column_end":71}},{"value":"/ details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154898,"byte_end":154910,"line_start":107,"line_end":107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154915,"byte_end":154918,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: https://docs.rs/futures/latest/futures/stream/trait.Stream.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":154923,"byte_end":155002,"line_start":109,"line_end":109,"column_start":5,"column_end":84}},{"value":"/ [stream]: https://docs.rs/futures/latest/futures/stream/trait.Stream.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155007,"byte_end":155084,"line_start":110,"line_end":110,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157373,"byte_end":157381,"line_start":180,"line_end":180,"column_start":8,"column_end":16},"name":"and_then","qualname":"::util::ServiceExt::and_then","value":"pub fn and_then<F>(Self, F) -> AndThen<Self, F> where Self: Sized, F: Clone","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Executes a new future after this service's future resolves. This does\n not alter the behaviour of the [`poll_ready`] method.","sig":null,"attributes":[{"value":"/ Executes a new future after this service's future resolves. This does","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155313,"byte_end":155386,"line_start":120,"line_end":120,"column_start":5,"column_end":78}},{"value":"/ not alter the behaviour of the [`poll_ready`] method.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155391,"byte_end":155448,"line_start":121,"line_end":121,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155453,"byte_end":155456,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155461,"byte_end":155535,"line_start":123,"line_end":123,"column_start":5,"column_end":79}},{"value":"/ into a different type. You can use this method to chain along a computation once the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155540,"byte_end":155628,"line_start":124,"line_end":124,"column_start":5,"column_end":93}},{"value":"/ service's response has been resolved.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155633,"byte_end":155674,"line_start":125,"line_end":125,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155679,"byte_end":155682,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155687,"byte_end":155729,"line_start":127,"line_end":127,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155734,"byte_end":155780,"line_start":128,"line_end":128,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155785,"byte_end":155788,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155793,"byte_end":155806,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155811,"byte_end":155818,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155823,"byte_end":155860,"line_start":132,"line_end":132,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155865,"byte_end":155904,"line_start":133,"line_end":133,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155909,"byte_end":155914,"line_start":134,"line_end":134,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155919,"byte_end":155948,"line_start":135,"line_end":135,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155953,"byte_end":155981,"line_start":136,"line_end":136,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":155986,"byte_end":156025,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156030,"byte_end":156057,"line_start":138,"line_end":138,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156062,"byte_end":156071,"line_start":139,"line_end":139,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156076,"byte_end":156083,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156088,"byte_end":156093,"line_start":141,"line_end":141,"column_start":5,"column_end":10}},{"value":"/ # struct Record {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156098,"byte_end":156119,"line_start":142,"line_end":142,"column_start":5,"column_end":26}},{"value":"/ #   pub name: String,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156124,"byte_end":156149,"line_start":143,"line_end":143,"column_start":5,"column_end":30}},{"value":"/ #   pub age: u16","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156154,"byte_end":156174,"line_start":144,"line_end":144,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156179,"byte_end":156186,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156191,"byte_end":156196,"line_start":146,"line_end":146,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156201,"byte_end":156246,"line_start":147,"line_end":147,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156251,"byte_end":156282,"line_start":148,"line_end":148,"column_start":5,"column_end":36}},{"value":"/ #   type Error = u8;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156287,"byte_end":156311,"line_start":149,"line_end":149,"column_start":5,"column_end":29}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, u8>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156316,"byte_end":156386,"line_start":150,"line_end":150,"column_start":5,"column_end":75}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156391,"byte_end":156396,"line_start":151,"line_end":151,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156401,"byte_end":156490,"line_start":152,"line_end":152,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156495,"byte_end":156526,"line_start":153,"line_end":153,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156531,"byte_end":156540,"line_start":154,"line_end":154,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156545,"byte_end":156550,"line_start":155,"line_end":155,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156555,"byte_end":156613,"line_start":156,"line_end":156,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(Record { name: \"Jack\".into(), age: 32 }))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156618,"byte_end":156702,"line_start":157,"line_end":157,"column_start":5,"column_end":89}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156707,"byte_end":156716,"line_start":158,"line_end":158,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156721,"byte_end":156728,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156733,"byte_end":156738,"line_start":160,"line_end":160,"column_start":5,"column_end":10}},{"value":"/ # async fn avatar_lookup(name: String) -> Result<Vec<u8>, u8> { Ok(vec![]) }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156743,"byte_end":156823,"line_start":161,"line_end":161,"column_start":5,"column_end":85}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156828,"byte_end":156833,"line_start":162,"line_end":162,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156838,"byte_end":156855,"line_start":163,"line_end":163,"column_start":5,"column_end":22}},{"value":"/ #    async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156860,"byte_end":156876,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/ // A service returning Result<Record, _>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156881,"byte_end":156925,"line_start":165,"line_end":165,"column_start":5,"column_end":49}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156930,"byte_end":156987,"line_start":166,"line_end":166,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":156992,"byte_end":156995,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ // Map the response into a new response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157000,"byte_end":157043,"line_start":168,"line_end":168,"column_start":5,"column_end":48}},{"value":"/ let mut new_service = service.and_then(|record: Record| async move {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157048,"byte_end":157120,"line_start":169,"line_end":169,"column_start":5,"column_end":77}},{"value":"/     let name = record.name;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157125,"byte_end":157156,"line_start":170,"line_end":170,"column_start":5,"column_end":36}},{"value":"/     avatar_lookup(name).await","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157161,"byte_end":157194,"line_start":171,"line_end":171,"column_start":5,"column_end":38}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157199,"byte_end":157206,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157211,"byte_end":157214,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157219,"byte_end":157246,"line_start":174,"line_end":174,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157251,"byte_end":157267,"line_start":175,"line_end":175,"column_start":5,"column_end":21}},{"value":"/ let avatar = new_service.call(id).await.unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157272,"byte_end":157325,"line_start":176,"line_end":176,"column_start":5,"column_end":58}},{"value":"/ #    };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157330,"byte_end":157341,"line_start":177,"line_end":177,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157346,"byte_end":157353,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157358,"byte_end":157365,"line_start":179,"line_end":179,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159523,"byte_end":159535,"line_start":249,"line_end":249,"column_start":8,"column_end":20},"name":"map_response","qualname":"::util::ServiceExt::map_response","value":"pub fn map_response<F, Response>(Self, F) -> MapResponse<Self, F> where\nSelf: Sized, F: FnOnce(Self::Response) -> Response + Clone","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Maps this service's response value to a different value. This does not\n alter the behaviour of the [`poll_ready`] method.","sig":null,"attributes":[{"value":"/ Maps this service's response value to a different value. This does not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157513,"byte_end":157587,"line_start":188,"line_end":188,"column_start":5,"column_end":79}},{"value":"/ alter the behaviour of the [`poll_ready`] method.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157592,"byte_end":157645,"line_start":189,"line_end":189,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157650,"byte_end":157653,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157658,"byte_end":157732,"line_start":191,"line_end":191,"column_start":5,"column_end":79}},{"value":"/ into a different type. It is similar to the [`Result::map`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157737,"byte_end":157800,"line_start":192,"line_end":192,"column_start":5,"column_end":68}},{"value":"/ method. You can use this method to chain along a computation once the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157805,"byte_end":157878,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/ service's response has been resolved.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157883,"byte_end":157924,"line_start":194,"line_end":194,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157929,"byte_end":157932,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157937,"byte_end":157979,"line_start":196,"line_end":196,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":157984,"byte_end":158030,"line_start":197,"line_end":197,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158035,"byte_end":158038,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158043,"byte_end":158056,"line_start":199,"line_end":199,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158061,"byte_end":158068,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158073,"byte_end":158110,"line_start":201,"line_end":201,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158115,"byte_end":158154,"line_start":202,"line_end":202,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158159,"byte_end":158164,"line_start":203,"line_end":203,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158169,"byte_end":158198,"line_start":204,"line_end":204,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158203,"byte_end":158231,"line_start":205,"line_end":205,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158236,"byte_end":158275,"line_start":206,"line_end":206,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158280,"byte_end":158307,"line_start":207,"line_end":207,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158312,"byte_end":158321,"line_start":208,"line_end":208,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158326,"byte_end":158333,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158338,"byte_end":158343,"line_start":210,"line_end":210,"column_start":5,"column_end":10}},{"value":"/ # struct Record {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158348,"byte_end":158369,"line_start":211,"line_end":211,"column_start":5,"column_end":26}},{"value":"/ #   pub name: String,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158374,"byte_end":158399,"line_start":212,"line_end":212,"column_start":5,"column_end":30}},{"value":"/ #   pub age: u16","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158404,"byte_end":158424,"line_start":213,"line_end":213,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158429,"byte_end":158436,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158441,"byte_end":158446,"line_start":215,"line_end":215,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158451,"byte_end":158496,"line_start":216,"line_end":216,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158501,"byte_end":158532,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/ #   type Error = u8;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158537,"byte_end":158561,"line_start":218,"line_end":218,"column_start":5,"column_end":29}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, u8>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158566,"byte_end":158636,"line_start":219,"line_end":219,"column_start":5,"column_end":75}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158641,"byte_end":158646,"line_start":220,"line_end":220,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158651,"byte_end":158740,"line_start":221,"line_end":221,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158745,"byte_end":158776,"line_start":222,"line_end":222,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158781,"byte_end":158790,"line_start":223,"line_end":223,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158795,"byte_end":158800,"line_start":224,"line_end":224,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158805,"byte_end":158863,"line_start":225,"line_end":225,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(Record { name: \"Jack\".into(), age: 32 }))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158868,"byte_end":158952,"line_start":226,"line_end":226,"column_start":5,"column_end":89}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158957,"byte_end":158966,"line_start":227,"line_end":227,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158971,"byte_end":158978,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158983,"byte_end":158988,"line_start":229,"line_end":229,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":158993,"byte_end":159010,"line_start":230,"line_end":230,"column_start":5,"column_end":22}},{"value":"/ #    async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159015,"byte_end":159031,"line_start":231,"line_end":231,"column_start":5,"column_end":21}},{"value":"/ // A service returning Result<Record, _>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159036,"byte_end":159080,"line_start":232,"line_end":232,"column_start":5,"column_end":49}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159085,"byte_end":159142,"line_start":233,"line_end":233,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159147,"byte_end":159150,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ // Map the response into a new response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159155,"byte_end":159198,"line_start":235,"line_end":235,"column_start":5,"column_end":48}},{"value":"/ let mut new_service = service.map_response(|record| record.name);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159203,"byte_end":159272,"line_start":236,"line_end":236,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159277,"byte_end":159280,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159285,"byte_end":159312,"line_start":238,"line_end":238,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159317,"byte_end":159333,"line_start":239,"line_end":239,"column_start":5,"column_end":21}},{"value":"/ let name = new_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159338,"byte_end":159364,"line_start":240,"line_end":240,"column_start":5,"column_end":31}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159369,"byte_end":159385,"line_start":241,"line_end":241,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159390,"byte_end":159405,"line_start":242,"line_end":242,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159410,"byte_end":159427,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159432,"byte_end":159448,"line_start":244,"line_end":244,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), u8>(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159453,"byte_end":159475,"line_start":245,"line_end":245,"column_start":5,"column_end":27}},{"value":"/ #    };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159480,"byte_end":159491,"line_start":246,"line_end":246,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159496,"byte_end":159503,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159508,"byte_end":159515,"line_start":248,"line_end":248,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161595,"byte_end":161602,"line_start":317,"line_end":317,"column_start":8,"column_end":15},"name":"map_err","qualname":"::util::ServiceExt::map_err","value":"pub fn map_err<F, Error>(Self, F) -> MapErr<Self, F> where Self: Sized,\nF: FnOnce(Self::Error) -> Error + Clone","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Maps this service's error value to a different value. This does not\n alter the behaviour of the [`poll_ready`] method.","sig":null,"attributes":[{"value":"/ Maps this service's error value to a different value. This does not","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159722,"byte_end":159793,"line_start":257,"line_end":257,"column_start":5,"column_end":76}},{"value":"/ alter the behaviour of the [`poll_ready`] method.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159798,"byte_end":159851,"line_start":258,"line_end":258,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159856,"byte_end":159859,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Error`] type of the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159864,"byte_end":159935,"line_start":260,"line_end":260,"column_start":5,"column_end":76}},{"value":"/ into a different type. It is similar to the [`Result::map_err`] method.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":159940,"byte_end":160015,"line_start":261,"line_end":261,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160020,"byte_end":160023,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ [`Error`]: crate::Service::Error","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160028,"byte_end":160064,"line_start":263,"line_end":263,"column_start":5,"column_end":41}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160069,"byte_end":160115,"line_start":264,"line_end":264,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160120,"byte_end":160123,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160128,"byte_end":160141,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160146,"byte_end":160153,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160158,"byte_end":160195,"line_start":268,"line_end":268,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160200,"byte_end":160239,"line_start":269,"line_end":269,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160244,"byte_end":160249,"line_start":270,"line_end":270,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160254,"byte_end":160283,"line_start":271,"line_end":271,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160288,"byte_end":160316,"line_start":272,"line_end":272,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160321,"byte_end":160360,"line_start":273,"line_end":273,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160365,"byte_end":160392,"line_start":274,"line_end":274,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160397,"byte_end":160406,"line_start":275,"line_end":275,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160411,"byte_end":160418,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160423,"byte_end":160428,"line_start":277,"line_end":277,"column_start":5,"column_end":10}},{"value":"/ # struct Error {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160433,"byte_end":160453,"line_start":278,"line_end":278,"column_start":5,"column_end":25}},{"value":"/ #   pub code: u32,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160458,"byte_end":160480,"line_start":279,"line_end":279,"column_start":5,"column_end":27}},{"value":"/ #   pub message: String","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160485,"byte_end":160512,"line_start":280,"line_end":280,"column_start":5,"column_end":32}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160517,"byte_end":160524,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160529,"byte_end":160534,"line_start":282,"line_end":282,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160539,"byte_end":160584,"line_start":283,"line_end":283,"column_start":5,"column_end":50}},{"value":"/ #   type Response = String;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160589,"byte_end":160620,"line_start":284,"line_end":284,"column_start":5,"column_end":36}},{"value":"/ #   type Error = Error;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160625,"byte_end":160652,"line_start":285,"line_end":285,"column_start":5,"column_end":32}},{"value":"/ #   type Future = futures_util::future::Ready<Result<String, Error>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160657,"byte_end":160730,"line_start":286,"line_end":286,"column_start":5,"column_end":78}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160735,"byte_end":160740,"line_start":287,"line_end":287,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160745,"byte_end":160834,"line_start":288,"line_end":288,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160839,"byte_end":160870,"line_start":289,"line_end":289,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160875,"byte_end":160884,"line_start":290,"line_end":290,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160889,"byte_end":160894,"line_start":291,"line_end":291,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160899,"byte_end":160957,"line_start":292,"line_end":292,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(String::new()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":160962,"byte_end":161020,"line_start":293,"line_end":293,"column_start":5,"column_end":63}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161025,"byte_end":161034,"line_start":294,"line_end":294,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161039,"byte_end":161046,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161051,"byte_end":161056,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161061,"byte_end":161078,"line_start":297,"line_end":297,"column_start":5,"column_end":22}},{"value":"/ #   async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161083,"byte_end":161098,"line_start":298,"line_end":298,"column_start":5,"column_end":20}},{"value":"/ // A service returning Result<_, Error>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161103,"byte_end":161146,"line_start":299,"line_end":299,"column_start":5,"column_end":48}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161151,"byte_end":161208,"line_start":300,"line_end":300,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161213,"byte_end":161216,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ // Map the error to a new error","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161221,"byte_end":161256,"line_start":302,"line_end":302,"column_start":5,"column_end":40}},{"value":"/ let mut new_service = service.map_err(|err| err.code);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161261,"byte_end":161319,"line_start":303,"line_end":303,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161324,"byte_end":161327,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161332,"byte_end":161359,"line_start":305,"line_end":305,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161364,"byte_end":161380,"line_start":306,"line_end":306,"column_start":5,"column_end":21}},{"value":"/ let code = new_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161385,"byte_end":161411,"line_start":307,"line_end":307,"column_start":5,"column_end":31}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161416,"byte_end":161432,"line_start":308,"line_end":308,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161437,"byte_end":161452,"line_start":309,"line_end":309,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161457,"byte_end":161474,"line_start":310,"line_end":310,"column_start":5,"column_end":22}},{"value":"/     .await","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161479,"byte_end":161493,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/     .unwrap_err();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161498,"byte_end":161520,"line_start":312,"line_end":312,"column_start":5,"column_end":27}},{"value":"/ # Ok::<(), u32>(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161525,"byte_end":161548,"line_start":313,"line_end":313,"column_start":5,"column_end":28}},{"value":"/ #   };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161553,"byte_end":161563,"line_start":314,"line_end":314,"column_start":5,"column_end":15}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161568,"byte_end":161575,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161580,"byte_end":161587,"line_start":316,"line_end":316,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169636,"byte_end":169646,"line_start":546,"line_end":546,"column_start":8,"column_end":18},"name":"map_result","qualname":"::util::ServiceExt::map_result","value":"pub fn map_result<F, Response, Error>(Self, F) -> MapResult<Self, F> where\nSelf: Sized, Error: From<Self::Error>,\nF: FnOnce(Result<Self::Response, Self::Error>) -> Result<Response, Error> +\nClone","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Maps this service's result type (`Result<Self::Response, Self::Error>`)\n to a different value, regardless of whether the future succeeds or\n fails.","sig":null,"attributes":[{"value":"/ Maps this service's result type (`Result<Self::Response, Self::Error>`)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161770,"byte_end":161845,"line_start":325,"line_end":325,"column_start":5,"column_end":80}},{"value":"/ to a different value, regardless of whether the future succeeds or","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161850,"byte_end":161920,"line_start":326,"line_end":326,"column_start":5,"column_end":75}},{"value":"/ fails.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161925,"byte_end":161935,"line_start":327,"line_end":327,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161940,"byte_end":161943,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`map_response`] and [`map_err`] combinators,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":161948,"byte_end":162020,"line_start":329,"line_end":329,"column_start":5,"column_end":77}},{"value":"/ except that the *same* function is invoked when the service's future","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162025,"byte_end":162097,"line_start":330,"line_end":330,"column_start":5,"column_end":77}},{"value":"/ completes, whether it completes successfully or fails. This function","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162102,"byte_end":162174,"line_start":331,"line_end":331,"column_start":5,"column_end":77}},{"value":"/ takes the [`Result`] returned by the service's future, and returns a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162179,"byte_end":162251,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ [`Result`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162256,"byte_end":162271,"line_start":333,"line_end":333,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162276,"byte_end":162279,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Like the standard library's [`Result::and_then`], this method can be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162284,"byte_end":162356,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ used to implement control flow based on `Result` values. For example, it","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162361,"byte_end":162437,"line_start":336,"line_end":336,"column_start":5,"column_end":81}},{"value":"/ may be used to implement error recovery, by turning some [`Err`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162442,"byte_end":162510,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ responses from the service into [`Ok`] responses. Similarly, some","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162515,"byte_end":162584,"line_start":338,"line_end":338,"column_start":5,"column_end":74}},{"value":"/ successful responses from the service could be rejected, by returning an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162589,"byte_end":162665,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ [`Err`] conditionally, depending on the value inside the [`Ok`.] Finally,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162670,"byte_end":162747,"line_start":340,"line_end":340,"column_start":5,"column_end":82}},{"value":"/ this method can also be used to implement behaviors that must run when a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162752,"byte_end":162828,"line_start":341,"line_end":341,"column_start":5,"column_end":81}},{"value":"/ service's future completes, regardless of whether it succeeded or failed.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162833,"byte_end":162910,"line_start":342,"line_end":342,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162915,"byte_end":162918,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":162923,"byte_end":162997,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ into a different type. It can also be used to change the [`Error`] type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163002,"byte_end":163077,"line_start":345,"line_end":345,"column_start":5,"column_end":80}},{"value":"/ of the service. However, because the [`map_result`] function is not applied","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163082,"byte_end":163161,"line_start":346,"line_end":346,"column_start":5,"column_end":84}},{"value":"/ to the errors returned by the service's [`poll_ready`] method, it must","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163166,"byte_end":163240,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ be possible to convert the service's [`Error`] type into the error type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163245,"byte_end":163320,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/ returned by the [`map_result`] function. This is trivial when the function","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163325,"byte_end":163403,"line_start":349,"line_end":349,"column_start":5,"column_end":83}},{"value":"/ returns the same error type as the service, but in other cases, it can","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163408,"byte_end":163482,"line_start":350,"line_end":350,"column_start":5,"column_end":79}},{"value":"/ be useful to use [`BoxError`] to erase differing error types.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163487,"byte_end":163552,"line_start":351,"line_end":351,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163557,"byte_end":163560,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163565,"byte_end":163579,"line_start":353,"line_end":353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163584,"byte_end":163587,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Recovering from certain errors:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163592,"byte_end":163627,"line_start":355,"line_end":355,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163632,"byte_end":163635,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163640,"byte_end":163647,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163652,"byte_end":163689,"line_start":358,"line_end":358,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163694,"byte_end":163733,"line_start":359,"line_end":359,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163738,"byte_end":163743,"line_start":360,"line_end":360,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163748,"byte_end":163777,"line_start":361,"line_end":361,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163782,"byte_end":163810,"line_start":362,"line_end":362,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163815,"byte_end":163854,"line_start":363,"line_end":363,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163859,"byte_end":163886,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163891,"byte_end":163900,"line_start":365,"line_end":365,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163905,"byte_end":163912,"line_start":366,"line_end":366,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163917,"byte_end":163922,"line_start":367,"line_end":367,"column_start":5,"column_end":10}},{"value":"/ # struct Record {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163927,"byte_end":163948,"line_start":368,"line_end":368,"column_start":5,"column_end":26}},{"value":"/ #   pub name: String,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163953,"byte_end":163978,"line_start":369,"line_end":369,"column_start":5,"column_end":30}},{"value":"/ #   pub age: u16","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":163983,"byte_end":164003,"line_start":370,"line_end":370,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164008,"byte_end":164015,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ # #[derive(Debug)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164020,"byte_end":164042,"line_start":372,"line_end":372,"column_start":5,"column_end":27}},{"value":"/ # enum DbError {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164047,"byte_end":164067,"line_start":373,"line_end":373,"column_start":5,"column_end":25}},{"value":"/ #   Parse(std::num::ParseIntError),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164072,"byte_end":164111,"line_start":374,"line_end":374,"column_start":5,"column_end":44}},{"value":"/ #   NoRecordsFound,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164116,"byte_end":164139,"line_start":375,"line_end":375,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164144,"byte_end":164151,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164156,"byte_end":164161,"line_start":377,"line_end":377,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164166,"byte_end":164211,"line_start":378,"line_end":378,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Vec<Record>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164216,"byte_end":164252,"line_start":379,"line_end":379,"column_start":5,"column_end":41}},{"value":"/ #   type Error = DbError;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164257,"byte_end":164286,"line_start":380,"line_end":380,"column_start":5,"column_end":34}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Vec<Record>, DbError>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164291,"byte_end":164371,"line_start":381,"line_end":381,"column_start":5,"column_end":85}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164376,"byte_end":164381,"line_start":382,"line_end":382,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164386,"byte_end":164475,"line_start":383,"line_end":383,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164480,"byte_end":164511,"line_start":384,"line_end":384,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164516,"byte_end":164525,"line_start":385,"line_end":385,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164530,"byte_end":164535,"line_start":386,"line_end":386,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164540,"byte_end":164598,"line_start":387,"line_end":387,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(vec![Record { name: \"Jack\".into(), age: 32 }]))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164603,"byte_end":164693,"line_start":388,"line_end":388,"column_start":5,"column_end":95}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164698,"byte_end":164707,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164712,"byte_end":164719,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164724,"byte_end":164729,"line_start":391,"line_end":391,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164734,"byte_end":164751,"line_start":392,"line_end":392,"column_start":5,"column_end":22}},{"value":"/ #    async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164756,"byte_end":164772,"line_start":393,"line_end":393,"column_start":5,"column_end":21}},{"value":"/ // A service returning Result<Vec<Record>, DbError>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164777,"byte_end":164832,"line_start":394,"line_end":394,"column_start":5,"column_end":60}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164837,"byte_end":164894,"line_start":395,"line_end":395,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164899,"byte_end":164902,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ // If the database returns no records for the query, we just want an empty `Vec`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164907,"byte_end":164992,"line_start":397,"line_end":397,"column_start":5,"column_end":90}},{"value":"/ let mut new_service = service.map_result(|result| match result {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":164997,"byte_end":165065,"line_start":398,"line_end":398,"column_start":5,"column_end":73}},{"value":"/     // If the error indicates that no records matched the query, return an empty","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165070,"byte_end":165154,"line_start":399,"line_end":399,"column_start":5,"column_end":89}},{"value":"/     // `Vec` instead.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165159,"byte_end":165184,"line_start":400,"line_end":400,"column_start":5,"column_end":30}},{"value":"/     Err(DbError::NoRecordsFound) => Ok(Vec::new()),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165189,"byte_end":165244,"line_start":401,"line_end":401,"column_start":5,"column_end":60}},{"value":"/     // Propagate all other responses (`Ok` and `Err`) unchanged","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165249,"byte_end":165316,"line_start":402,"line_end":402,"column_start":5,"column_end":72}},{"value":"/     x => x,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165321,"byte_end":165336,"line_start":403,"line_end":403,"column_start":5,"column_end":20}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165341,"byte_end":165348,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165353,"byte_end":165356,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165361,"byte_end":165388,"line_start":406,"line_end":406,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165393,"byte_end":165409,"line_start":407,"line_end":407,"column_start":5,"column_end":21}},{"value":"/ let name = new_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165414,"byte_end":165440,"line_start":408,"line_end":408,"column_start":5,"column_end":31}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165445,"byte_end":165461,"line_start":409,"line_end":409,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165466,"byte_end":165481,"line_start":410,"line_end":410,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165486,"byte_end":165503,"line_start":411,"line_end":411,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165508,"byte_end":165524,"line_start":412,"line_end":412,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), DbError>(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165529,"byte_end":165556,"line_start":413,"line_end":413,"column_start":5,"column_end":32}},{"value":"/ #    };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165561,"byte_end":165572,"line_start":414,"line_end":414,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165577,"byte_end":165584,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165589,"byte_end":165596,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165601,"byte_end":165604,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Rejecting some `Ok` responses:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165609,"byte_end":165643,"line_start":418,"line_end":418,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165648,"byte_end":165651,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165656,"byte_end":165663,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165668,"byte_end":165705,"line_start":421,"line_end":421,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165710,"byte_end":165749,"line_start":422,"line_end":422,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165754,"byte_end":165759,"line_start":423,"line_end":423,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165764,"byte_end":165793,"line_start":424,"line_end":424,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165798,"byte_end":165826,"line_start":425,"line_end":425,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165831,"byte_end":165870,"line_start":426,"line_end":426,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165875,"byte_end":165902,"line_start":427,"line_end":427,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165907,"byte_end":165916,"line_start":428,"line_end":428,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165921,"byte_end":165928,"line_start":429,"line_end":429,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165933,"byte_end":165938,"line_start":430,"line_end":430,"column_start":5,"column_end":10}},{"value":"/ # struct Record {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165943,"byte_end":165964,"line_start":431,"line_end":431,"column_start":5,"column_end":26}},{"value":"/ #   pub name: String,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165969,"byte_end":165994,"line_start":432,"line_end":432,"column_start":5,"column_end":30}},{"value":"/ #   pub age: u16","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":165999,"byte_end":166019,"line_start":433,"line_end":433,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166024,"byte_end":166031,"line_start":434,"line_end":434,"column_start":5,"column_end":12}},{"value":"/ # type DbError = String;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166036,"byte_end":166064,"line_start":435,"line_end":435,"column_start":5,"column_end":33}},{"value":"/ # type AppError = String;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166069,"byte_end":166098,"line_start":436,"line_end":436,"column_start":5,"column_end":34}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166103,"byte_end":166108,"line_start":437,"line_end":437,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166113,"byte_end":166158,"line_start":438,"line_end":438,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166163,"byte_end":166194,"line_start":439,"line_end":439,"column_start":5,"column_end":36}},{"value":"/ #   type Error = DbError;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166199,"byte_end":166228,"line_start":440,"line_end":440,"column_start":5,"column_end":34}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, DbError>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166233,"byte_end":166308,"line_start":441,"line_end":441,"column_start":5,"column_end":80}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166313,"byte_end":166318,"line_start":442,"line_end":442,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166323,"byte_end":166412,"line_start":443,"line_end":443,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166417,"byte_end":166448,"line_start":444,"line_end":444,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166453,"byte_end":166462,"line_start":445,"line_end":445,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166467,"byte_end":166472,"line_start":446,"line_end":446,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166477,"byte_end":166535,"line_start":447,"line_end":447,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(Record { name: \"Jack\".into(), age: 32 }))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166540,"byte_end":166624,"line_start":448,"line_end":448,"column_start":5,"column_end":89}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166629,"byte_end":166638,"line_start":449,"line_end":449,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166643,"byte_end":166650,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166655,"byte_end":166660,"line_start":451,"line_end":451,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166665,"byte_end":166682,"line_start":452,"line_end":452,"column_start":5,"column_end":22}},{"value":"/ #    async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166687,"byte_end":166703,"line_start":453,"line_end":453,"column_start":5,"column_end":21}},{"value":"/ use tower::BoxError;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166708,"byte_end":166732,"line_start":454,"line_end":454,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166737,"byte_end":166740,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ // A service returning Result<Record, DbError>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166745,"byte_end":166795,"line_start":456,"line_end":456,"column_start":5,"column_end":55}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166800,"byte_end":166857,"line_start":457,"line_end":457,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166862,"byte_end":166865,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ // If the user is zero years old, return an error.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166870,"byte_end":166924,"line_start":459,"line_end":459,"column_start":5,"column_end":59}},{"value":"/ let mut new_service = service.map_result(|result| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166929,"byte_end":166984,"line_start":460,"line_end":460,"column_start":5,"column_end":60}},{"value":"/    let record = result?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":166989,"byte_end":167017,"line_start":461,"line_end":461,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167022,"byte_end":167025,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/    if record.age == 0 {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167030,"byte_end":167057,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/         // Users must have been born to use our app!","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167062,"byte_end":167118,"line_start":464,"line_end":464,"column_start":5,"column_end":61}},{"value":"/         let app_error = AppError::from(\"users cannot be 0 years old!\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167123,"byte_end":167198,"line_start":465,"line_end":465,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167203,"byte_end":167206,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/         // Box the error to erase its type (as it can be an `AppError`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167211,"byte_end":167285,"line_start":467,"line_end":467,"column_start":5,"column_end":79}},{"value":"/         // *or* the inner service's `DbError`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167290,"byte_end":167341,"line_start":468,"line_end":468,"column_start":5,"column_end":56}},{"value":"/         return Err(BoxError::from(app_error));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167346,"byte_end":167396,"line_start":469,"line_end":469,"column_start":5,"column_end":55}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167401,"byte_end":167410,"line_start":470,"line_end":470,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167415,"byte_end":167418,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/     // Otherwise, return the record.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167423,"byte_end":167463,"line_start":472,"line_end":472,"column_start":5,"column_end":45}},{"value":"/     Ok(record)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167468,"byte_end":167486,"line_start":473,"line_end":473,"column_start":5,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167491,"byte_end":167498,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167503,"byte_end":167506,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167511,"byte_end":167538,"line_start":476,"line_end":476,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167543,"byte_end":167559,"line_start":477,"line_end":477,"column_start":5,"column_end":21}},{"value":"/ let record = new_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167564,"byte_end":167592,"line_start":478,"line_end":478,"column_start":5,"column_end":33}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167597,"byte_end":167613,"line_start":479,"line_end":479,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167618,"byte_end":167633,"line_start":480,"line_end":480,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167638,"byte_end":167655,"line_start":481,"line_end":481,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167660,"byte_end":167676,"line_start":482,"line_end":482,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), BoxError>(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167681,"byte_end":167709,"line_start":483,"line_end":483,"column_start":5,"column_end":33}},{"value":"/ #    };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167714,"byte_end":167725,"line_start":484,"line_end":484,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167730,"byte_end":167737,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167742,"byte_end":167749,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167754,"byte_end":167757,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ Performing an action that must be run for both successes and failures:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167762,"byte_end":167836,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167841,"byte_end":167844,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167849,"byte_end":167856,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"/ # use std::convert::TryFrom;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167861,"byte_end":167893,"line_start":491,"line_end":491,"column_start":5,"column_end":37}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167898,"byte_end":167935,"line_start":492,"line_end":492,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167940,"byte_end":167979,"line_start":493,"line_end":493,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167984,"byte_end":167989,"line_start":494,"line_end":494,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":167994,"byte_end":168023,"line_start":495,"line_end":495,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168028,"byte_end":168056,"line_start":496,"line_end":496,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168061,"byte_end":168100,"line_start":497,"line_end":497,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168105,"byte_end":168132,"line_start":498,"line_end":498,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168137,"byte_end":168146,"line_start":499,"line_end":499,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168151,"byte_end":168158,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168163,"byte_end":168168,"line_start":501,"line_end":501,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168173,"byte_end":168218,"line_start":502,"line_end":502,"column_start":5,"column_end":50}},{"value":"/ #   type Response = String;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168223,"byte_end":168254,"line_start":503,"line_end":503,"column_start":5,"column_end":36}},{"value":"/ #   type Error = u8;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168259,"byte_end":168283,"line_start":504,"line_end":504,"column_start":5,"column_end":29}},{"value":"/ #   type Future = futures_util::future::Ready<Result<String, u8>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168288,"byte_end":168358,"line_start":505,"line_end":505,"column_start":5,"column_end":75}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168363,"byte_end":168368,"line_start":506,"line_end":506,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168373,"byte_end":168462,"line_start":507,"line_end":507,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168467,"byte_end":168498,"line_start":508,"line_end":508,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168503,"byte_end":168512,"line_start":509,"line_end":509,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168517,"byte_end":168522,"line_start":510,"line_end":510,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168527,"byte_end":168585,"line_start":511,"line_end":511,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(String::new()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168590,"byte_end":168648,"line_start":512,"line_end":512,"column_start":5,"column_end":63}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168653,"byte_end":168662,"line_start":513,"line_end":513,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168667,"byte_end":168674,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168679,"byte_end":168684,"line_start":515,"line_end":515,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168689,"byte_end":168706,"line_start":516,"line_end":516,"column_start":5,"column_end":22}},{"value":"/ #   async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168711,"byte_end":168726,"line_start":517,"line_end":517,"column_start":5,"column_end":20}},{"value":"/ // A service returning Result<Record, DbError>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168731,"byte_end":168781,"line_start":518,"line_end":518,"column_start":5,"column_end":55}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168786,"byte_end":168843,"line_start":519,"line_end":519,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168848,"byte_end":168851,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ // Print a message whenever a query completes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168856,"byte_end":168906,"line_start":521,"line_end":521,"column_start":5,"column_end":55}},{"value":"/ let mut new_service = service.map_result(|result| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168911,"byte_end":168966,"line_start":522,"line_end":522,"column_start":5,"column_end":60}},{"value":"/     println!(\"query completed; success={}\", result.is_ok());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":168971,"byte_end":169035,"line_start":523,"line_end":523,"column_start":5,"column_end":69}},{"value":"/     result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169040,"byte_end":169054,"line_start":524,"line_end":524,"column_start":5,"column_end":19}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169059,"byte_end":169066,"line_start":525,"line_end":525,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169071,"byte_end":169074,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169079,"byte_end":169106,"line_start":527,"line_end":527,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169111,"byte_end":169127,"line_start":528,"line_end":528,"column_start":5,"column_end":21}},{"value":"/ let response = new_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169132,"byte_end":169162,"line_start":529,"line_end":529,"column_start":5,"column_end":35}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169167,"byte_end":169183,"line_start":530,"line_end":530,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169188,"byte_end":169203,"line_start":531,"line_end":531,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169208,"byte_end":169225,"line_start":532,"line_end":532,"column_start":5,"column_end":22}},{"value":"/     .await;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169230,"byte_end":169245,"line_start":533,"line_end":533,"column_start":5,"column_end":20}},{"value":"/ # response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169250,"byte_end":169264,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/ #    };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169269,"byte_end":169280,"line_start":535,"line_end":535,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169285,"byte_end":169292,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169297,"byte_end":169304,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169309,"byte_end":169312,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ [`map_response`]: ServiceExt::map_response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169317,"byte_end":169363,"line_start":539,"line_end":539,"column_start":5,"column_end":51}},{"value":"/ [`map_err`]: ServiceExt::map_err","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169368,"byte_end":169404,"line_start":540,"line_end":540,"column_start":5,"column_end":41}},{"value":"/ [`map_result`]: ServiceExt::map_result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169409,"byte_end":169451,"line_start":541,"line_end":541,"column_start":5,"column_end":47}},{"value":"/ [`Error`]: crate::Service::Error","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169456,"byte_end":169492,"line_start":542,"line_end":542,"column_start":5,"column_end":41}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169497,"byte_end":169539,"line_start":543,"line_end":543,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169544,"byte_end":169590,"line_start":544,"line_end":544,"column_start":5,"column_end":51}},{"value":"/ [`BoxError`]: crate::BoxError","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169595,"byte_end":169628,"line_start":545,"line_end":545,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171500,"byte_end":171511,"line_start":606,"line_end":606,"column_start":8,"column_end":19},"name":"map_request","qualname":"::util::ServiceExt::map_request","value":"pub fn map_request<F, NewRequest>(Self, F) -> MapRequest<Self, F> where\nSelf: Sized, F: FnMut(NewRequest) -> Request","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Composes a function *in front of* the service.","sig":null,"attributes":[{"value":"/ Composes a function *in front of* the service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169906,"byte_end":169956,"line_start":555,"line_end":555,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169961,"byte_end":169964,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ This adapter produces a new service that passes each value through the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":169969,"byte_end":170043,"line_start":557,"line_end":557,"column_start":5,"column_end":79}},{"value":"/ given function `f` before sending it to `self`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170048,"byte_end":170099,"line_start":558,"line_end":558,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170104,"byte_end":170107,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170112,"byte_end":170125,"line_start":560,"line_end":560,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170130,"byte_end":170137,"line_start":561,"line_end":561,"column_start":5,"column_end":12}},{"value":"/ # use std::convert::TryFrom;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170142,"byte_end":170174,"line_start":562,"line_end":562,"column_start":5,"column_end":37}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170179,"byte_end":170216,"line_start":563,"line_end":563,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170221,"byte_end":170260,"line_start":564,"line_end":564,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170265,"byte_end":170270,"line_start":565,"line_end":565,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170275,"byte_end":170304,"line_start":566,"line_end":566,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170309,"byte_end":170337,"line_start":567,"line_end":567,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170342,"byte_end":170381,"line_start":568,"line_end":568,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170386,"byte_end":170413,"line_start":569,"line_end":569,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170418,"byte_end":170427,"line_start":570,"line_end":570,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170432,"byte_end":170439,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170444,"byte_end":170449,"line_start":572,"line_end":572,"column_start":5,"column_end":10}},{"value":"/ # impl Service<String> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170454,"byte_end":170502,"line_start":573,"line_end":573,"column_start":5,"column_end":53}},{"value":"/ #   type Response = String;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170507,"byte_end":170538,"line_start":574,"line_end":574,"column_start":5,"column_end":36}},{"value":"/ #   type Error = u8;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170543,"byte_end":170567,"line_start":575,"line_end":575,"column_start":5,"column_end":29}},{"value":"/ #   type Future = futures_util::future::Ready<Result<String, u8>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170572,"byte_end":170642,"line_start":576,"line_end":576,"column_start":5,"column_end":75}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170647,"byte_end":170652,"line_start":577,"line_end":577,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170657,"byte_end":170746,"line_start":578,"line_end":578,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170751,"byte_end":170782,"line_start":579,"line_end":579,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170787,"byte_end":170796,"line_start":580,"line_end":580,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170801,"byte_end":170806,"line_start":581,"line_end":581,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: String) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170811,"byte_end":170872,"line_start":582,"line_end":582,"column_start":5,"column_end":66}},{"value":"/ #       futures_util::future::ready(Ok(String::new()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170877,"byte_end":170935,"line_start":583,"line_end":583,"column_start":5,"column_end":63}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170940,"byte_end":170949,"line_start":584,"line_end":584,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170954,"byte_end":170961,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170966,"byte_end":170971,"line_start":586,"line_end":586,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170976,"byte_end":170993,"line_start":587,"line_end":587,"column_start":5,"column_end":22}},{"value":"/ #   async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":170998,"byte_end":171013,"line_start":588,"line_end":588,"column_start":5,"column_end":20}},{"value":"/ // A service taking a String as a request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171018,"byte_end":171063,"line_start":589,"line_end":589,"column_start":5,"column_end":50}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171068,"byte_end":171125,"line_start":590,"line_end":590,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171130,"byte_end":171133,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ // Map the request to a new request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171138,"byte_end":171177,"line_start":592,"line_end":592,"column_start":5,"column_end":44}},{"value":"/ let mut new_service = service.map_request(|id: u32| id.to_string());","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171182,"byte_end":171254,"line_start":593,"line_end":593,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171259,"byte_end":171262,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171267,"byte_end":171294,"line_start":595,"line_end":595,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171299,"byte_end":171315,"line_start":596,"line_end":596,"column_start":5,"column_end":21}},{"value":"/ let response = new_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171320,"byte_end":171350,"line_start":597,"line_end":597,"column_start":5,"column_end":35}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171355,"byte_end":171371,"line_start":598,"line_end":598,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171376,"byte_end":171391,"line_start":599,"line_end":599,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171396,"byte_end":171413,"line_start":600,"line_end":600,"column_start":5,"column_end":22}},{"value":"/     .await;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171418,"byte_end":171433,"line_start":601,"line_end":601,"column_start":5,"column_end":20}},{"value":"/ # response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171438,"byte_end":171452,"line_start":602,"line_end":602,"column_start":5,"column_end":19}},{"value":"/ #    };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171457,"byte_end":171468,"line_start":603,"line_end":603,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171473,"byte_end":171480,"line_start":604,"line_end":604,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":171485,"byte_end":171492,"line_start":605,"line_end":605,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181150,"byte_end":181154,"line_start":873,"line_end":873,"column_start":8,"column_end":12},"name":"then","qualname":"::util::ServiceExt::then","value":"pub fn then<F, Response, Error, Fut>(Self, F) -> Then<Self, F> where\nSelf: Sized, Error: From<Self::Error>,\nF: FnOnce(Result<Self::Response, Self::Error>) -> Fut + Clone,\nFut: Future<Output = Result<Response, Error>>","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Composes an asynchronous function *after* this service.","sig":null,"attributes":[{"value":"/ Composes an asynchronous function *after* this service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177036,"byte_end":177095,"line_start":775,"line_end":775,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177100,"byte_end":177103,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ This takes a function or closure returning a future, and returns a new","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177108,"byte_end":177182,"line_start":777,"line_end":777,"column_start":5,"column_end":79}},{"value":"/ `Service` that chains that function after this service's [`Future`]. The","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177187,"byte_end":177263,"line_start":778,"line_end":778,"column_start":5,"column_end":81}},{"value":"/ new `Service`'s future will consist of this service's future, followed","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177268,"byte_end":177342,"line_start":779,"line_end":779,"column_start":5,"column_end":79}},{"value":"/ by the future returned by calling the chained function with the future's","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177347,"byte_end":177423,"line_start":780,"line_end":780,"column_start":5,"column_end":81}},{"value":"/ [`Output`] type. The chained function is called regardless of whether","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177428,"byte_end":177501,"line_start":781,"line_end":781,"column_start":5,"column_end":78}},{"value":"/ this service's future completes with a successful response or with an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177506,"byte_end":177579,"line_start":782,"line_end":782,"column_start":5,"column_end":78}},{"value":"/ error.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177584,"byte_end":177594,"line_start":783,"line_end":783,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177599,"byte_end":177602,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ This method can be thought of as an equivalent to the [`futures`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177607,"byte_end":177675,"line_start":785,"line_end":785,"column_start":5,"column_end":73}},{"value":"/ crate]'s [`FutureExt::then`] combinator, but acting on `Service`s that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177680,"byte_end":177754,"line_start":786,"line_end":786,"column_start":5,"column_end":79}},{"value":"/ _return_ futures, rather than on an individual future. Similarly to that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177759,"byte_end":177835,"line_start":787,"line_end":787,"column_start":5,"column_end":81}},{"value":"/ combinator, [`ServiceExt::then`] can be used to implement asynchronous","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177840,"byte_end":177914,"line_start":788,"line_end":788,"column_start":5,"column_end":79}},{"value":"/ error recovery, by calling some asynchronous function with errors","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177919,"byte_end":177988,"line_start":789,"line_end":789,"column_start":5,"column_end":74}},{"value":"/ returned by this service. Alternatively, it may also be used to call a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":177993,"byte_end":178067,"line_start":790,"line_end":790,"column_start":5,"column_end":79}},{"value":"/ fallible async function with the successful response of this service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178072,"byte_end":178145,"line_start":791,"line_end":791,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178150,"byte_end":178153,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178158,"byte_end":178232,"line_start":793,"line_end":793,"column_start":5,"column_end":79}},{"value":"/ into a different type. It can also be used to change the [`Error`] type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178237,"byte_end":178312,"line_start":794,"line_end":794,"column_start":5,"column_end":80}},{"value":"/ of the service. However, because the `then` function is not applied","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178317,"byte_end":178388,"line_start":795,"line_end":795,"column_start":5,"column_end":76}},{"value":"/ to the errors returned by the service's [`poll_ready`] method, it must","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178393,"byte_end":178467,"line_start":796,"line_end":796,"column_start":5,"column_end":79}},{"value":"/ be possible to convert the service's [`Error`] type into the error type","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178472,"byte_end":178547,"line_start":797,"line_end":797,"column_start":5,"column_end":80}},{"value":"/ returned by the `then` future. This is trivial when the function","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178552,"byte_end":178620,"line_start":798,"line_end":798,"column_start":5,"column_end":73}},{"value":"/ returns the same error type as the service, but in other cases, it can","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178625,"byte_end":178699,"line_start":799,"line_end":799,"column_start":5,"column_end":79}},{"value":"/ be useful to use [`BoxError`] to erase differing error types.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178704,"byte_end":178769,"line_start":800,"line_end":800,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178774,"byte_end":178777,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178782,"byte_end":178796,"line_start":802,"line_end":802,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178801,"byte_end":178804,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178809,"byte_end":178816,"line_start":804,"line_end":804,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178821,"byte_end":178858,"line_start":805,"line_end":805,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178863,"byte_end":178902,"line_start":806,"line_end":806,"column_start":5,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178907,"byte_end":178912,"line_start":807,"line_end":807,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178917,"byte_end":178946,"line_start":808,"line_end":808,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178951,"byte_end":178979,"line_start":809,"line_end":809,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":178984,"byte_end":179023,"line_start":810,"line_end":810,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179028,"byte_end":179055,"line_start":811,"line_end":811,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179060,"byte_end":179069,"line_start":812,"line_end":812,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179074,"byte_end":179081,"line_start":813,"line_end":813,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179086,"byte_end":179091,"line_start":814,"line_end":814,"column_start":5,"column_end":10}},{"value":"/ # type Record = ();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179096,"byte_end":179119,"line_start":815,"line_end":815,"column_start":5,"column_end":28}},{"value":"/ # type DbError = ();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179124,"byte_end":179148,"line_start":816,"line_end":816,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179153,"byte_end":179158,"line_start":817,"line_end":817,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179163,"byte_end":179208,"line_start":818,"line_end":818,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179213,"byte_end":179244,"line_start":819,"line_end":819,"column_start":5,"column_end":36}},{"value":"/ #   type Error = DbError;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179249,"byte_end":179278,"line_start":820,"line_end":820,"column_start":5,"column_end":34}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, DbError>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179283,"byte_end":179358,"line_start":821,"line_end":821,"column_start":5,"column_end":80}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179363,"byte_end":179368,"line_start":822,"line_end":822,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179373,"byte_end":179462,"line_start":823,"line_end":823,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179467,"byte_end":179498,"line_start":824,"line_end":824,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179503,"byte_end":179512,"line_start":825,"line_end":825,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179517,"byte_end":179522,"line_start":826,"line_end":826,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179527,"byte_end":179585,"line_start":827,"line_end":827,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179590,"byte_end":179637,"line_start":828,"line_end":828,"column_start":5,"column_end":52}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179642,"byte_end":179651,"line_start":829,"line_end":829,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179656,"byte_end":179663,"line_start":830,"line_end":830,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179668,"byte_end":179673,"line_start":831,"line_end":831,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179678,"byte_end":179695,"line_start":832,"line_end":832,"column_start":5,"column_end":22}},{"value":"/ // A service returning Result<Record, DbError>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179700,"byte_end":179750,"line_start":833,"line_end":833,"column_start":5,"column_end":55}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179755,"byte_end":179812,"line_start":834,"line_end":834,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179817,"byte_end":179820,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ // An async function that attempts to recover from errors returned by the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179825,"byte_end":179902,"line_start":836,"line_end":836,"column_start":5,"column_end":82}},{"value":"/ // database.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179907,"byte_end":179923,"line_start":837,"line_end":837,"column_start":5,"column_end":21}},{"value":"/ async fn recover_from_error(error: DbError) -> Result<Record, DbError> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":179928,"byte_end":180004,"line_start":838,"line_end":838,"column_start":5,"column_end":81}},{"value":"/     // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180009,"byte_end":180023,"line_start":839,"line_end":839,"column_start":5,"column_end":19}},{"value":"/     # Ok(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180028,"byte_end":180044,"line_start":840,"line_end":840,"column_start":5,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180049,"byte_end":180054,"line_start":841,"line_end":841,"column_start":5,"column_end":10}},{"value":"/ #    async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180059,"byte_end":180075,"line_start":842,"line_end":842,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180080,"byte_end":180083,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ // If the database service returns an error, attempt to recover by","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180088,"byte_end":180158,"line_start":844,"line_end":844,"column_start":5,"column_end":75}},{"value":"/ // calling `recover_from_error`. Otherwise, return the successful response.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180163,"byte_end":180242,"line_start":845,"line_end":845,"column_start":5,"column_end":84}},{"value":"/ let mut new_service = service.then(|result| async move {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180247,"byte_end":180307,"line_start":846,"line_end":846,"column_start":5,"column_end":65}},{"value":"/     match result {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180312,"byte_end":180334,"line_start":847,"line_end":847,"column_start":5,"column_end":27}},{"value":"/         Ok(record) => Ok(record),","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180339,"byte_end":180376,"line_start":848,"line_end":848,"column_start":5,"column_end":42}},{"value":"/         Err(e) => recover_from_error(e).await,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180381,"byte_end":180431,"line_start":849,"line_end":849,"column_start":5,"column_end":55}},{"value":"/     }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180436,"byte_end":180445,"line_start":850,"line_end":850,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180450,"byte_end":180457,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180462,"byte_end":180465,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180470,"byte_end":180497,"line_start":853,"line_end":853,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180502,"byte_end":180518,"line_start":854,"line_end":854,"column_start":5,"column_end":21}},{"value":"/ let record = new_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180523,"byte_end":180551,"line_start":855,"line_end":855,"column_start":5,"column_end":33}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180556,"byte_end":180572,"line_start":856,"line_end":856,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180577,"byte_end":180592,"line_start":857,"line_end":857,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180597,"byte_end":180614,"line_start":858,"line_end":858,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180619,"byte_end":180635,"line_start":859,"line_end":859,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), DbError>(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180640,"byte_end":180667,"line_start":860,"line_end":860,"column_start":5,"column_end":32}},{"value":"/ #    };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180672,"byte_end":180683,"line_start":861,"line_end":861,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180688,"byte_end":180695,"line_start":862,"line_end":862,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180700,"byte_end":180707,"line_start":863,"line_end":863,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180712,"byte_end":180715,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ [`Future`]: crate::Service::Future","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180720,"byte_end":180758,"line_start":865,"line_end":865,"column_start":5,"column_end":43}},{"value":"/ [`Output`]: std::future::Future::Output","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180763,"byte_end":180806,"line_start":866,"line_end":866,"column_start":5,"column_end":48}},{"value":"/ [`futures` crate]: https://docs.rs/futures","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180811,"byte_end":180857,"line_start":867,"line_end":867,"column_start":5,"column_end":51}},{"value":"/ [`FutureExt::then`]: https://docs.rs/futures/latest/futures/future/trait.FutureExt.html#method.then","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180862,"byte_end":180965,"line_start":868,"line_end":868,"column_start":5,"column_end":108}},{"value":"/ [`Error`]: crate::Service::Error","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":180970,"byte_end":181006,"line_start":869,"line_end":869,"column_start":5,"column_end":41}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181011,"byte_end":181053,"line_start":870,"line_end":870,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181058,"byte_end":181104,"line_start":871,"line_end":871,"column_start":5,"column_end":51}},{"value":"/ [`BoxError`]: crate::BoxError","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181109,"byte_end":181142,"line_start":872,"line_end":872,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3009},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183527,"byte_end":183537,"line_start":947,"line_end":947,"column_start":8,"column_end":18},"name":"map_future","qualname":"::util::ServiceExt::map_future","value":"pub fn map_future<F, Fut, Response, Error>(Self, F) -> MapFuture<Self, F>\nwhere Self: Sized, F: FnMut(Self::Future) -> Fut, Error: From<Self::Error>,\nFut: Future<Output = Result<Response, Error>>","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Composes a function that transforms futures produced by the service.","sig":null,"attributes":[{"value":"/ Composes a function that transforms futures produced by the service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181444,"byte_end":181516,"line_start":883,"line_end":883,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181521,"byte_end":181524,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ This takes a function or closure returning a future computed from the future returned by","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181529,"byte_end":181621,"line_start":885,"line_end":885,"column_start":5,"column_end":97}},{"value":"/ the service's [`call`] method, as opposed to the responses produced by the future.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181626,"byte_end":181712,"line_start":886,"line_end":886,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181717,"byte_end":181720,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181725,"byte_end":181739,"line_start":888,"line_end":888,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181744,"byte_end":181747,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181752,"byte_end":181759,"line_start":890,"line_end":890,"column_start":5,"column_end":12}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181764,"byte_end":181801,"line_start":891,"line_end":891,"column_start":5,"column_end":42}},{"value":"/ # use tower::{Service, ServiceExt, BoxError};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181806,"byte_end":181855,"line_start":892,"line_end":892,"column_start":5,"column_end":54}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181860,"byte_end":181865,"line_start":893,"line_end":893,"column_start":5,"column_end":10}},{"value":"/ # struct DatabaseService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181870,"byte_end":181899,"line_start":894,"line_end":894,"column_start":5,"column_end":34}},{"value":"/ # impl DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181904,"byte_end":181932,"line_start":895,"line_end":895,"column_start":5,"column_end":33}},{"value":"/ #   fn new(address: &str) -> Self {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181937,"byte_end":181976,"line_start":896,"line_end":896,"column_start":5,"column_end":44}},{"value":"/ #       DatabaseService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":181981,"byte_end":182008,"line_start":897,"line_end":897,"column_start":5,"column_end":32}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182013,"byte_end":182022,"line_start":898,"line_end":898,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182027,"byte_end":182034,"line_start":899,"line_end":899,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182039,"byte_end":182044,"line_start":900,"line_end":900,"column_start":5,"column_end":10}},{"value":"/ # type Record = ();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182049,"byte_end":182072,"line_start":901,"line_end":901,"column_start":5,"column_end":28}},{"value":"/ # type DbError = crate::BoxError;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182077,"byte_end":182114,"line_start":902,"line_end":902,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182119,"byte_end":182124,"line_start":903,"line_end":903,"column_start":5,"column_end":10}},{"value":"/ # impl Service<u32> for DatabaseService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182129,"byte_end":182174,"line_start":904,"line_end":904,"column_start":5,"column_end":50}},{"value":"/ #   type Response = Record;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182179,"byte_end":182210,"line_start":905,"line_end":905,"column_start":5,"column_end":36}},{"value":"/ #   type Error = DbError;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182215,"byte_end":182244,"line_start":906,"line_end":906,"column_start":5,"column_end":34}},{"value":"/ #   type Future = futures_util::future::Ready<Result<Record, DbError>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182249,"byte_end":182324,"line_start":907,"line_end":907,"column_start":5,"column_end":80}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182329,"byte_end":182334,"line_start":908,"line_end":908,"column_start":5,"column_end":10}},{"value":"/ #   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182339,"byte_end":182428,"line_start":909,"line_end":909,"column_start":5,"column_end":94}},{"value":"/ #       Poll::Ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182433,"byte_end":182464,"line_start":910,"line_end":910,"column_start":5,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182469,"byte_end":182478,"line_start":911,"line_end":911,"column_start":5,"column_end":14}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182483,"byte_end":182488,"line_start":912,"line_end":912,"column_start":5,"column_end":10}},{"value":"/ #   fn call(&mut self, request: u32) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182493,"byte_end":182551,"line_start":913,"line_end":913,"column_start":5,"column_end":63}},{"value":"/ #       futures_util::future::ready(Ok(()))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182556,"byte_end":182603,"line_start":914,"line_end":914,"column_start":5,"column_end":52}},{"value":"/ #   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182608,"byte_end":182617,"line_start":915,"line_end":915,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182622,"byte_end":182629,"line_start":916,"line_end":916,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182634,"byte_end":182639,"line_start":917,"line_end":917,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182644,"byte_end":182661,"line_start":918,"line_end":918,"column_start":5,"column_end":22}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182666,"byte_end":182694,"line_start":919,"line_end":919,"column_start":5,"column_end":33}},{"value":"/ use tokio::time::timeout;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182699,"byte_end":182728,"line_start":920,"line_end":920,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182733,"byte_end":182736,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ // A service returning Result<Record, DbError>","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182741,"byte_end":182791,"line_start":922,"line_end":922,"column_start":5,"column_end":55}},{"value":"/ let service = DatabaseService::new(\"127.0.0.1:8080\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182796,"byte_end":182853,"line_start":923,"line_end":923,"column_start":5,"column_end":62}},{"value":"/ #    async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182858,"byte_end":182874,"line_start":924,"line_end":924,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182879,"byte_end":182882,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ let mut new_service = service.map_future(|future| async move {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182887,"byte_end":182953,"line_start":926,"line_end":926,"column_start":5,"column_end":71}},{"value":"/     let res = timeout(Duration::from_secs(1), future).await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":182958,"byte_end":183023,"line_start":927,"line_end":927,"column_start":5,"column_end":70}},{"value":"/     Ok::<_, BoxError>(res)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183028,"byte_end":183058,"line_start":928,"line_end":928,"column_start":5,"column_end":35}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183063,"byte_end":183070,"line_start":929,"line_end":929,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183075,"byte_end":183078,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ // Call the new service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183083,"byte_end":183110,"line_start":931,"line_end":931,"column_start":5,"column_end":32}},{"value":"/ let id = 13;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183115,"byte_end":183131,"line_start":932,"line_end":932,"column_start":5,"column_end":21}},{"value":"/ let record = new_service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183136,"byte_end":183164,"line_start":933,"line_end":933,"column_start":5,"column_end":33}},{"value":"/     .ready()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183169,"byte_end":183185,"line_start":934,"line_end":934,"column_start":5,"column_end":21}},{"value":"/     .await?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183190,"byte_end":183205,"line_start":935,"line_end":935,"column_start":5,"column_end":20}},{"value":"/     .call(id)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183210,"byte_end":183227,"line_start":936,"line_end":936,"column_start":5,"column_end":22}},{"value":"/     .await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183232,"byte_end":183248,"line_start":937,"line_end":937,"column_start":5,"column_end":21}},{"value":"/ # Ok::<(), BoxError>(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183253,"byte_end":183281,"line_start":938,"line_end":938,"column_start":5,"column_end":33}},{"value":"/ #    };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183286,"byte_end":183297,"line_start":939,"line_end":939,"column_start":5,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183302,"byte_end":183309,"line_start":940,"line_end":940,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183314,"byte_end":183321,"line_start":941,"line_end":941,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183326,"byte_end":183329,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ Note that normally you wouldn't implement timeouts like this and instead use [`Timeout`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183334,"byte_end":183427,"line_start":943,"line_end":943,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183432,"byte_end":183435,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ [`call`]: crate::Service::call","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183440,"byte_end":183474,"line_start":945,"line_end":945,"column_start":5,"column_end":39}},{"value":"/ [`Timeout`]: crate::timeout::Timeout","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183479,"byte_end":183519,"line_start":946,"line_end":946,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3014},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185075,"byte_end":185080,"line_start":997,"line_end":997,"column_start":8,"column_end":13},"name":"boxed","qualname":"::util::ServiceExt::boxed","value":"pub fn boxed(Self) -> BoxService<Request, Self::Response, Self::Error> where\nSelf: Sized + Send + 'static, Self::Future: Send + 'static","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Convert the service into a [`Service`] + [`Send`] trait object.","sig":null,"attributes":[{"value":"/ Convert the service into a [`Service`] + [`Send`] trait object.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183805,"byte_end":183872,"line_start":957,"line_end":957,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183877,"byte_end":183880,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ See [`BoxService`] for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183885,"byte_end":183925,"line_start":959,"line_end":959,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183930,"byte_end":183933,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ If `Self` implements the [`Clone`] trait, the [`boxed_clone`] method","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":183938,"byte_end":184010,"line_start":961,"line_end":961,"column_start":5,"column_end":77}},{"value":"/ can be used instead, to produce a boxed service which will also","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184015,"byte_end":184082,"line_start":962,"line_end":962,"column_start":5,"column_end":72}},{"value":"/ implement [`Clone`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184087,"byte_end":184111,"line_start":963,"line_end":963,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184116,"byte_end":184119,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184124,"byte_end":184137,"line_start":965,"line_end":965,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184142,"byte_end":184145,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184150,"byte_end":184157,"line_start":967,"line_end":967,"column_start":5,"column_end":12}},{"value":"/ use tower::{Service, ServiceExt, BoxError, service_fn, util::BoxService};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184162,"byte_end":184239,"line_start":968,"line_end":968,"column_start":5,"column_end":82}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184244,"byte_end":184249,"line_start":969,"line_end":969,"column_start":5,"column_end":10}},{"value":"/ # struct Request;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184254,"byte_end":184275,"line_start":970,"line_end":970,"column_start":5,"column_end":26}},{"value":"/ # struct Response;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184280,"byte_end":184302,"line_start":971,"line_end":971,"column_start":5,"column_end":27}},{"value":"/ # impl Response {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184307,"byte_end":184328,"line_start":972,"line_end":972,"column_start":5,"column_end":26}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184333,"byte_end":184368,"line_start":973,"line_end":973,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184373,"byte_end":184380,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184385,"byte_end":184388,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ let service = service_fn(|req: Request| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184393,"byte_end":184444,"line_start":976,"line_end":976,"column_start":5,"column_end":56}},{"value":"/     Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184449,"byte_end":184491,"line_start":977,"line_end":977,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184496,"byte_end":184503,"line_start":978,"line_end":978,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184508,"byte_end":184511,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ let service: BoxService<Request, Response, BoxError> = service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184516,"byte_end":184582,"line_start":980,"line_end":980,"column_start":5,"column_end":71}},{"value":"/     .map_request(|req| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184587,"byte_end":184615,"line_start":981,"line_end":981,"column_start":5,"column_end":33}},{"value":"/         println!(\"received request\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184620,"byte_end":184661,"line_start":982,"line_end":982,"column_start":5,"column_end":46}},{"value":"/         req","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184666,"byte_end":184681,"line_start":983,"line_end":983,"column_start":5,"column_end":20}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184686,"byte_end":184696,"line_start":984,"line_end":984,"column_start":5,"column_end":15}},{"value":"/     .map_response(|res| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184701,"byte_end":184730,"line_start":985,"line_end":985,"column_start":5,"column_end":34}},{"value":"/         println!(\"response produced\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184735,"byte_end":184777,"line_start":986,"line_end":986,"column_start":5,"column_end":47}},{"value":"/         res","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184782,"byte_end":184797,"line_start":987,"line_end":987,"column_start":5,"column_end":20}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184802,"byte_end":184812,"line_start":988,"line_end":988,"column_start":5,"column_end":15}},{"value":"/     .boxed();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184817,"byte_end":184834,"line_start":989,"line_end":989,"column_start":5,"column_end":22}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184839,"byte_end":184883,"line_start":990,"line_end":990,"column_start":5,"column_end":49}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184888,"byte_end":184930,"line_start":991,"line_end":991,"column_start":5,"column_end":47}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184935,"byte_end":184968,"line_start":992,"line_end":992,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184973,"byte_end":184980,"line_start":993,"line_end":993,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184985,"byte_end":184988,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":184993,"byte_end":185024,"line_start":995,"line_end":995,"column_start":5,"column_end":36}},{"value":"/ [`boxed_clone`]: Self::boxed_clone","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185029,"byte_end":185067,"line_start":996,"line_end":996,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3015},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186619,"byte_end":186630,"line_start":1046,"line_end":1046,"column_start":8,"column_end":19},"name":"boxed_clone","qualname":"::util::ServiceExt::boxed_clone","value":"pub fn boxed_clone(Self)\n-> BoxCloneService<Request, Self::Response, Self::Error> where Self: Clone +\nSized + Send + 'static, Self::Future: Send + 'static","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Convert the service into a [`Service`] + [`Clone`] + [`Send`] trait object.","sig":null,"attributes":[{"value":"/ Convert the service into a [`Service`] + [`Clone`] + [`Send`] trait object.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185272,"byte_end":185351,"line_start":1005,"line_end":1005,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185356,"byte_end":185359,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`boxed`] method, but it requires that `Self` implement","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185364,"byte_end":185446,"line_start":1007,"line_end":1007,"column_start":5,"column_end":87}},{"value":"/ [`Clone`], and the returned boxed service implements [`Clone`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185451,"byte_end":185518,"line_start":1008,"line_end":1008,"column_start":5,"column_end":72}},{"value":"/ See [`BoxCloneService`] for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185523,"byte_end":185568,"line_start":1009,"line_end":1009,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185573,"byte_end":185576,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185581,"byte_end":185594,"line_start":1011,"line_end":1011,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185599,"byte_end":185602,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185607,"byte_end":185614,"line_start":1013,"line_end":1013,"column_start":5,"column_end":12}},{"value":"/ use tower::{Service, ServiceExt, BoxError, service_fn, util::BoxCloneService};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185619,"byte_end":185701,"line_start":1014,"line_end":1014,"column_start":5,"column_end":87}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185706,"byte_end":185711,"line_start":1015,"line_end":1015,"column_start":5,"column_end":10}},{"value":"/ # struct Request;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185716,"byte_end":185737,"line_start":1016,"line_end":1016,"column_start":5,"column_end":26}},{"value":"/ # struct Response;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185742,"byte_end":185764,"line_start":1017,"line_end":1017,"column_start":5,"column_end":27}},{"value":"/ # impl Response {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185769,"byte_end":185790,"line_start":1018,"line_end":1018,"column_start":5,"column_end":26}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185795,"byte_end":185830,"line_start":1019,"line_end":1019,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185835,"byte_end":185842,"line_start":1020,"line_end":1020,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185847,"byte_end":185850,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ let service = service_fn(|req: Request| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185855,"byte_end":185906,"line_start":1022,"line_end":1022,"column_start":5,"column_end":56}},{"value":"/     Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185911,"byte_end":185953,"line_start":1023,"line_end":1023,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185958,"byte_end":185965,"line_start":1024,"line_end":1024,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185970,"byte_end":185973,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ let service: BoxCloneService<Request, Response, BoxError> = service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":185978,"byte_end":186049,"line_start":1026,"line_end":1026,"column_start":5,"column_end":76}},{"value":"/     .map_request(|req| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186054,"byte_end":186082,"line_start":1027,"line_end":1027,"column_start":5,"column_end":33}},{"value":"/         println!(\"received request\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186087,"byte_end":186128,"line_start":1028,"line_end":1028,"column_start":5,"column_end":46}},{"value":"/         req","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186133,"byte_end":186148,"line_start":1029,"line_end":1029,"column_start":5,"column_end":20}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186153,"byte_end":186163,"line_start":1030,"line_end":1030,"column_start":5,"column_end":15}},{"value":"/     .map_response(|res| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186168,"byte_end":186197,"line_start":1031,"line_end":1031,"column_start":5,"column_end":34}},{"value":"/         println!(\"response produced\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186202,"byte_end":186244,"line_start":1032,"line_end":1032,"column_start":5,"column_end":47}},{"value":"/         res","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186249,"byte_end":186264,"line_start":1033,"line_end":1033,"column_start":5,"column_end":20}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186269,"byte_end":186279,"line_start":1034,"line_end":1034,"column_start":5,"column_end":15}},{"value":"/     .boxed_clone();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186284,"byte_end":186307,"line_start":1035,"line_end":1035,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186312,"byte_end":186315,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ // The boxed service can still be cloned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186320,"byte_end":186365,"line_start":1037,"line_end":1037,"column_start":5,"column_end":50}},{"value":"/ service.clone();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186370,"byte_end":186390,"line_start":1038,"line_end":1038,"column_start":5,"column_end":25}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186395,"byte_end":186439,"line_start":1039,"line_end":1039,"column_start":5,"column_end":49}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186444,"byte_end":186486,"line_start":1040,"line_end":1040,"column_start":5,"column_end":47}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186491,"byte_end":186524,"line_start":1041,"line_end":1041,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186529,"byte_end":186536,"line_start":1042,"line_end":1042,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186541,"byte_end":186544,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186549,"byte_end":186580,"line_start":1044,"line_end":1044,"column_start":5,"column_end":36}},{"value":"/ [`boxed`]: Self::boxed","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186585,"byte_end":186611,"line_start":1045,"line_end":1045,"column_start":5,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":3019},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187588,"byte_end":187600,"line_start":1077,"line_end":1077,"column_start":8,"column_end":20},"name":"option_layer","qualname":"::util::option_layer","value":"pub fn option_layer<L>(Option<L>) -> Either<L, Identity>","parent":null,"children":[],"decl_id":null,"docs":" Convert an `Option<Layer>` into a [`Layer`].","sig":null,"attributes":[{"value":"/ Convert an `Option<Layer>` into a [`Layer`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186934,"byte_end":186982,"line_start":1057,"line_end":1057,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186983,"byte_end":186986,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186987,"byte_end":186994,"line_start":1059,"line_end":1059,"column_start":1,"column_end":8}},{"value":"/ # use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186995,"byte_end":187025,"line_start":1060,"line_end":1060,"column_start":1,"column_end":31}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187026,"byte_end":187051,"line_start":1061,"line_end":1061,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187052,"byte_end":187093,"line_start":1062,"line_end":1062,"column_start":1,"column_end":42}},{"value":"/ use tower::util::option_layer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187094,"byte_end":187128,"line_start":1063,"line_end":1063,"column_start":1,"column_end":35}},{"value":"/ # use tower::timeout::TimeoutLayer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187129,"byte_end":187168,"line_start":1064,"line_end":1064,"column_start":1,"column_end":40}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187169,"byte_end":187278,"line_start":1065,"line_end":1065,"column_start":1,"column_end":110}},{"value":"/ # let timeout = Some(Duration::new(10, 0));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187279,"byte_end":187326,"line_start":1066,"line_end":1066,"column_start":1,"column_end":48}},{"value":"/ // Layer to apply a timeout if configured","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187327,"byte_end":187372,"line_start":1067,"line_end":1067,"column_start":1,"column_end":46}},{"value":"/ let maybe_timeout = option_layer(timeout.map(TimeoutLayer::new));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187373,"byte_end":187442,"line_start":1068,"line_end":1068,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187443,"byte_end":187446,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187447,"byte_end":187472,"line_start":1070,"line_end":1070,"column_start":1,"column_end":26}},{"value":"/     .layer(maybe_timeout)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187473,"byte_end":187502,"line_start":1071,"line_end":1071,"column_start":1,"column_end":30}},{"value":"/     .service(svc);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187503,"byte_end":187525,"line_start":1072,"line_end":1072,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187526,"byte_end":187533,"line_start":1073,"line_end":1073,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187534,"byte_end":187541,"line_start":1074,"line_end":1074,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187542,"byte_end":187545,"line_start":1075,"line_end":1075,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: crate::layer::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":187546,"byte_end":187580,"line_start":1076,"line_end":1076,"column_start":1,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":3021},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"builder","qualname":"::builder","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","parent":null,"children":[{"krate":0,"index":3022},{"krate":0,"index":3023},{"krate":0,"index":3026},{"krate":0,"index":3029},{"krate":0,"index":3032},{"krate":0,"index":3035},{"krate":0,"index":5924},{"krate":0,"index":5927},{"krate":0,"index":3038},{"krate":0,"index":3040},{"krate":0,"index":3042},{"krate":0,"index":3090},{"krate":0,"index":3093}],"decl_id":null,"docs":" Builder types to compose layers and services\n","sig":null,"attributes":[{"value":"/ Builder types to compose layers and services","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250599,"byte_end":250647,"line_start":1,"line_end":1,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":5924},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254131,"byte_end":254145,"line_start":106,"line_end":106,"column_start":12,"column_end":26},"name":"ServiceBuilder","qualname":"::builder::ServiceBuilder","value":"ServiceBuilder {  }","parent":null,"children":[{"krate":0,"index":5926}],"decl_id":null,"docs":" Declaratively construct [`Service`] values.","sig":null,"attributes":[{"value":"/ Declaratively construct [`Service`] values.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250736,"byte_end":250783,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250784,"byte_end":250787,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`ServiceBuilder`] provides a [builder-like interface][builder] for composing","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250788,"byte_end":250869,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"/ layers to be applied to a [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250870,"byte_end":250912,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250913,"byte_end":250916,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250917,"byte_end":250930,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250931,"byte_end":250934,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ A [`Service`] is a trait representing an asynchronous function of a request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":250935,"byte_end":251014,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to a response. It is similar to `async fn(Request) -> Result<Response, Error>`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251015,"byte_end":251098,"line_start":16,"line_end":16,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251099,"byte_end":251102,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ A [`Service`] is typically bound to a single transport, such as a TCP","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251103,"byte_end":251176,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ connection.  It defines how _all_ inbound or outbound requests are handled","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251177,"byte_end":251255,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ by that connection.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251256,"byte_end":251279,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251280,"byte_end":251283,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [builder]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251284,"byte_end":251360,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251361,"byte_end":251364,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251365,"byte_end":251376,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251377,"byte_end":251380,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The order in which layers are added impacts how requests are handled. Layers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251381,"byte_end":251461,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ that are added first will be called with the request first. The argument to","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251462,"byte_end":251541,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ `service` will be last to see the request.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251542,"byte_end":251588,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251589,"byte_end":251592,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251593,"byte_end":251600,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # // this (and other) doctest is ignored because we don't have a way","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251601,"byte_end":251673,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/ # // to say that it should only be run with cfg(feature = \"...\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251674,"byte_end":251742,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251743,"byte_end":251768,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251769,"byte_end":251810,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ # #[cfg(all(feature = \"buffer\", feature = \"limit\"))]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251811,"byte_end":251867,"line_start":35,"line_end":35,"column_start":1,"column_end":57}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251868,"byte_end":251977,"line_start":36,"line_end":36,"column_start":1,"column_end":110}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":251978,"byte_end":252003,"line_start":37,"line_end":37,"column_start":1,"column_end":26}},{"value":"/     .buffer(100)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252004,"byte_end":252024,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/     .concurrency_limit(10)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252025,"byte_end":252055,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/     .service(svc)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252056,"byte_end":252077,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"/ # ;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252078,"byte_end":252085,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252086,"byte_end":252093,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252094,"byte_end":252101,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252102,"byte_end":252105,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ In the above example, the buffer layer receives the request first followed","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252106,"byte_end":252184,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ by `concurrency_limit`. `buffer` enables up to 100 request to be in-flight","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252185,"byte_end":252263,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ **on top of** the requests that have already been forwarded to the next","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252264,"byte_end":252339,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ layer. Combined with `concurrency_limit`, this allows up to 110 requests to be","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252340,"byte_end":252422,"line_start":48,"line_end":48,"column_start":1,"column_end":83}},{"value":"/ in-flight.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252423,"byte_end":252437,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252438,"byte_end":252441,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252442,"byte_end":252449,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252450,"byte_end":252475,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252476,"byte_end":252517,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/ # #[cfg(all(feature = \"buffer\", feature = \"limit\"))]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252518,"byte_end":252574,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252575,"byte_end":252684,"line_start":55,"line_end":55,"column_start":1,"column_end":110}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252685,"byte_end":252710,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"/     .concurrency_limit(10)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252711,"byte_end":252741,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/     .buffer(100)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252742,"byte_end":252762,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/     .service(svc)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252763,"byte_end":252784,"line_start":59,"line_end":59,"column_start":1,"column_end":22}},{"value":"/ # ;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252785,"byte_end":252792,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252793,"byte_end":252800,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252801,"byte_end":252808,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252809,"byte_end":252812,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The above example is similar, but the order of layers is reversed. Now,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252813,"byte_end":252888,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ `concurrency_limit` applies first and only allows 10 requests to be in-flight","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252889,"byte_end":252970,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/ total.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252971,"byte_end":252981,"line_start":66,"line_end":66,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252982,"byte_end":252985,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":252986,"byte_end":253000,"line_start":68,"line_end":68,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253001,"byte_end":253004,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ A [`Service`] stack with a single layer:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253005,"byte_end":253049,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253050,"byte_end":253053,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253054,"byte_end":253061,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253062,"byte_end":253087,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253088,"byte_end":253129,"line_start":74,"line_end":74,"column_start":1,"column_end":42}},{"value":"/ # #[cfg(feature = \"limit\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253130,"byte_end":253161,"line_start":75,"line_end":75,"column_start":1,"column_end":32}},{"value":"/ # use tower::limit::concurrency::ConcurrencyLimitLayer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253162,"byte_end":253221,"line_start":76,"line_end":76,"column_start":1,"column_end":60}},{"value":"/ # #[cfg(feature = \"limit\")]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253222,"byte_end":253253,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253254,"byte_end":253363,"line_start":78,"line_end":78,"column_start":1,"column_end":110}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253364,"byte_end":253389,"line_start":79,"line_end":79,"column_start":1,"column_end":26}},{"value":"/     .concurrency_limit(5)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253390,"byte_end":253419,"line_start":80,"line_end":80,"column_start":1,"column_end":30}},{"value":"/     .service(svc);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253420,"byte_end":253442,"line_start":81,"line_end":81,"column_start":1,"column_end":23}},{"value":"/ # ;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253443,"byte_end":253450,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253451,"byte_end":253458,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253459,"byte_end":253466,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253467,"byte_end":253470,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ A [`Service`] stack with _multiple_ layers that contain rate limiting,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253471,"byte_end":253545,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ in-flight request limits, and a channel-backed, clonable [`Service`]:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253546,"byte_end":253619,"line_start":87,"line_end":87,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253620,"byte_end":253623,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253624,"byte_end":253631,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253632,"byte_end":253657,"line_start":90,"line_end":90,"column_start":1,"column_end":26}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253658,"byte_end":253699,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"/ # use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253700,"byte_end":253730,"line_start":92,"line_end":92,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(all(feature = \"buffer\", feature = \"limit\"))]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253731,"byte_end":253787,"line_start":93,"line_end":93,"column_start":1,"column_end":57}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253788,"byte_end":253897,"line_start":94,"line_end":94,"column_start":1,"column_end":110}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253898,"byte_end":253923,"line_start":95,"line_end":95,"column_start":1,"column_end":26}},{"value":"/     .buffer(5)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253924,"byte_end":253942,"line_start":96,"line_end":96,"column_start":1,"column_end":19}},{"value":"/     .concurrency_limit(5)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253943,"byte_end":253972,"line_start":97,"line_end":97,"column_start":1,"column_end":30}},{"value":"/     .rate_limit(5, Duration::from_secs(1))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":253973,"byte_end":254019,"line_start":98,"line_end":98,"column_start":1,"column_end":47}},{"value":"/     .service(svc);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254020,"byte_end":254042,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/ # ;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254043,"byte_end":254050,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254051,"byte_end":254058,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254059,"byte_end":254066,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254067,"byte_end":254070,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254071,"byte_end":254102,"line_start":104,"line_end":104,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3041},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254352,"byte_end":254355,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"new","qualname":"<ServiceBuilder<Identity>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`ServiceBuilder`].\n","sig":null,"attributes":[{"value":"/ Create a new [`ServiceBuilder`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254304,"byte_end":254340,"line_start":117,"line_end":117,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3044},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254747,"byte_end":254752,"line_start":132,"line_end":132,"column_start":12,"column_end":17},"name":"layer","qualname":"<ServiceBuilder<L>>::layer","value":"pub fn layer<T>(Self, T) -> ServiceBuilder<Stack<T, L>>","parent":null,"children":[],"decl_id":null,"docs":" Add a new layer `T` into the [`ServiceBuilder`].","sig":null,"attributes":[{"value":"/ Add a new layer `T` into the [`ServiceBuilder`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254480,"byte_end":254532,"line_start":126,"line_end":126,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254537,"byte_end":254540,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with the service provided by a user-defined","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254545,"byte_end":254621,"line_start":128,"line_end":128,"column_start":5,"column_end":81}},{"value":"/ [`Layer`]. The provided layer must implement the [`Layer`] trait.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254626,"byte_end":254695,"line_start":129,"line_end":129,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254700,"byte_end":254703,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254708,"byte_end":254735,"line_start":131,"line_end":131,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3046},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255589,"byte_end":255601,"line_start":156,"line_end":156,"column_start":12,"column_end":24},"name":"option_layer","qualname":"<ServiceBuilder<L>>::option_layer","value":"pub fn option_layer<T>(Self, Option<T>)\n-> ServiceBuilder<Stack<crate::util::Either<T, Identity>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Optionally add a new layer `T` into the [`ServiceBuilder`].","sig":null,"attributes":[{"value":"/ Optionally add a new layer `T` into the [`ServiceBuilder`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254901,"byte_end":254964,"line_start":138,"line_end":138,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254969,"byte_end":254972,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254977,"byte_end":254984,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ # use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254989,"byte_end":255019,"line_start":141,"line_end":141,"column_start":5,"column_end":35}},{"value":"/ # use tower::Service;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255024,"byte_end":255049,"line_start":142,"line_end":142,"column_start":5,"column_end":30}},{"value":"/ # use tower::builder::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255054,"byte_end":255095,"line_start":143,"line_end":143,"column_start":5,"column_end":46}},{"value":"/ # use tower::timeout::TimeoutLayer;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255100,"byte_end":255139,"line_start":144,"line_end":144,"column_start":5,"column_end":44}},{"value":"/ # async fn wrap<S>(svc: S) where S: Service<(), Error = &'static str> + 'static + Send, S::Future: Send {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255144,"byte_end":255253,"line_start":145,"line_end":145,"column_start":5,"column_end":114}},{"value":"/ # let timeout = Some(Duration::new(10, 0));","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255258,"byte_end":255305,"line_start":146,"line_end":146,"column_start":5,"column_end":52}},{"value":"/ // Apply a timeout if configured","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255310,"byte_end":255346,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255351,"byte_end":255376,"line_start":148,"line_end":148,"column_start":5,"column_end":30}},{"value":"/     .option_layer(timeout.map(TimeoutLayer::new))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255381,"byte_end":255434,"line_start":149,"line_end":149,"column_start":5,"column_end":58}},{"value":"/     .service(svc)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255439,"byte_end":255460,"line_start":150,"line_end":150,"column_start":5,"column_end":26}},{"value":"/ # ;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255465,"byte_end":255472,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255477,"byte_end":255484,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255489,"byte_end":255496,"line_start":153,"line_end":153,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255501,"byte_end":255525,"line_start":154,"line_end":154,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3048},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256011,"byte_end":256019,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"layer_fn","qualname":"<ServiceBuilder<L>>::layer_fn","value":"pub fn layer_fn<F>(Self, F)\n-> ServiceBuilder<Stack<crate::layer::LayerFn<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Add a [`Layer`] built from a function that accepts a service and returns another service.","sig":null,"attributes":[{"value":"/ Add a [`Layer`] built from a function that accepts a service and returns another service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255780,"byte_end":255873,"line_start":163,"line_end":163,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255878,"byte_end":255881,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ See the documentation for [`layer_fn`] for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255886,"byte_end":255946,"line_start":165,"line_end":165,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255951,"byte_end":255954,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ [`layer_fn`]: crate::layer::layer_fn","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":255959,"byte_end":255999,"line_start":167,"line_end":167,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3050},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256445,"byte_end":256451,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"buffer","qualname":"<ServiceBuilder<L>>::buffer","value":"pub fn buffer<Request>(Self, usize)\n-> ServiceBuilder<Stack<crate::buffer::BufferLayer<Request>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Buffer requests when when the next layer is not ready.","sig":null,"attributes":[{"value":"/ Buffer requests when when the next layer is not ready.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256148,"byte_end":256206,"line_start":172,"line_end":172,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256211,"byte_end":256214,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`Buffer`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256219,"byte_end":256286,"line_start":174,"line_end":174,"column_start":5,"column_end":72}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256291,"byte_end":256306,"line_start":175,"line_end":175,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256311,"byte_end":256314,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ [`Buffer`]: crate::buffer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256319,"byte_end":256348,"line_start":177,"line_end":177,"column_start":5,"column_end":34}},{"value":"cfg(feature = \"buffer\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256353,"byte_end":256379,"line_start":178,"line_end":178,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3052},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":257136,"byte_end":257153,"line_start":199,"line_end":199,"column_start":12,"column_end":29},"name":"concurrency_limit","qualname":"<ServiceBuilder<L>>::concurrency_limit","value":"pub fn concurrency_limit(Self, usize)\n-> ServiceBuilder<Stack<crate::limit::ConcurrencyLimitLayer, L>>","parent":null,"children":[],"decl_id":null,"docs":" Limit the max number of in-flight requests.","sig":null,"attributes":[{"value":"/ Limit the max number of in-flight requests.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256641,"byte_end":256688,"line_start":187,"line_end":187,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256693,"byte_end":256696,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ A request is in-flight from the time the request is received until the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256701,"byte_end":256775,"line_start":189,"line_end":189,"column_start":5,"column_end":79}},{"value":"/ response future completes. This includes the time spent in the next","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256780,"byte_end":256851,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/ layers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256856,"byte_end":256867,"line_start":191,"line_end":191,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256872,"byte_end":256875,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256880,"byte_end":256936,"line_start":193,"line_end":193,"column_start":5,"column_end":61}},{"value":"/ [`ConcurrencyLimit`] middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256941,"byte_end":256977,"line_start":194,"line_end":194,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256982,"byte_end":256985,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ [`ConcurrencyLimit`]: crate::limit::concurrency","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":256990,"byte_end":257041,"line_start":196,"line_end":196,"column_start":5,"column_end":56}},{"value":"cfg(feature = \"limit\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":257046,"byte_end":257071,"line_start":197,"line_end":197,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3053},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":258536,"byte_end":258546,"line_start":235,"line_end":235,"column_start":12,"column_end":22},"name":"rate_limit","qualname":"<ServiceBuilder<L>>::rate_limit","value":"pub fn rate_limit(Self, u64, std::time::Duration)\n-> ServiceBuilder<Stack<crate::limit::RateLimitLayer, L>>","parent":null,"children":[],"decl_id":null,"docs":" Limit requests to at most `num` per the given duration.","sig":null,"attributes":[{"value":"/ Limit requests to at most `num` per the given duration.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":258229,"byte_end":258288,"line_start":227,"line_end":227,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":258293,"byte_end":258296,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`RateLimit`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":258301,"byte_end":258371,"line_start":229,"line_end":229,"column_start":5,"column_end":75}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":258376,"byte_end":258391,"line_start":230,"line_end":230,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":258396,"byte_end":258399,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ [`RateLimit`]: crate::limit::rate","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":258404,"byte_end":258441,"line_start":232,"line_end":232,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"limit\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":258446,"byte_end":258471,"line_start":233,"line_end":233,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3054},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259830,"byte_end":259837,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"timeout","qualname":"<ServiceBuilder<L>>::timeout","value":"pub fn timeout(Self, std::time::Duration)\n-> ServiceBuilder<Stack<crate::timeout::TimeoutLayer, L>>","parent":null,"children":[],"decl_id":null,"docs":" Fail requests that take longer than `timeout`.","sig":null,"attributes":[{"value":"/ Fail requests that take longer than `timeout`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259392,"byte_end":259442,"line_start":259,"line_end":259,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259447,"byte_end":259450,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ If the next layer takes more than `timeout` to respond to a request,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259455,"byte_end":259527,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ processing is terminated and an error is returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259532,"byte_end":259586,"line_start":262,"line_end":262,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259591,"byte_end":259594,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`timeout`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259599,"byte_end":259667,"line_start":264,"line_end":264,"column_start":5,"column_end":73}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259672,"byte_end":259687,"line_start":265,"line_end":265,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259692,"byte_end":259695,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ [`timeout`]: crate::timeout","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259700,"byte_end":259731,"line_start":267,"line_end":267,"column_start":5,"column_end":36}},{"value":"cfg(feature = \"timeout\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":259736,"byte_end":259763,"line_start":268,"line_end":268,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3055},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263276,"byte_end":263287,"line_start":375,"line_end":375,"column_start":12,"column_end":23},"name":"map_request","qualname":"<ServiceBuilder<L>>::map_request","value":"pub fn map_request<F, R1, R2>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapRequestLayer<F>, L>> where\nF: FnMut(R1) -> R2 + Clone","parent":null,"children":[],"decl_id":null,"docs":" Map one request type to another.","sig":null,"attributes":[{"value":"/ Map one request type to another.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261297,"byte_end":261333,"line_start":313,"line_end":313,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261338,"byte_end":261341,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapRequest`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261346,"byte_end":261417,"line_start":315,"line_end":315,"column_start":5,"column_end":76}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261422,"byte_end":261437,"line_start":316,"line_end":316,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261442,"byte_end":261445,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261450,"byte_end":261464,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261469,"byte_end":261472,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Changing the type of a request:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261477,"byte_end":261512,"line_start":320,"line_end":320,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261517,"byte_end":261520,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261525,"byte_end":261536,"line_start":322,"line_end":322,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261541,"byte_end":261571,"line_start":323,"line_end":323,"column_start":5,"column_end":35}},{"value":"/ use tower::ServiceExt;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261576,"byte_end":261602,"line_start":324,"line_end":324,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261607,"byte_end":261610,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261615,"byte_end":261635,"line_start":326,"line_end":326,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), ()> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261640,"byte_end":261681,"line_start":327,"line_end":327,"column_start":5,"column_end":46}},{"value":"/ // Suppose we have some `Service` whose request type is `String`:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261686,"byte_end":261755,"line_start":328,"line_end":328,"column_start":5,"column_end":74}},{"value":"/ let string_svc = tower::service_fn(|request: String| async move {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261760,"byte_end":261829,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"/     println!(\"request: {}\", request);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261834,"byte_end":261875,"line_start":330,"line_end":330,"column_start":5,"column_end":46}},{"value":"/     Ok(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261880,"byte_end":261894,"line_start":331,"line_end":331,"column_start":5,"column_end":19}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261899,"byte_end":261906,"line_start":332,"line_end":332,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261911,"byte_end":261914,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ // ...but we want to call that service with a `usize`. What do we do?","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261919,"byte_end":261992,"line_start":334,"line_end":334,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":261997,"byte_end":262000,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let usize_svc = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262005,"byte_end":262046,"line_start":336,"line_end":336,"column_start":5,"column_end":46}},{"value":"/      // Add a middlware that converts the request type to a `String`:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262051,"byte_end":262124,"line_start":337,"line_end":337,"column_start":5,"column_end":78}},{"value":"/     .map_request(|request: usize| format!(\"{}\", request))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262129,"byte_end":262190,"line_start":338,"line_end":338,"column_start":5,"column_end":66}},{"value":"/     // ...and wrap the string service with that middleware:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262195,"byte_end":262258,"line_start":339,"line_end":339,"column_start":5,"column_end":68}},{"value":"/     .service(string_svc);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262263,"byte_end":262292,"line_start":340,"line_end":340,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262297,"byte_end":262300,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ // Now, we can call that service with a `usize`:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262305,"byte_end":262357,"line_start":342,"line_end":342,"column_start":5,"column_end":57}},{"value":"/ usize_svc.oneshot(42).await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262362,"byte_end":262395,"line_start":343,"line_end":343,"column_start":5,"column_end":38}},{"value":"/ # Ok(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262400,"byte_end":262412,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262417,"byte_end":262424,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262429,"byte_end":262436,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262441,"byte_end":262444,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Modifying the request value:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262449,"byte_end":262481,"line_start":348,"line_end":348,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262486,"byte_end":262489,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262494,"byte_end":262505,"line_start":350,"line_end":350,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262510,"byte_end":262540,"line_start":351,"line_end":351,"column_start":5,"column_end":35}},{"value":"/ use tower::ServiceExt;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262545,"byte_end":262571,"line_start":352,"line_end":352,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262576,"byte_end":262579,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262584,"byte_end":262604,"line_start":354,"line_end":354,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), ()> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262609,"byte_end":262650,"line_start":355,"line_end":355,"column_start":5,"column_end":46}},{"value":"/ // A service that takes a number and returns it:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262655,"byte_end":262707,"line_start":356,"line_end":356,"column_start":5,"column_end":57}},{"value":"/ let svc = tower::service_fn(|request: usize| async move {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262712,"byte_end":262773,"line_start":357,"line_end":357,"column_start":5,"column_end":66}},{"value":"/    Ok(request)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262778,"byte_end":262796,"line_start":358,"line_end":358,"column_start":5,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262801,"byte_end":262808,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262813,"byte_end":262816,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ let svc = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262821,"byte_end":262856,"line_start":361,"line_end":361,"column_start":5,"column_end":40}},{"value":"/      // Add a middleware that adds 1 to each request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262861,"byte_end":262917,"line_start":362,"line_end":362,"column_start":5,"column_end":61}},{"value":"/     .map_request(|request: usize| request + 1)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262922,"byte_end":262972,"line_start":363,"line_end":363,"column_start":5,"column_end":55}},{"value":"/     .service(svc);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":262977,"byte_end":262999,"line_start":364,"line_end":364,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263004,"byte_end":263007,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ let response = svc.oneshot(1).await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263012,"byte_end":263053,"line_start":366,"line_end":366,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(response, 2);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263058,"byte_end":263086,"line_start":367,"line_end":367,"column_start":5,"column_end":33}},{"value":"/ # Ok(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263091,"byte_end":263103,"line_start":368,"line_end":368,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263108,"byte_end":263115,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263120,"byte_end":263127,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263132,"byte_end":263135,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`MapRequest`]: crate::util::MapRequest","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263140,"byte_end":263183,"line_start":372,"line_end":372,"column_start":5,"column_end":48}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263188,"byte_end":263212,"line_start":373,"line_end":373,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3059},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263970,"byte_end":263982,"line_start":396,"line_end":396,"column_start":12,"column_end":24},"name":"map_response","qualname":"<ServiceBuilder<L>>::map_response","value":"pub fn map_response<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapResponseLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Map one response type to another.","sig":null,"attributes":[{"value":"/ Map one response type to another.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263515,"byte_end":263552,"line_start":385,"line_end":385,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263557,"byte_end":263560,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapResponse`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263565,"byte_end":263637,"line_start":387,"line_end":387,"column_start":5,"column_end":77}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263642,"byte_end":263657,"line_start":388,"line_end":388,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263662,"byte_end":263665,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`map_response` combinator] for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263670,"byte_end":263744,"line_start":390,"line_end":390,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263749,"byte_end":263752,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ [`MapResponse`]: crate::util::MapResponse","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263757,"byte_end":263802,"line_start":392,"line_end":392,"column_start":5,"column_end":50}},{"value":"/ [`map_response` combinator]: crate::util::ServiceExt::map_response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263807,"byte_end":263877,"line_start":393,"line_end":393,"column_start":5,"column_end":75}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":263882,"byte_end":263906,"line_start":394,"line_end":394,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3061},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264576,"byte_end":264583,"line_start":414,"line_end":414,"column_start":12,"column_end":19},"name":"map_err","qualname":"<ServiceBuilder<L>>::map_err","value":"pub fn map_err<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapErrLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Map one error type to another.","sig":null,"attributes":[{"value":"/ Map one error type to another.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264154,"byte_end":264188,"line_start":403,"line_end":403,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264193,"byte_end":264196,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapErr`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264201,"byte_end":264268,"line_start":405,"line_end":405,"column_start":5,"column_end":72}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264273,"byte_end":264288,"line_start":406,"line_end":406,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264293,"byte_end":264296,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`map_err` combinator] for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264301,"byte_end":264370,"line_start":408,"line_end":408,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264375,"byte_end":264378,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ [`MapErr`]: crate::util::MapErr","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264383,"byte_end":264418,"line_start":410,"line_end":410,"column_start":5,"column_end":40}},{"value":"/ [`map_err` combinator]: crate::util::ServiceExt::map_err","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264423,"byte_end":264483,"line_start":411,"line_end":411,"column_start":5,"column_end":65}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264488,"byte_end":264512,"line_start":412,"line_end":412,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3063},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265196,"byte_end":265206,"line_start":428,"line_end":428,"column_start":12,"column_end":22},"name":"map_future","qualname":"<ServiceBuilder<L>>::map_future","value":"pub fn map_future<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapFutureLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Composes a function that transforms futures produced by the service.","sig":null,"attributes":[{"value":"/ Composes a function that transforms futures produced by the service.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264722,"byte_end":264794,"line_start":418,"line_end":418,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264799,"byte_end":264802,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapFutureLayer`] middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264807,"byte_end":264894,"line_start":420,"line_end":420,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264899,"byte_end":264902,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`map_future`] combinator for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264907,"byte_end":264979,"line_start":422,"line_end":422,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264984,"byte_end":264987,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ [`MapFutureLayer`]: crate::util::MapFutureLayer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":264992,"byte_end":265043,"line_start":424,"line_end":424,"column_start":5,"column_end":56}},{"value":"/ [`map_future`]: crate::util::ServiceExt::map_future","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265048,"byte_end":265103,"line_start":425,"line_end":425,"column_start":5,"column_end":60}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265108,"byte_end":265132,"line_start":426,"line_end":426,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3065},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266271,"byte_end":266275,"line_start":452,"line_end":452,"column_start":12,"column_end":16},"name":"then","qualname":"<ServiceBuilder<L>>::then","value":"pub fn then<F>(Self, F) -> ServiceBuilder<Stack<crate::util::ThenLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Apply an asynchronous function after the service, regardless of whether the future\n succeeds or fails.","sig":null,"attributes":[{"value":"/ Apply an asynchronous function after the service, regardless of whether the future","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265351,"byte_end":265437,"line_start":432,"line_end":432,"column_start":5,"column_end":91}},{"value":"/ succeeds or fails.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265442,"byte_end":265464,"line_start":433,"line_end":433,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265469,"byte_end":265472,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`Then`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265477,"byte_end":265542,"line_start":435,"line_end":435,"column_start":5,"column_end":70}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265547,"byte_end":265562,"line_start":436,"line_end":436,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265567,"byte_end":265570,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`map_response`] and [`map_err`] functions,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265575,"byte_end":265645,"line_start":438,"line_end":438,"column_start":5,"column_end":75}},{"value":"/ except that the *same* function is invoked when the service's future","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265650,"byte_end":265722,"line_start":439,"line_end":439,"column_start":5,"column_end":77}},{"value":"/ completes, whether it completes successfully or fails. This function","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265727,"byte_end":265799,"line_start":440,"line_end":440,"column_start":5,"column_end":77}},{"value":"/ takes the [`Result`] returned by the service's future, and returns a","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265804,"byte_end":265876,"line_start":441,"line_end":441,"column_start":5,"column_end":77}},{"value":"/ [`Result`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265881,"byte_end":265896,"line_start":442,"line_end":442,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265901,"byte_end":265904,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`then` combinator] for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265909,"byte_end":265975,"line_start":444,"line_end":444,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265980,"byte_end":265983,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ [`Then`]: crate::util::Then","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":265988,"byte_end":266019,"line_start":446,"line_end":446,"column_start":5,"column_end":36}},{"value":"/ [`then` combinator]: crate::util::ServiceExt::then","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266024,"byte_end":266078,"line_start":447,"line_end":447,"column_start":5,"column_end":59}},{"value":"/ [`map_response`]: ServiceBuilder::map_response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266083,"byte_end":266133,"line_start":448,"line_end":448,"column_start":5,"column_end":55}},{"value":"/ [`map_err`]: ServiceBuilder::map_err","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266138,"byte_end":266178,"line_start":449,"line_end":449,"column_start":5,"column_end":45}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266183,"byte_end":266207,"line_start":450,"line_end":450,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3067},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267263,"byte_end":267271,"line_start":474,"line_end":474,"column_start":12,"column_end":20},"name":"and_then","qualname":"<ServiceBuilder<L>>::and_then","value":"pub fn and_then<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::AndThenLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Executes a new future after this service's future resolves. This does\n not alter the behaviour of the [`poll_ready`] method.","sig":null,"attributes":[{"value":"/ Executes a new future after this service's future resolves. This does","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266410,"byte_end":266483,"line_start":456,"line_end":456,"column_start":5,"column_end":78}},{"value":"/ not alter the behaviour of the [`poll_ready`] method.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266488,"byte_end":266545,"line_start":457,"line_end":457,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266550,"byte_end":266553,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This method can be used to change the [`Response`] type of the service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266558,"byte_end":266632,"line_start":459,"line_end":459,"column_start":5,"column_end":79}},{"value":"/ into a different type. You can use this method to chain along a computation once the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266637,"byte_end":266725,"line_start":460,"line_end":460,"column_start":5,"column_end":93}},{"value":"/ service's response has been resolved.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266730,"byte_end":266771,"line_start":461,"line_end":461,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266776,"byte_end":266779,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`AndThen`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266784,"byte_end":266852,"line_start":463,"line_end":463,"column_start":5,"column_end":73}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266857,"byte_end":266872,"line_start":464,"line_end":464,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266877,"byte_end":266880,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`and_then` combinator] for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266885,"byte_end":266955,"line_start":466,"line_end":466,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266960,"byte_end":266963,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ [`Response`]: crate::Service::Response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":266968,"byte_end":267010,"line_start":468,"line_end":468,"column_start":5,"column_end":47}},{"value":"/ [`poll_ready`]: crate::Service::poll_ready","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267015,"byte_end":267061,"line_start":469,"line_end":469,"column_start":5,"column_end":51}},{"value":"/ [`and_then` combinator]: crate::util::ServiceExt::and_then","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267066,"byte_end":267128,"line_start":470,"line_end":470,"column_start":5,"column_end":67}},{"value":"/ [`AndThen`]: crate::util::AndThen","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267133,"byte_end":267170,"line_start":471,"line_end":471,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267175,"byte_end":267199,"line_start":472,"line_end":472,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3069},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267983,"byte_end":267993,"line_start":491,"line_end":491,"column_start":12,"column_end":22},"name":"map_result","qualname":"<ServiceBuilder<L>>::map_result","value":"pub fn map_result<F>(Self, F)\n-> ServiceBuilder<Stack<crate::util::MapResultLayer<F>, L>>","parent":null,"children":[],"decl_id":null,"docs":" Maps this service's result type (`Result<Self::Response, Self::Error>`)\n to a different value, regardless of whether the future succeeds or\n fails.","sig":null,"attributes":[{"value":"/ Maps this service's result type (`Result<Self::Response, Self::Error>`)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267412,"byte_end":267487,"line_start":478,"line_end":478,"column_start":5,"column_end":80}},{"value":"/ to a different value, regardless of whether the future succeeds or","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267492,"byte_end":267562,"line_start":479,"line_end":479,"column_start":5,"column_end":75}},{"value":"/ fails.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267567,"byte_end":267577,"line_start":480,"line_end":480,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267582,"byte_end":267585,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ This wraps the inner service with an instance of the [`MapResult`]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267590,"byte_end":267660,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ middleware.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267665,"byte_end":267680,"line_start":483,"line_end":483,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267685,"byte_end":267688,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ See the documentation for the [`map_result` combinator] for details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267693,"byte_end":267765,"line_start":485,"line_end":485,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267770,"byte_end":267773,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ [`map_result` combinator]: crate::util::ServiceExt::map_result","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267778,"byte_end":267844,"line_start":487,"line_end":487,"column_start":5,"column_end":71}},{"value":"/ [`MapResult`]: crate::util::MapResult","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267849,"byte_end":267890,"line_start":488,"line_end":488,"column_start":5,"column_end":46}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":267895,"byte_end":267919,"line_start":489,"line_end":489,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268200,"byte_end":268210,"line_start":496,"line_end":496,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ServiceBuilder<L>>::into_inner","value":"pub fn into_inner(Self) -> L","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying `Layer` implementation.\n","sig":null,"attributes":[{"value":"/ Returns the underlying `Layer` implementation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268138,"byte_end":268188,"line_start":495,"line_end":495,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3072},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268474,"byte_end":268481,"line_start":505,"line_end":505,"column_start":12,"column_end":19},"name":"service","qualname":"<ServiceBuilder<L>>::service","value":"pub fn service<S>(&Self, S) -> L::Service where L: Layer<S>","parent":null,"children":[],"decl_id":null,"docs":" Wrap the service `S` with the middleware provided by this\n [`ServiceBuilder`]'s [`Layer`]'s, returning a new [`Service`].","sig":null,"attributes":[{"value":"/ Wrap the service `S` with the middleware provided by this","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268254,"byte_end":268315,"line_start":500,"line_end":500,"column_start":5,"column_end":66}},{"value":"/ [`ServiceBuilder`]'s [`Layer`]'s, returning a new [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268320,"byte_end":268386,"line_start":501,"line_end":501,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268391,"byte_end":268394,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268399,"byte_end":268426,"line_start":503,"line_end":503,"column_start":5,"column_end":32}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268431,"byte_end":268462,"line_start":504,"line_end":504,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270027,"byte_end":270037,"line_start":557,"line_end":557,"column_start":12,"column_end":22},"name":"service_fn","qualname":"<ServiceBuilder<L>>::service_fn","value":"pub fn service_fn<F>(Self, F) -> L::Service where\nL: Layer<crate::util::ServiceFn<F>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap the async function `F` with the middleware provided by this [`ServiceBuilder`]'s\n [`Layer`]s, returning a new [`Service`].","sig":null,"attributes":[{"value":"/ Wrap the async function `F` with the middleware provided by this [`ServiceBuilder`]'s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268600,"byte_end":268689,"line_start":512,"line_end":512,"column_start":5,"column_end":94}},{"value":"/ [`Layer`]s, returning a new [`Service`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268694,"byte_end":268738,"line_start":513,"line_end":513,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268743,"byte_end":268746,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method which is equivalent to calling","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268751,"byte_end":268814,"line_start":515,"line_end":515,"column_start":5,"column_end":68}},{"value":"/ [`ServiceBuilder::service`] with a [`service_fn`], like this:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268819,"byte_end":268884,"line_start":516,"line_end":516,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268889,"byte_end":268892,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268897,"byte_end":268908,"line_start":518,"line_end":518,"column_start":5,"column_end":16}},{"value":"/ # use tower::{ServiceBuilder, service_fn};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268913,"byte_end":268959,"line_start":519,"line_end":519,"column_start":5,"column_end":51}},{"value":"/ # async fn handler_fn(_: ()) -> Result<(), ()> { Ok(()) }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":268964,"byte_end":269025,"line_start":520,"line_end":520,"column_start":5,"column_end":66}},{"value":"/ # let _ = {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269030,"byte_end":269045,"line_start":521,"line_end":521,"column_start":5,"column_end":20}},{"value":"/ ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269050,"byte_end":269075,"line_start":522,"line_end":522,"column_start":5,"column_end":30}},{"value":"/     // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269080,"byte_end":269094,"line_start":523,"line_end":523,"column_start":5,"column_end":19}},{"value":"/     .service(service_fn(handler_fn))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269099,"byte_end":269139,"line_start":524,"line_end":524,"column_start":5,"column_end":45}},{"value":"/ # };","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269144,"byte_end":269152,"line_start":525,"line_end":525,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269157,"byte_end":269164,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269169,"byte_end":269172,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269177,"byte_end":269190,"line_start":528,"line_end":528,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269195,"byte_end":269198,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269203,"byte_end":269214,"line_start":530,"line_end":530,"column_start":5,"column_end":16}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269219,"byte_end":269247,"line_start":531,"line_end":531,"column_start":5,"column_end":33}},{"value":"/ use tower::{ServiceBuilder, ServiceExt, BoxError, service_fn};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269252,"byte_end":269318,"line_start":532,"line_end":532,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269323,"byte_end":269326,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269331,"byte_end":269351,"line_start":534,"line_end":534,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), BoxError> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269356,"byte_end":269403,"line_start":535,"line_end":535,"column_start":5,"column_end":52}},{"value":"/ async fn handle(request: &'static str) -> Result<&'static str, BoxError> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269408,"byte_end":269486,"line_start":536,"line_end":536,"column_start":5,"column_end":83}},{"value":"/    Ok(request)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269491,"byte_end":269509,"line_start":537,"line_end":537,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269514,"byte_end":269519,"line_start":538,"line_end":538,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269524,"byte_end":269527,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ let svc = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269532,"byte_end":269567,"line_start":540,"line_end":540,"column_start":5,"column_end":40}},{"value":"/     .buffer(1024)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269572,"byte_end":269593,"line_start":541,"line_end":541,"column_start":5,"column_end":26}},{"value":"/     .timeout(Duration::from_secs(10))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269598,"byte_end":269639,"line_start":542,"line_end":542,"column_start":5,"column_end":46}},{"value":"/     .service_fn(handle);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269644,"byte_end":269672,"line_start":543,"line_end":543,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269677,"byte_end":269680,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ let response = svc.oneshot(\"foo\").await?;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269685,"byte_end":269730,"line_start":545,"line_end":545,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269735,"byte_end":269738,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(response, \"foo\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269743,"byte_end":269775,"line_start":547,"line_end":547,"column_start":5,"column_end":37}},{"value":"/ # Ok(())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269780,"byte_end":269792,"line_start":548,"line_end":548,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269797,"byte_end":269804,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269809,"byte_end":269816,"line_start":550,"line_end":550,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269821,"byte_end":269824,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269829,"byte_end":269856,"line_start":552,"line_end":552,"column_start":5,"column_end":32}},{"value":"/ [`Service`]: crate::Service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269861,"byte_end":269892,"line_start":553,"line_end":553,"column_start":5,"column_end":36}},{"value":"/ [`service_fn`]: crate::service_fn","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269897,"byte_end":269934,"line_start":554,"line_end":554,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":269939,"byte_end":269963,"line_start":555,"line_end":555,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3076},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271049,"byte_end":271060,"line_start":590,"line_end":590,"column_start":12,"column_end":23},"name":"check_clone","qualname":"<ServiceBuilder<L>>::check_clone","value":"pub fn check_clone(Self) -> Self where Self: Clone","parent":null,"children":[],"decl_id":null,"docs":" Check that the builder implements `Clone`.","sig":null,"attributes":[{"value":"/ Check that the builder implements `Clone`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270188,"byte_end":270234,"line_start":564,"line_end":564,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270239,"byte_end":270242,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ This can be useful when debugging type errors in `ServiceBuilder`s with lots of layers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270247,"byte_end":270338,"line_start":566,"line_end":566,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270343,"byte_end":270346,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ Doesn't actually change the builder but serves as a type check.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270351,"byte_end":270418,"line_start":568,"line_end":568,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270423,"byte_end":270426,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270431,"byte_end":270444,"line_start":570,"line_end":570,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270449,"byte_end":270452,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270457,"byte_end":270468,"line_start":572,"line_end":572,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270473,"byte_end":270503,"line_start":573,"line_end":573,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270508,"byte_end":270511,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ let builder = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270516,"byte_end":270555,"line_start":575,"line_end":575,"column_start":5,"column_end":44}},{"value":"/     // Do something before processing the request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270560,"byte_end":270613,"line_start":576,"line_end":576,"column_start":5,"column_end":58}},{"value":"/     .map_request(|request: String| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270618,"byte_end":270658,"line_start":577,"line_end":577,"column_start":5,"column_end":45}},{"value":"/         println!(\"got request!\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270663,"byte_end":270700,"line_start":578,"line_end":578,"column_start":5,"column_end":42}},{"value":"/         request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270705,"byte_end":270724,"line_start":579,"line_end":579,"column_start":5,"column_end":24}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270729,"byte_end":270739,"line_start":580,"line_end":580,"column_start":5,"column_end":15}},{"value":"/     // Ensure our `ServiceBuilder` can be cloned","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270744,"byte_end":270796,"line_start":581,"line_end":581,"column_start":5,"column_end":57}},{"value":"/     .check_clone()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270801,"byte_end":270823,"line_start":582,"line_end":582,"column_start":5,"column_end":27}},{"value":"/     // Do something after processing the request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270828,"byte_end":270880,"line_start":583,"line_end":583,"column_start":5,"column_end":57}},{"value":"/     .map_response(|response: String| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270885,"byte_end":270927,"line_start":584,"line_end":584,"column_start":5,"column_end":47}},{"value":"/         println!(\"got response!\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270932,"byte_end":270970,"line_start":585,"line_end":585,"column_start":5,"column_end":43}},{"value":"/         response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":270975,"byte_end":270995,"line_start":586,"line_end":586,"column_start":5,"column_end":25}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271000,"byte_end":271011,"line_start":587,"line_end":587,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271016,"byte_end":271023,"line_start":588,"line_end":588,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271028,"byte_end":271037,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3077},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272175,"byte_end":272194,"line_start":627,"line_end":627,"column_start":12,"column_end":31},"name":"check_service_clone","qualname":"<ServiceBuilder<L>>::check_service_clone","value":"pub fn check_service_clone<S>(Self) -> Self where L: Layer<S>,\nL::Service: Clone","parent":null,"children":[],"decl_id":null,"docs":" Check that the builder when given a service of type `S` produces a service that implements\n `Clone`.","sig":null,"attributes":[{"value":"/ Check that the builder when given a service of type `S` produces a service that implements","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271136,"byte_end":271230,"line_start":597,"line_end":597,"column_start":5,"column_end":99}},{"value":"/ `Clone`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271235,"byte_end":271247,"line_start":598,"line_end":598,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271252,"byte_end":271255,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ This can be useful when debugging type errors in `ServiceBuilder`s with lots of layers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271260,"byte_end":271351,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271356,"byte_end":271359,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ Doesn't actually change the builder but serves as a type check.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271364,"byte_end":271431,"line_start":602,"line_end":602,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271436,"byte_end":271439,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271444,"byte_end":271457,"line_start":604,"line_end":604,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271462,"byte_end":271465,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271470,"byte_end":271481,"line_start":606,"line_end":606,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271486,"byte_end":271516,"line_start":607,"line_end":607,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271521,"byte_end":271524,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ # #[derive(Clone)]","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271529,"byte_end":271551,"line_start":609,"line_end":609,"column_start":5,"column_end":27}},{"value":"/ # struct MyService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271556,"byte_end":271579,"line_start":610,"line_end":610,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271584,"byte_end":271589,"line_start":611,"line_end":611,"column_start":5,"column_end":10}},{"value":"/ let builder = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271594,"byte_end":271633,"line_start":612,"line_end":612,"column_start":5,"column_end":44}},{"value":"/     // Do something before processing the request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271638,"byte_end":271691,"line_start":613,"line_end":613,"column_start":5,"column_end":58}},{"value":"/     .map_request(|request: String| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271696,"byte_end":271736,"line_start":614,"line_end":614,"column_start":5,"column_end":45}},{"value":"/         println!(\"got request!\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271741,"byte_end":271778,"line_start":615,"line_end":615,"column_start":5,"column_end":42}},{"value":"/         request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271783,"byte_end":271802,"line_start":616,"line_end":616,"column_start":5,"column_end":24}},{"value":"/     })","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271807,"byte_end":271817,"line_start":617,"line_end":617,"column_start":5,"column_end":15}},{"value":"/     // Ensure that the service produced when given a `MyService` implements","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271822,"byte_end":271901,"line_start":618,"line_end":618,"column_start":5,"column_end":84}},{"value":"/     .check_service_clone::<MyService>()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271906,"byte_end":271949,"line_start":619,"line_end":619,"column_start":5,"column_end":48}},{"value":"/     // Do something after processing the request","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":271954,"byte_end":272006,"line_start":620,"line_end":620,"column_start":5,"column_end":57}},{"value":"/     .map_response(|response: String| {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272011,"byte_end":272053,"line_start":621,"line_end":621,"column_start":5,"column_end":47}},{"value":"/         println!(\"got response!\");","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272058,"byte_end":272096,"line_start":622,"line_end":622,"column_start":5,"column_end":43}},{"value":"/         response","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272101,"byte_end":272121,"line_start":623,"line_end":623,"column_start":5,"column_end":25}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272126,"byte_end":272137,"line_start":624,"line_end":624,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272142,"byte_end":272149,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272154,"byte_end":272163,"line_start":626,"line_end":626,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3079},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274063,"byte_end":274076,"line_start":684,"line_end":684,"column_start":12,"column_end":25},"name":"check_service","qualname":"<ServiceBuilder<L>>::check_service","value":"pub fn check_service<S, T, U, E>(Self) -> Self where L: Layer<S>,\nL::Service: Service<T, Response = U, Error = U>","parent":null,"children":[],"decl_id":null,"docs":" Check that the builder when given a service of type `S` produces a service with the given\n request, response, and error types.","sig":null,"attributes":[{"value":"/ Check that the builder when given a service of type `S` produces a service with the given","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272300,"byte_end":272393,"line_start":635,"line_end":635,"column_start":5,"column_end":98}},{"value":"/ request, response, and error types.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272398,"byte_end":272437,"line_start":636,"line_end":636,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272442,"byte_end":272445,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ This can be useful when debugging type errors in `ServiceBuilder`s with lots of layers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272450,"byte_end":272541,"line_start":638,"line_end":638,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272546,"byte_end":272549,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ Doesn't actually change the builder but serves as a type check.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272554,"byte_end":272621,"line_start":640,"line_end":640,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272626,"byte_end":272629,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272634,"byte_end":272647,"line_start":642,"line_end":642,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272652,"byte_end":272655,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272660,"byte_end":272671,"line_start":644,"line_end":644,"column_start":5,"column_end":16}},{"value":"/ use tower::ServiceBuilder;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272676,"byte_end":272706,"line_start":645,"line_end":645,"column_start":5,"column_end":35}},{"value":"/ use std::task::{Poll, Context};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272711,"byte_end":272746,"line_start":646,"line_end":646,"column_start":5,"column_end":40}},{"value":"/ use tower::{Service, ServiceExt};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272751,"byte_end":272788,"line_start":647,"line_end":647,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272793,"byte_end":272796,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ // An example service","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272801,"byte_end":272826,"line_start":649,"line_end":649,"column_start":5,"column_end":30}},{"value":"/ struct MyService;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272831,"byte_end":272852,"line_start":650,"line_end":650,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272857,"byte_end":272860,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ impl Service<Request> for MyService {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272865,"byte_end":272906,"line_start":652,"line_end":652,"column_start":5,"column_end":46}},{"value":"/   type Response = Response;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272911,"byte_end":272942,"line_start":653,"line_end":653,"column_start":5,"column_end":36}},{"value":"/   type Error = Error;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272947,"byte_end":272972,"line_start":654,"line_end":654,"column_start":5,"column_end":30}},{"value":"/   type Future = futures_util::future::Ready<Result<Response, Error>>;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":272977,"byte_end":273050,"line_start":655,"line_end":655,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273055,"byte_end":273058,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/   fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273063,"byte_end":273150,"line_start":657,"line_end":657,"column_start":5,"column_end":92}},{"value":"/       // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273155,"byte_end":273171,"line_start":658,"line_end":658,"column_start":5,"column_end":21}},{"value":"/       # todo!()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273176,"byte_end":273195,"line_start":659,"line_end":659,"column_start":5,"column_end":24}},{"value":"/   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273200,"byte_end":273207,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273212,"byte_end":273215,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/   fn call(&mut self, request: Request) -> Self::Future {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273220,"byte_end":273280,"line_start":662,"line_end":662,"column_start":5,"column_end":65}},{"value":"/       // ...","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273285,"byte_end":273301,"line_start":663,"line_end":663,"column_start":5,"column_end":21}},{"value":"/       # todo!()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273306,"byte_end":273325,"line_start":664,"line_end":664,"column_start":5,"column_end":24}},{"value":"/   }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273330,"byte_end":273337,"line_start":665,"line_end":665,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273342,"byte_end":273347,"line_start":666,"line_end":666,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273352,"byte_end":273355,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ struct Request;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273360,"byte_end":273379,"line_start":668,"line_end":668,"column_start":5,"column_end":24}},{"value":"/ struct Response;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273384,"byte_end":273404,"line_start":669,"line_end":669,"column_start":5,"column_end":25}},{"value":"/ struct Error;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273409,"byte_end":273426,"line_start":670,"line_end":670,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273431,"byte_end":273434,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ struct WrappedResponse(Response);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273439,"byte_end":273476,"line_start":672,"line_end":672,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273481,"byte_end":273484,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let builder = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273489,"byte_end":273528,"line_start":674,"line_end":674,"column_start":5,"column_end":44}},{"value":"/     // At this point in the builder if given a `MyService` it produces a service that","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273533,"byte_end":273622,"line_start":675,"line_end":675,"column_start":5,"column_end":94}},{"value":"/     // accepts `Request`s, produces `Response`s, and fails with `Error`s","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273627,"byte_end":273703,"line_start":676,"line_end":676,"column_start":5,"column_end":81}},{"value":"/     .check_service::<MyService, Request, Response, Error>()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273708,"byte_end":273771,"line_start":677,"line_end":677,"column_start":5,"column_end":68}},{"value":"/     // Wrap responses in `WrappedResponse`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273776,"byte_end":273822,"line_start":678,"line_end":678,"column_start":5,"column_end":51}},{"value":"/     .map_response(|response: Response| WrappedResponse(response))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273827,"byte_end":273896,"line_start":679,"line_end":679,"column_start":5,"column_end":74}},{"value":"/     // Now the response type will be `WrappedResponse`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273901,"byte_end":273959,"line_start":680,"line_end":680,"column_start":5,"column_end":63}},{"value":"/     .check_service::<MyService, _, WrappedResponse, _>();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":273964,"byte_end":274025,"line_start":681,"line_end":681,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274030,"byte_end":274037,"line_start":682,"line_end":682,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274042,"byte_end":274051,"line_start":683,"line_end":683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3084},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":275300,"byte_end":275305,"line_start":724,"line_end":724,"column_start":12,"column_end":17},"name":"boxed","qualname":"<ServiceBuilder<L>>::boxed","value":"pub fn boxed<S, R>(Self)\n->\n    ServiceBuilder<Stack<tower_layer::LayerFn<fn(: L::Service)\n                                                  ->\n                                                      crate::util::BoxService<R,\n                                                                              <L::Service\n                                                                              as\n                                                                              Service<R>>::Response,\n                                                                              <L::Service\n                                                                              as\n                                                                              Service<R>>::Error>>,\n                         L>> where L: Layer<S>, L::Service: Service<R> +\nSend + 'static, <L::Service as Service<R>>::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" This wraps the inner service with the [`Layer`] returned by [`BoxService::layer()`].","sig":null,"attributes":[{"value":"/ This wraps the inner service with the [`Layer`] returned by [`BoxService::layer()`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274221,"byte_end":274309,"line_start":692,"line_end":692,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274314,"byte_end":274317,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ See that method for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274322,"byte_end":274359,"line_start":694,"line_end":694,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274364,"byte_end":274367,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274372,"byte_end":274385,"line_start":696,"line_end":696,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274390,"byte_end":274393,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274398,"byte_end":274405,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/ use tower::{Service, ServiceBuilder, BoxError, util::BoxService};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274410,"byte_end":274479,"line_start":699,"line_end":699,"column_start":5,"column_end":74}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274484,"byte_end":274512,"line_start":700,"line_end":700,"column_start":5,"column_end":33}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274517,"byte_end":274522,"line_start":701,"line_end":701,"column_start":5,"column_end":10}},{"value":"/ # struct Request;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274527,"byte_end":274548,"line_start":702,"line_end":702,"column_start":5,"column_end":26}},{"value":"/ # struct Response;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274553,"byte_end":274575,"line_start":703,"line_end":703,"column_start":5,"column_end":27}},{"value":"/ # impl Response {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274580,"byte_end":274601,"line_start":704,"line_end":704,"column_start":5,"column_end":26}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274606,"byte_end":274641,"line_start":705,"line_end":705,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274646,"byte_end":274653,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274658,"byte_end":274661,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ let service: BoxService<Request, Response, BoxError> = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274666,"byte_end":274746,"line_start":708,"line_end":708,"column_start":5,"column_end":85}},{"value":"/     .boxed()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274751,"byte_end":274767,"line_start":709,"line_end":709,"column_start":5,"column_end":21}},{"value":"/     .load_shed()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274772,"byte_end":274792,"line_start":710,"line_end":710,"column_start":5,"column_end":25}},{"value":"/     .concurrency_limit(64)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274797,"byte_end":274827,"line_start":711,"line_end":711,"column_start":5,"column_end":35}},{"value":"/     .timeout(Duration::from_secs(10))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274832,"byte_end":274873,"line_start":712,"line_end":712,"column_start":5,"column_end":46}},{"value":"/     .service_fn(|req: Request| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274878,"byte_end":274920,"line_start":713,"line_end":713,"column_start":5,"column_end":47}},{"value":"/         Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274925,"byte_end":274971,"line_start":714,"line_end":714,"column_start":5,"column_end":51}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274976,"byte_end":274987,"line_start":715,"line_end":715,"column_start":5,"column_end":16}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":274992,"byte_end":275036,"line_start":716,"line_end":716,"column_start":5,"column_end":49}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":275041,"byte_end":275083,"line_start":717,"line_end":717,"column_start":5,"column_end":47}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":275088,"byte_end":275121,"line_start":718,"line_end":718,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":275126,"byte_end":275133,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":275138,"byte_end":275141,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ [`BoxService::layer()`]: crate::util::BoxService::layer()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":275146,"byte_end":275207,"line_start":721,"line_end":721,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":275212,"byte_end":275236,"line_start":722,"line_end":722,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3087},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277368,"byte_end":277379,"line_start":788,"line_end":788,"column_start":12,"column_end":23},"name":"boxed_clone","qualname":"<ServiceBuilder<L>>::boxed_clone","value":"pub fn boxed_clone<S, R>(Self)\n->\n    ServiceBuilder<Stack<tower_layer::LayerFn<fn(: L::Service)\n                                                  ->\n                                                      crate::util::BoxCloneService<R,\n                                                                                   <L::Service\n                                                                                   as\n                                                                                   Service<R>>::Response,\n                                                                                   <L::Service\n                                                                                   as\n                                                                                   Service<R>>::Error>>,\n                         L>> where L: Layer<S>, L::Service: Service<R> +\nClone + Send + 'static, <L::Service as Service<R>>::Future: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" This wraps the inner service with the [`Layer`] returned by [`BoxCloneService::layer()`].","sig":null,"attributes":[{"value":"/ This wraps the inner service with the [`Layer`] returned by [`BoxCloneService::layer()`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":275911,"byte_end":276004,"line_start":748,"line_end":748,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276009,"byte_end":276012,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ This is similar to the [`boxed`] method, but it requires that `Self` implement","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276017,"byte_end":276099,"line_start":750,"line_end":750,"column_start":5,"column_end":87}},{"value":"/ [`Clone`], and the returned boxed service implements [`Clone`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276104,"byte_end":276171,"line_start":751,"line_end":751,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276176,"byte_end":276179,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ See [`BoxCloneService`] for more details.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276184,"byte_end":276229,"line_start":753,"line_end":753,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276234,"byte_end":276237,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276242,"byte_end":276255,"line_start":755,"line_end":755,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276260,"byte_end":276263,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276268,"byte_end":276275,"line_start":757,"line_end":757,"column_start":5,"column_end":12}},{"value":"/ use tower::{Service, ServiceBuilder, BoxError, util::BoxCloneService};","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276280,"byte_end":276354,"line_start":758,"line_end":758,"column_start":5,"column_end":79}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276359,"byte_end":276387,"line_start":759,"line_end":759,"column_start":5,"column_end":33}},{"value":"/ #","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276392,"byte_end":276397,"line_start":760,"line_end":760,"column_start":5,"column_end":10}},{"value":"/ # struct Request;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276402,"byte_end":276423,"line_start":761,"line_end":761,"column_start":5,"column_end":26}},{"value":"/ # struct Response;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276428,"byte_end":276450,"line_start":762,"line_end":762,"column_start":5,"column_end":27}},{"value":"/ # impl Response {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276455,"byte_end":276476,"line_start":763,"line_end":763,"column_start":5,"column_end":26}},{"value":"/ #     fn new() -> Self { Self }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276481,"byte_end":276516,"line_start":764,"line_end":764,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276521,"byte_end":276528,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276533,"byte_end":276536,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ let service: BoxCloneService<Request, Response, BoxError> = ServiceBuilder::new()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276541,"byte_end":276626,"line_start":767,"line_end":767,"column_start":5,"column_end":90}},{"value":"/     .boxed_clone()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276631,"byte_end":276653,"line_start":768,"line_end":768,"column_start":5,"column_end":27}},{"value":"/     .load_shed()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276658,"byte_end":276678,"line_start":769,"line_end":769,"column_start":5,"column_end":25}},{"value":"/     .concurrency_limit(64)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276683,"byte_end":276713,"line_start":770,"line_end":770,"column_start":5,"column_end":35}},{"value":"/     .timeout(Duration::from_secs(10))","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276718,"byte_end":276759,"line_start":771,"line_end":771,"column_start":5,"column_end":46}},{"value":"/     .service_fn(|req: Request| async {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276764,"byte_end":276806,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/         Ok::<_, BoxError>(Response::new())","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276811,"byte_end":276857,"line_start":773,"line_end":773,"column_start":5,"column_end":51}},{"value":"/     });","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276862,"byte_end":276873,"line_start":774,"line_end":774,"column_start":5,"column_end":16}},{"value":"/ # let service = assert_service(service);","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276878,"byte_end":276922,"line_start":775,"line_end":775,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276927,"byte_end":276930,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ // The boxed service can still be cloned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276935,"byte_end":276980,"line_start":777,"line_end":777,"column_start":5,"column_end":50}},{"value":"/ service.clone();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":276985,"byte_end":277005,"line_start":778,"line_end":778,"column_start":5,"column_end":25}},{"value":"/ # fn assert_service<S, R>(svc: S) -> S","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277010,"byte_end":277052,"line_start":779,"line_end":779,"column_start":5,"column_end":47}},{"value":"/ # where S: Service<R> { svc }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277057,"byte_end":277090,"line_start":780,"line_end":780,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277095,"byte_end":277102,"line_start":781,"line_end":781,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277107,"byte_end":277110,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ [`BoxCloneService::layer()`]: crate::util::BoxCloneService::layer()","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277115,"byte_end":277186,"line_start":783,"line_end":783,"column_start":5,"column_end":76}},{"value":"/ [`BoxCloneService`]: crate::util::BoxCloneService","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277191,"byte_end":277244,"line_start":784,"line_end":784,"column_start":5,"column_end":58}},{"value":"/ [`boxed`]: Self::boxed","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277249,"byte_end":277275,"line_start":785,"line_end":785,"column_start":5,"column_end":31}},{"value":"cfg(feature = \"util\")","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":277280,"byte_end":277304,"line_start":786,"line_end":786,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":3098},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"layer","qualname":"::layer","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","parent":null,"children":[{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3103},{"krate":0,"index":3106},{"krate":0,"index":3109}],"decl_id":null,"docs":" A collection of [`Layer`] based tower services","sig":null,"attributes":[{"value":"/ A collection of [`Layer`] based tower services","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278385,"byte_end":278435,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278436,"byte_end":278439,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278440,"byte_end":278467,"line_start":3,"line_end":3,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":3109},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278682,"byte_end":278686,"line_start":12,"line_end":12,"column_start":9,"column_end":13},"name":"util","qualname":"::layer::util","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","parent":null,"children":[{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3114}],"decl_id":null,"docs":" Utilities for combining layers","sig":null,"attributes":[{"value":"/ Utilities for combining layers","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278519,"byte_end":278553,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278554,"byte_end":278557,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`Identity`]: crate::layer::util::Identity","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278558,"byte_end":278604,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/ [`Layer`]: crate::Layer","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278605,"byte_end":278632,"line_start":10,"line_end":10,"column_start":1,"column_end":28}},{"value":"/ [`Stack`]: crate::layer::util::Stack","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/layer.rs","byte_start":278633,"byte_end":278673,"line_start":11,"line_end":11,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":3137},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":9200,"byte_end":9206,"line_start":231,"line_end":231,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::sealed::Sealed","value":"Sealed<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3139},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":9265,"byte_end":9273,"line_start":235,"line_end":235,"column_start":10,"column_end":18},"name":"BoxError","qualname":"::BoxError","value":"Box<dyn std::error::Error + Send + Sync>","parent":null,"children":[],"decl_id":null,"docs":" Alias for a type-erased error type.\n","sig":null,"attributes":[{"value":"/ Alias for a type-erased error type.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":9216,"byte_end":9255,"line_start":234,"line_end":234,"column_start":1,"column_end":40}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13452,"byte_end":13460,"line_start":11,"line_end":11,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13621,"byte_end":13629,"line_start":17,"line_end":17,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17006,"byte_end":17022,"line_start":25,"line_end":25,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17209,"byte_end":17225,"line_start":34,"line_end":34,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17315,"byte_end":17331,"line_start":40,"line_end":40,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17466,"byte_end":17482,"line_start":48,"line_end":48,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17668,"byte_end":17684,"line_start":56,"line_end":56,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":19070,"byte_end":19081,"line_start":43,"line_end":43,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":19316,"byte_end":19327,"line_start":53,"line_end":53,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":19536,"byte_end":19547,"line_start":65,"line_end":65,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":20250,"byte_end":20261,"line_start":89,"line_end":89,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":20508,"byte_end":20518,"line_start":99,"line_end":99,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":21061,"byte_end":21071,"line_start":117,"line_end":117,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22679,"byte_end":22686,"line_start":47,"line_end":47,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":23450,"byte_end":23457,"line_start":80,"line_end":80,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":24492,"byte_end":24499,"line_start":116,"line_end":116,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":28328,"byte_end":28335,"line_start":222,"line_end":222,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":31219,"byte_end":31233,"line_start":290,"line_end":290,"column_start":42,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":32082,"byte_end":32096,"line_start":317,"line_end":317,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":34899,"byte_end":34913,"line_start":65,"line_end":65,"column_start":42,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":35454,"byte_end":35468,"line_start":82,"line_end":82,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39252,"byte_end":39259,"line_start":185,"line_end":185,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39453,"byte_end":39460,"line_start":197,"line_end":197,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":43661,"byte_end":43665,"line_start":314,"line_end":314,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44167,"byte_end":44171,"line_start":331,"line_end":331,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44969,"byte_end":44973,"line_start":353,"line_end":353,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":48049,"byte_end":48066,"line_start":434,"line_end":434,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":48184,"byte_end":48201,"line_start":440,"line_end":440,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":48368,"byte_end":48385,"line_start":447,"line_end":447,"column_start":59,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50740,"byte_end":50752,"line_start":22,"line_end":22,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51112,"byte_end":51124,"line_start":36,"line_end":36,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51287,"byte_end":51299,"line_start":42,"line_end":42,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51441,"byte_end":51447,"line_start":50,"line_end":50,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51539,"byte_end":51545,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51683,"byte_end":51689,"line_start":62,"line_end":62,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51850,"byte_end":51856,"line_start":68,"line_end":68,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":52680,"byte_end":52694,"line_start":41,"line_end":41,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":53028,"byte_end":53042,"line_start":55,"line_end":55,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54433,"byte_end":54444,"line_start":17,"line_end":17,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55630,"byte_end":55641,"line_start":44,"line_end":44,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55972,"byte_end":55983,"line_start":58,"line_end":58,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":56188,"byte_end":56199,"line_start":66,"line_end":66,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":56358,"byte_end":56369,"line_start":75,"line_end":75,"column_start":24,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58424,"byte_end":58430,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":60990,"byte_end":60996,"line_start":108,"line_end":108,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":63199,"byte_end":63205,"line_start":169,"line_end":169,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":65029,"byte_end":65035,"line_start":51,"line_end":51,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":65495,"byte_end":65501,"line_start":67,"line_end":67,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":69472,"byte_end":69478,"line_start":168,"line_end":168,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":72457,"byte_end":72463,"line_start":239,"line_end":239,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":72743,"byte_end":72749,"line_start":250,"line_end":250,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/error.rs","byte_start":76180,"byte_end":76185,"line_start":6,"line_end":6,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/error.rs","byte_start":76294,"byte_end":76299,"line_start":12,"line_end":12,"column_start":16,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/list.rs","byte_start":76923,"byte_end":76934,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/list.rs","byte_start":77220,"byte_end":77231,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75443,"byte_end":75444,"line_start":76,"line_end":76,"column_start":53,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75553,"byte_end":75554,"line_start":83,"line_end":83,"column_start":39,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":78876,"byte_end":78890,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":79058,"byte_end":79072,"line_start":32,"line_end":32,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79586,"byte_end":79607,"line_start":14,"line_end":14,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79761,"byte_end":79782,"line_start":21,"line_end":21,"column_start":22,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80396,"byte_end":80423,"line_start":42,"line_end":42,"column_start":6,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80800,"byte_end":80827,"line_start":54,"line_end":54,"column_start":22,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81711,"byte_end":81727,"line_start":26,"line_end":26,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":82571,"byte_end":82587,"line_start":57,"line_end":57,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":83773,"byte_end":83789,"line_start":96,"line_end":96,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":84300,"byte_end":84316,"line_start":111,"line_end":111,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":84919,"byte_end":84933,"line_start":12,"line_end":12,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":85125,"byte_end":85139,"line_start":20,"line_end":20,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85434,"byte_end":85438,"line_start":10,"line_end":10,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":86391,"byte_end":86400,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":87379,"byte_end":87388,"line_start":64,"line_end":64,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":89366,"byte_end":89375,"line_start":123,"line_end":123,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95545,"byte_end":95566,"line_start":60,"line_end":60,"column_start":15,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95878,"byte_end":95899,"line_start":71,"line_end":71,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":96390,"byte_end":96408,"line_start":88,"line_end":88,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97190,"byte_end":97198,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97401,"byte_end":97409,"line_start":35,"line_end":35,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97534,"byte_end":97542,"line_start":43,"line_end":43,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":98113,"byte_end":98121,"line_start":64,"line_end":64,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1080},{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101705,"byte_end":101713,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":102330,"byte_end":102338,"line_start":111,"line_end":111,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":102904,"byte_end":102912,"line_start":133,"line_end":133,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":103514,"byte_end":103522,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":103773,"byte_end":103789,"line_start":164,"line_end":164,"column_start":12,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1171}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":104616,"byte_end":104632,"line_start":189,"line_end":189,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":105479,"byte_end":105490,"line_start":218,"line_end":218,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":107796,"byte_end":107802,"line_start":287,"line_end":287,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113082,"byte_end":113097,"line_start":52,"line_end":52,"column_start":12,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113478,"byte_end":113493,"line_start":67,"line_end":67,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113716,"byte_end":113731,"line_start":76,"line_end":76,"column_start":42,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":114362,"byte_end":114385,"line_start":101,"line_end":101,"column_start":12,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":114825,"byte_end":114848,"line_start":117,"line_end":117,"column_start":23,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":115535,"byte_end":115543,"line_start":141,"line_end":141,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118974,"byte_end":118975,"line_start":29,"line_end":29,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":119048,"byte_end":119049,"line_start":31,"line_end":31,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128462,"byte_end":128468,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128619,"byte_end":128625,"line_start":83,"line_end":83,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123657,"byte_end":123658,"line_start":132,"line_end":132,"column_start":59,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123794,"byte_end":123795,"line_start":139,"line_end":139,"column_start":62,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124542,"byte_end":124553,"line_start":169,"line_end":169,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124755,"byte_end":124766,"line_start":181,"line_end":181,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125025,"byte_end":125036,"line_start":192,"line_end":192,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125759,"byte_end":125768,"line_start":222,"line_end":222,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":126029,"byte_end":126038,"line_start":233,"line_end":233,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":133789,"byte_end":133799,"line_start":76,"line_end":76,"column_start":38,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":134369,"byte_end":134379,"line_start":100,"line_end":100,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":134669,"byte_end":134679,"line_start":114,"line_end":114,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135136,"byte_end":135146,"line_start":133,"line_end":133,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137668,"byte_end":137678,"line_start":209,"line_end":209,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145718,"byte_end":145725,"line_start":404,"line_end":404,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145768,"byte_end":145775,"line_start":406,"line_end":406,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":147017,"byte_end":147024,"line_start":440,"line_end":440,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147634,"byte_end":147640,"line_start":9,"line_end":9,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147864,"byte_end":147870,"line_start":18,"line_end":18,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":148023,"byte_end":148029,"line_start":24,"line_end":24,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1621}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":149980,"byte_end":149987,"line_start":9,"line_end":9,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1635}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":150106,"byte_end":150113,"line_start":16,"line_end":16,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":150245,"byte_end":150252,"line_start":22,"line_end":22,"column_start":23,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/future.rs","byte_start":150687,"byte_end":150701,"line_start":25,"line_end":25,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/future.rs","byte_start":150843,"byte_end":150857,"line_start":31,"line_end":31,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/layer.rs","byte_start":151711,"byte_end":151723,"line_start":11,"line_end":11,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/layer.rs","byte_start":151874,"byte_end":151886,"line_start":18,"line_end":18,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1686},{"krate":0,"index":1687}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148653,"byte_end":148660,"line_start":26,"line_end":26,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":149181,"byte_end":149188,"line_start":48,"line_end":48,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188182,"byte_end":188189,"line_start":19,"line_end":19,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188774,"byte_end":188787,"line_start":41,"line_end":41,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188975,"byte_end":188988,"line_start":47,"line_end":47,"column_start":48,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1768}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189224,"byte_end":189237,"line_start":55,"line_end":55,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189729,"byte_end":189736,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190191,"byte_end":190198,"line_start":91,"line_end":91,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190756,"byte_end":190768,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190911,"byte_end":190923,"line_start":118,"line_end":118,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1796},{"krate":0,"index":1797}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194396,"byte_end":194404,"line_start":58,"line_end":58,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194937,"byte_end":194945,"line_start":77,"line_end":77,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":195121,"byte_end":195129,"line_start":85,"line_end":85,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":195286,"byte_end":195294,"line_start":93,"line_end":93,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196397,"byte_end":196407,"line_start":32,"line_end":32,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1896},{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":197080,"byte_end":197090,"line_start":56,"line_end":56,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":197425,"byte_end":197435,"line_start":70,"line_end":70,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198191,"byte_end":198207,"line_start":27,"line_end":27,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1955},{"krate":0,"index":1957}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198829,"byte_end":198845,"line_start":50,"line_end":50,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":199192,"byte_end":199208,"line_start":64,"line_end":64,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1972}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":199382,"byte_end":199393,"line_start":70,"line_end":70,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201705,"byte_end":201720,"line_start":65,"line_end":65,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2029},{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202418,"byte_end":202433,"line_start":89,"line_end":89,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202797,"byte_end":202812,"line_start":105,"line_end":105,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2047}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":203139,"byte_end":203140,"line_start":120,"line_end":120,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":203404,"byte_end":203419,"line_start":132,"line_end":132,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2059}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/common.rs","byte_start":204597,"byte_end":204604,"line_start":30,"line_end":30,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/common.rs","byte_start":205567,"byte_end":205574,"line_start":66,"line_end":66,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2106},{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211016,"byte_end":211023,"line_start":98,"line_end":98,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212694,"byte_end":212701,"line_start":154,"line_end":154,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2148},{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":213036,"byte_end":213050,"line_start":167,"line_end":167,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214334,"byte_end":214350,"line_start":35,"line_end":35,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215510,"byte_end":215526,"line_start":75,"line_end":75,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2194},{"krate":0,"index":2195}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215861,"byte_end":215877,"line_start":88,"line_end":88,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216986,"byte_end":216992,"line_start":29,"line_end":29,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2244}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":217883,"byte_end":217889,"line_start":59,"line_end":59,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2252},{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":218436,"byte_end":218442,"line_start":76,"line_end":76,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2258},{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220831,"byte_end":220844,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2289}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222697,"byte_end":222710,"line_start":111,"line_end":111,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2293}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":223037,"byte_end":223042,"line_start":128,"line_end":128,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2297}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":223480,"byte_end":223493,"line_start":143,"line_end":143,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":225949,"byte_end":225955,"line_start":16,"line_end":16,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2335}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226569,"byte_end":226575,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2339},{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":227028,"byte_end":227034,"line_start":59,"line_end":59,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":227551,"byte_end":227562,"line_start":79,"line_end":79,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2353}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":227697,"byte_end":227708,"line_start":86,"line_end":86,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2357},{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228218,"byte_end":228228,"line_start":15,"line_end":15,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2379}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228518,"byte_end":228528,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2383},{"krate":0,"index":2384}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228992,"byte_end":229002,"line_start":43,"line_end":43,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2390},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229576,"byte_end":229591,"line_start":71,"line_end":71,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2397}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229734,"byte_end":229749,"line_start":78,"line_end":78,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2401},{"krate":0,"index":2402}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230322,"byte_end":230333,"line_start":16,"line_end":16,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2430}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230974,"byte_end":230985,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2434},{"krate":0,"index":2435}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231469,"byte_end":231480,"line_start":59,"line_end":59,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2445}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231988,"byte_end":232004,"line_start":79,"line_end":79,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2448}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":232155,"byte_end":232171,"line_start":86,"line_end":86,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2452},{"krate":0,"index":2453}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":232733,"byte_end":232742,"line_start":16,"line_end":16,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2481}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233367,"byte_end":233376,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2485},{"krate":0,"index":2486}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233857,"byte_end":233866,"line_start":59,"line_end":59,"column_start":59,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":234444,"byte_end":234458,"line_start":80,"line_end":80,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":234605,"byte_end":234619,"line_start":87,"line_end":87,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2504},{"krate":0,"index":2505}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235146,"byte_end":235155,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235960,"byte_end":235969,"line_start":49,"line_end":49,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2546}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236435,"byte_end":236444,"line_start":69,"line_end":69,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2550}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236884,"byte_end":236898,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2553}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":237035,"byte_end":237049,"line_start":96,"line_end":96,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2557},{"krate":0,"index":2558}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":237239,"byte_end":237253,"line_start":107,"line_end":107,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2561}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":238263,"byte_end":238268,"line_start":37,"line_end":37,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2592},{"krate":0,"index":2593}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":238481,"byte_end":238486,"line_start":47,"line_end":47,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2597}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":239135,"byte_end":239142,"line_start":69,"line_end":69,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2601}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":239364,"byte_end":239371,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2605},{"krate":0,"index":2606}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":242023,"byte_end":242027,"line_start":9,"line_end":9,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2617}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":242112,"byte_end":242116,"line_start":15,"line_end":15,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2619}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":242239,"byte_end":242243,"line_start":21,"line_end":21,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/future.rs","byte_start":242633,"byte_end":242647,"line_start":21,"line_end":21,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2647}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/future.rs","byte_start":242783,"byte_end":242797,"line_start":27,"line_end":27,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2652},{"krate":0,"index":2653}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240813,"byte_end":240821,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2669}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":241079,"byte_end":241087,"line_start":35,"line_end":35,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243823,"byte_end":243835,"line_start":22,"line_end":22,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243869,"byte_end":243881,"line_start":24,"line_end":24,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2719}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244116,"byte_end":244128,"line_start":37,"line_end":37,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2723},{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244554,"byte_end":244566,"line_start":54,"line_end":54,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2728}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245560,"byte_end":245565,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245607,"byte_end":245612,"line_start":83,"line_end":83,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2747}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245816,"byte_end":245821,"line_start":93,"line_end":93,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2752},{"krate":0,"index":2753}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":246087,"byte_end":246092,"line_start":104,"line_end":104,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2758}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247609,"byte_end":247618,"line_start":58,"line_end":58,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2780}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247874,"byte_end":247883,"line_start":66,"line_end":66,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248573,"byte_end":248577,"line_start":19,"line_end":19,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2823}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249012,"byte_end":249016,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2827},{"krate":0,"index":2828}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249644,"byte_end":249648,"line_start":62,"line_end":62,"column_start":64,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":250253,"byte_end":250262,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2843}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":250399,"byte_end":250408,"line_start":91,"line_end":91,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2847},{"krate":0,"index":2848}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186887,"byte_end":186888,"line_start":1055,"line_end":1055,"column_start":50,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254185,"byte_end":254199,"line_start":110,"line_end":110,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3039}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254273,"byte_end":254287,"line_start":116,"line_end":116,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3041}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254456,"byte_end":254470,"line_start":125,"line_end":125,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3044},{"krate":0,"index":3046},{"krate":0,"index":3048},{"krate":0,"index":3050},{"krate":0,"index":3052},{"krate":0,"index":3053},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":3059},{"krate":0,"index":3061},{"krate":0,"index":3063},{"krate":0,"index":3065},{"krate":0,"index":3067},{"krate":0,"index":3069},{"krate":0,"index":3071},{"krate":0,"index":3072},{"krate":0,"index":3074},{"krate":0,"index":3076},{"krate":0,"index":3077},{"krate":0,"index":3079},{"krate":0,"index":3084},{"krate":0,"index":3087}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":278036,"byte_end":278050,"line_start":813,"line_end":813,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3092}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":278220,"byte_end":278234,"line_start":819,"line_end":819,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3096},{"krate":0,"index":3097}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7278,"byte_end":7285,"line_start":162,"line_end":162,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13161,"byte_end":13166,"line_start":59,"line_end":59,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13176,"byte_end":13179,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/mod.rs","byte_start":13189,"byte_end":13193,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":278}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7372,"byte_end":7378,"line_start":165,"line_end":165,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":393}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50153,"byte_end":50158,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":394}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/mod.rs","byte_start":50168,"byte_end":50174,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":421}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7469,"byte_end":7477,"line_start":168,"line_end":168,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":653}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7745,"byte_end":7750,"line_start":177,"line_end":177,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":749}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":77881,"byte_end":77892,"line_start":3,"line_end":3,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":750}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/mod.rs","byte_start":78133,"byte_end":78139,"line_start":3,"line_end":3,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":751}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/mod.rs","byte_start":77902,"byte_end":77906,"line_start":4,"line_end":4,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":874}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":7833,"byte_end":7837,"line_start":180,"line_end":180,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":980}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92365,"byte_end":92375,"line_start":62,"line_end":62,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":981}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92399,"byte_end":92408,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1083}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/mod.rs","byte_start":92418,"byte_end":92434,"line_start":65,"line_end":65,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1186}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8023,"byte_end":8027,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1292}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8124,"byte_end":8135,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1475}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/mod.rs","byte_start":130371,"byte_end":130376,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1476}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/mod.rs","byte_start":130386,"byte_end":130391,"line_start":4,"line_end":4,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1607}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8614,"byte_end":8621,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1625}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148302,"byte_end":148307,"line_start":6,"line_end":6,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1626}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148317,"byte_end":148323,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1639}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8704,"byte_end":8708,"line_start":208,"line_end":208,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1721}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240377,"byte_end":240382,"line_start":6,"line_end":6,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2608}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240427,"byte_end":240433,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2621}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8719,"byte_end":8726,"line_start":210,"line_end":210,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3021}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/lib.rs","byte_start":8736,"byte_end":8741,"line_start":211,"line_end":211,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3098}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13452,"byte_end":13460,"line_start":11,"line_end":11,"column_start":23,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3140},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/error.rs","byte_start":13621,"byte_end":13629,"line_start":17,"line_end":17,"column_start":28,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3140},"to":{"krate":1,"index":2339}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17006,"byte_end":17022,"line_start":25,"line_end":25,"column_start":14,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":29},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17209,"byte_end":17225,"line_start":34,"line_end":34,"column_start":26,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17315,"byte_end":17331,"line_start":40,"line_end":40,"column_start":24,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17466,"byte_end":17482,"line_start":48,"line_end":48,"column_start":27,"column_end":43},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":29},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/layer.rs","byte_start":17668,"byte_end":17684,"line_start":56,"line_end":56,"column_start":29,"column_end":45},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":19070,"byte_end":19081,"line_start":43,"line_end":43,"column_start":14,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":93},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":19316,"byte_end":19327,"line_start":53,"line_end":53,"column_start":24,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":93},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":19536,"byte_end":19547,"line_start":65,"line_end":65,"column_start":42,"column_end":53},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":93},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":20250,"byte_end":20261,"line_start":89,"line_end":89,"column_start":29,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":93},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":20508,"byte_end":20518,"line_start":99,"line_end":99,"column_start":31,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3145},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/make.rs","byte_start":21061,"byte_end":21071,"line_start":117,"line_end":117,"column_start":29,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3145},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":22679,"byte_end":22686,"line_start":47,"line_end":47,"column_start":39,"column_end":46},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":210},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":23450,"byte_end":23457,"line_start":80,"line_end":80,"column_start":14,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":24492,"byte_end":24499,"line_start":116,"line_end":116,"column_start":14,"column_end":21},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":28328,"byte_end":28335,"line_start":222,"line_end":222,"column_start":31,"column_end":38},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":210},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":31219,"byte_end":31233,"line_start":290,"line_end":290,"column_start":42,"column_end":56},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3190},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/p2c/service.rs","byte_start":32082,"byte_end":32096,"line_start":317,"line_end":317,"column_start":32,"column_end":46},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3190},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":34899,"byte_end":34913,"line_start":65,"line_end":65,"column_start":42,"column_end":56},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3477},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":35454,"byte_end":35468,"line_start":82,"line_end":82,"column_start":38,"column_end":52},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3477},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39252,"byte_end":39259,"line_start":185,"line_end":185,"column_start":18,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":39453,"byte_end":39460,"line_start":197,"line_end":197,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":43661,"byte_end":43665,"line_start":314,"line_end":314,"column_start":42,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":349},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44167,"byte_end":44171,"line_start":331,"line_end":331,"column_start":27,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":44969,"byte_end":44973,"line_start":353,"line_end":353,"column_start":40,"column_end":44},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":349},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":48049,"byte_end":48066,"line_start":434,"line_end":434,"column_start":20,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3799},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":48184,"byte_end":48201,"line_start":440,"line_end":440,"column_start":26,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3799},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/balance/pool/mod.rs","byte_start":48368,"byte_end":48385,"line_start":447,"line_end":447,"column_start":59,"column_end":76},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3799},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":50740,"byte_end":50752,"line_start":22,"line_end":22,"column_start":6,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51112,"byte_end":51124,"line_start":36,"line_end":36,"column_start":23,"column_end":35},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3807},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51287,"byte_end":51299,"line_start":42,"line_end":42,"column_start":28,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3807},"to":{"krate":1,"index":2339}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51441,"byte_end":51447,"line_start":50,"line_end":50,"column_start":6,"column_end":12},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51539,"byte_end":51545,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51683,"byte_end":51689,"line_start":62,"line_end":62,"column_start":23,"column_end":29},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/error.rs","byte_start":51850,"byte_end":51856,"line_start":68,"line_end":68,"column_start":28,"column_end":34},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":2339}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":52680,"byte_end":52694,"line_start":41,"line_end":41,"column_start":9,"column_end":23},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/future.rs","byte_start":53028,"byte_end":53042,"line_start":55,"line_end":55,"column_start":26,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3811},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":54433,"byte_end":54444,"line_start":17,"line_end":17,"column_start":15,"column_end":26},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55630,"byte_end":55641,"line_start":44,"line_end":44,"column_start":31,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":476},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":55972,"byte_end":55983,"line_start":58,"line_end":58,"column_start":30,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":476},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":56188,"byte_end":56199,"line_start":66,"line_end":66,"column_start":25,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":476},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/layer.rs","byte_start":56358,"byte_end":56369,"line_start":75,"line_end":75,"column_start":24,"column_end":35},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":476},"to":{"krate":2,"index":3014}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":58424,"byte_end":58430,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3898},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":60990,"byte_end":60996,"line_start":108,"line_end":108,"column_start":39,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3898},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/service.rs","byte_start":63199,"byte_end":63205,"line_start":169,"line_end":169,"column_start":28,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3898},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":65029,"byte_end":65035,"line_start":51,"line_end":51,"column_start":18,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3935},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":65495,"byte_end":65501,"line_start":67,"line_end":67,"column_start":18,"column_end":24},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3935},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":69472,"byte_end":69478,"line_start":168,"line_end":168,"column_start":29,"column_end":35},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3935},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":72457,"byte_end":72463,"line_start":239,"line_end":239,"column_start":6,"column_end":12},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":4006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/buffer/worker.rs","byte_start":72743,"byte_end":72749,"line_start":250,"line_end":250,"column_start":16,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":4006},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/error.rs","byte_start":76180,"byte_end":76185,"line_start":6,"line_end":6,"column_start":23,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4348},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/error.rs","byte_start":76294,"byte_end":76299,"line_start":12,"line_end":12,"column_start":16,"column_end":21},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":4348},"to":{"krate":1,"index":2339}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/list.rs","byte_start":76923,"byte_end":76934,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":4351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/list.rs","byte_start":77220,"byte_end":77231,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":4351},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":74798,"byte_end":74804,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":3137},"to":{"krate":0,"index":730}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75443,"byte_end":75444,"line_start":76,"line_end":76,"column_start":53,"column_end":54},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":739},"to":{"krate":0,"index":3137}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/discover/mod.rs","byte_start":75553,"byte_end":75554,"line_start":83,"line_end":83,"column_start":39,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":744},"to":{"krate":0,"index":730}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":78876,"byte_end":78890,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":4401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/future.rs","byte_start":79058,"byte_end":79072,"line_start":32,"line_end":32,"column_start":26,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":4401},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79586,"byte_end":79607,"line_start":14,"line_end":14,"column_start":6,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":79761,"byte_end":79782,"line_start":21,"line_end":21,"column_start":22,"column_end":43},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4441},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80396,"byte_end":80423,"line_start":42,"line_end":42,"column_start":6,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/layer.rs","byte_start":80800,"byte_end":80827,"line_start":54,"line_end":54,"column_start":22,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":4447},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":81711,"byte_end":81727,"line_start":26,"line_end":26,"column_start":9,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4453},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":82571,"byte_end":82587,"line_start":57,"line_end":57,"column_start":39,"column_end":55},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":4453},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":83773,"byte_end":83789,"line_start":96,"line_end":96,"column_start":26,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":4453},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/concurrency/service.rs","byte_start":84300,"byte_end":84316,"line_start":111,"line_end":111,"column_start":31,"column_end":47},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":4453},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":84919,"byte_end":84933,"line_start":12,"line_end":12,"column_start":6,"column_end":20},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/layer.rs","byte_start":85125,"byte_end":85139,"line_start":20,"line_end":20,"column_start":22,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":4461},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/rate.rs","byte_start":85434,"byte_end":85438,"line_start":10,"line_end":10,"column_start":6,"column_end":10},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":4467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":86391,"byte_end":86400,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":4475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":87379,"byte_end":87388,"line_start":64,"line_end":64,"column_start":39,"column_end":48},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":4475},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/limit/rate/service.rs","byte_start":89366,"byte_end":89375,"line_start":123,"line_end":123,"column_start":31,"column_end":40},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":4475},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":94824,"byte_end":94829,"line_start":33,"line_end":33,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":2625},"to":{"krate":0,"index":1002}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95545,"byte_end":95566,"line_start":60,"line_end":60,"column_start":15,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":4527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":95878,"byte_end":95899,"line_start":71,"line_end":71,"column_start":32,"column_end":53},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":4527},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/completion.rs","byte_start":96390,"byte_end":96408,"line_start":88,"line_end":88,"column_start":38,"column_end":56},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":4518},"to":{"krate":0,"index":1002}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97190,"byte_end":97198,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":4589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97401,"byte_end":97409,"line_start":35,"line_end":35,"column_start":40,"column_end":48},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":4589},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":97534,"byte_end":97542,"line_start":43,"line_end":43,"column_start":42,"column_end":50},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":4589},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/constant.rs","byte_start":98113,"byte_end":98121,"line_start":64,"line_end":64,"column_start":47,"column_end":55},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":4589},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":101705,"byte_end":101713,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":4638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":102330,"byte_end":102338,"line_start":111,"line_end":111,"column_start":42,"column_end":50},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4638},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":102904,"byte_end":102912,"line_start":133,"line_end":133,"column_start":21,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":4638},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":103514,"byte_end":103522,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":103773,"byte_end":103789,"line_start":164,"line_end":164,"column_start":12,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4649},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":104616,"byte_end":104632,"line_start":189,"line_end":189,"column_start":23,"column_end":39},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4649},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":105479,"byte_end":105490,"line_start":218,"line_end":218,"column_start":6,"column_end":17},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":4726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/peak_ewma.rs","byte_start":107796,"byte_end":107802,"line_start":287,"line_end":287,"column_start":15,"column_end":21},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4720},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113082,"byte_end":113097,"line_start":52,"line_end":52,"column_start":12,"column_end":27},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113478,"byte_end":113493,"line_start":67,"line_end":67,"column_start":21,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":4809},"to":{"krate":0,"index":1289}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":113716,"byte_end":113731,"line_start":76,"line_end":76,"column_start":42,"column_end":57},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4809},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":114362,"byte_end":114385,"line_start":101,"line_end":101,"column_start":12,"column_end":35},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":114825,"byte_end":114848,"line_start":117,"line_end":117,"column_start":23,"column_end":46},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4828},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/load/pending_requests.rs","byte_start":115535,"byte_end":115543,"line_start":141,"line_end":141,"column_start":6,"column_end":14},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":4819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118334,"byte_end":118340,"line_start":12,"line_end":12,"column_start":35,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3137},"to":{"krate":0,"index":1317}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":118974,"byte_end":118975,"line_start":29,"line_end":29,"column_start":39,"column_end":40},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1325},"to":{"krate":0,"index":3137}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_connection.rs","byte_start":119048,"byte_end":119049,"line_start":31,"line_end":31,"column_start":44,"column_end":45},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1328},"to":{"krate":0,"index":1317}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128462,"byte_end":128468,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service/shared.rs","byte_start":128619,"byte_end":128625,"line_start":83,"line_end":83,"column_start":27,"column_end":33},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4903},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":120230,"byte_end":120236,"line_start":21,"line_end":21,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":3137},"to":{"krate":0,"index":1383}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123657,"byte_end":123658,"line_start":132,"line_end":132,"column_start":59,"column_end":60},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1396},"to":{"krate":0,"index":3137}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":123794,"byte_end":123795,"line_start":139,"line_end":139,"column_start":62,"column_end":63},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1401},"to":{"krate":0,"index":1383}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124542,"byte_end":124553,"line_start":169,"line_end":169,"column_start":28,"column_end":39},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1412},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":124755,"byte_end":124766,"line_start":181,"line_end":181,"column_start":33,"column_end":44},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1412},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125025,"byte_end":125036,"line_start":192,"line_end":192,"column_start":49,"column_end":60},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1412},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":125759,"byte_end":125768,"line_start":222,"line_end":222,"column_start":33,"column_end":42},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1435},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/make/make_service.rs","byte_start":126029,"byte_end":126038,"line_start":233,"line_end":233,"column_start":49,"column_end":58},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1435},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":133789,"byte_end":133799,"line_start":76,"line_end":76,"column_start":38,"column_end":48},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1524},"to":{"krate":2,"index":3045}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":134369,"byte_end":134379,"line_start":100,"line_end":100,"column_start":29,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1524},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":134669,"byte_end":134679,"line_start":114,"line_end":114,"column_start":32,"column_end":42},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1524},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":135136,"byte_end":135146,"line_start":133,"line_end":133,"column_start":17,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":137668,"byte_end":137678,"line_start":209,"line_end":209,"column_start":17,"column_end":27},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145718,"byte_end":145725,"line_start":404,"line_end":404,"column_start":27,"column_end":34},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":3045}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":145768,"byte_end":145775,"line_start":406,"line_end":406,"column_start":28,"column_end":35},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/cache.rs","byte_start":147017,"byte_end":147024,"line_start":440,"line_end":440,"column_start":32,"column_end":39},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147634,"byte_end":147640,"line_start":9,"line_end":9,"column_start":46,"column_end":52},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1608},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":147864,"byte_end":147870,"line_start":18,"line_end":18,"column_start":31,"column_end":37},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1608},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/ready_cache/error.rs","byte_start":148023,"byte_end":148029,"line_start":24,"line_end":24,"column_start":48,"column_end":54},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1608},"to":{"krate":1,"index":2339}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":149980,"byte_end":149987,"line_start":9,"line_end":9,"column_start":6,"column_end":13},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":5075},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":150106,"byte_end":150113,"line_start":16,"line_end":16,"column_start":23,"column_end":30},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":5075},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/error.rs","byte_start":150245,"byte_end":150252,"line_start":22,"line_end":22,"column_start":23,"column_end":30},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":5075},"to":{"krate":1,"index":2339}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/future.rs","byte_start":150687,"byte_end":150701,"line_start":25,"line_end":25,"column_start":9,"column_end":23},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":5082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/future.rs","byte_start":150843,"byte_end":150857,"line_start":31,"line_end":31,"column_start":26,"column_end":40},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":5082},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/layer.rs","byte_start":151711,"byte_end":151723,"line_start":11,"line_end":11,"column_start":6,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":5122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/layer.rs","byte_start":151874,"byte_end":151886,"line_start":18,"line_end":18,"column_start":22,"column_end":34},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":5122},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":148653,"byte_end":148660,"line_start":26,"line_end":26,"column_start":9,"column_end":16},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":5128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/timeout/mod.rs","byte_start":149181,"byte_end":149188,"line_start":48,"line_end":48,"column_start":39,"column_end":46},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":5128},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188182,"byte_end":188189,"line_start":19,"line_end":19,"column_start":27,"column_end":34},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":5138},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188774,"byte_end":188787,"line_start":41,"line_end":41,"column_start":28,"column_end":41},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":5147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":188975,"byte_end":188988,"line_start":47,"line_end":47,"column_start":48,"column_end":61},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":5147},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189224,"byte_end":189237,"line_start":55,"line_end":55,"column_start":39,"column_end":52},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":5147},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":189729,"byte_end":189736,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":5138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190191,"byte_end":190198,"line_start":91,"line_end":91,"column_start":47,"column_end":54},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":5138},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190756,"byte_end":190768,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":5196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/and_then.rs","byte_start":190911,"byte_end":190923,"line_start":118,"line_end":118,"column_start":25,"column_end":37},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":5196},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194396,"byte_end":194404,"line_start":58,"line_end":58,"column_start":19,"column_end":27},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":194937,"byte_end":194945,"line_start":77,"line_end":77,"column_start":33,"column_end":41},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1820},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":195121,"byte_end":195129,"line_start":85,"line_end":85,"column_start":29,"column_end":37},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1820},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/layer.rs","byte_start":195286,"byte_end":195294,"line_start":93,"line_end":93,"column_start":34,"column_end":42},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1820},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":196397,"byte_end":196407,"line_start":32,"line_end":32,"column_start":15,"column_end":25},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":197080,"byte_end":197090,"line_start":56,"line_end":56,"column_start":30,"column_end":40},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1884},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/sync.rs","byte_start":197425,"byte_end":197435,"line_start":70,"line_end":70,"column_start":30,"column_end":40},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1884},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198191,"byte_end":198207,"line_start":27,"line_end":27,"column_start":15,"column_end":31},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":198829,"byte_end":198845,"line_start":50,"line_end":50,"column_start":30,"column_end":46},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1943},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":199192,"byte_end":199208,"line_start":64,"line_end":64,"column_start":30,"column_end":46},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1943},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed/unsync.rs","byte_start":199382,"byte_end":199393,"line_start":70,"line_end":70,"column_start":39,"column_end":50},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":5205},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":201705,"byte_end":201720,"line_start":65,"line_end":65,"column_start":15,"column_end":30},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202418,"byte_end":202433,"line_start":89,"line_end":89,"column_start":30,"column_end":45},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2019},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202797,"byte_end":202812,"line_start":105,"line_end":105,"column_start":25,"column_end":40},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2019},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":202919,"byte_end":202926,"line_start":111,"line_end":111,"column_start":24,"column_end":31},"kind":"SuperTrait","from":{"krate":23,"index":13},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":203139,"byte_end":203140,"line_start":120,"line_end":120,"column_start":32,"column_end":33},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2053},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/boxed_clone.rs","byte_start":203404,"byte_end":203419,"line_start":132,"line_end":132,"column_start":30,"column_end":45},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2019},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/common.rs","byte_start":204597,"byte_end":204604,"line_start":30,"line_end":30,"column_start":17,"column_end":24},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/common.rs","byte_start":205567,"byte_end":205574,"line_start":66,"line_end":66,"column_start":28,"column_end":35},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5211},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":211016,"byte_end":211023,"line_start":98,"line_end":98,"column_start":14,"column_end":21},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5277},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":212694,"byte_end":212701,"line_start":154,"line_end":154,"column_start":25,"column_end":32},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5277},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/ordered.rs","byte_start":213036,"byte_end":213050,"line_start":167,"line_end":167,"column_start":38,"column_end":52},"kind":{"Impl":{"id":154}},"from":{"krate":24,"index":6477},"to":{"krate":0,"index":2089}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":214334,"byte_end":214350,"line_start":35,"line_end":35,"column_start":14,"column_end":30},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215510,"byte_end":215526,"line_start":75,"line_end":75,"column_start":25,"column_end":41},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":5322},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/call_all/unordered.rs","byte_start":215861,"byte_end":215877,"line_start":88,"line_end":88,"column_start":38,"column_end":54},"kind":{"Impl":{"id":157}},"from":{"krate":24,"index":6835},"to":{"krate":0,"index":2089}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":216986,"byte_end":216992,"line_start":29,"line_end":29,"column_start":42,"column_end":48},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":5417},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":217883,"byte_end":217889,"line_start":59,"line_end":59,"column_start":34,"column_end":40},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":5417},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/either.rs","byte_start":218436,"byte_end":218442,"line_start":76,"line_end":76,"column_start":28,"column_end":34},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":5417},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":220831,"byte_end":220844,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":222697,"byte_end":222710,"line_start":111,"line_end":111,"column_start":27,"column_end":40},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":5426},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":223037,"byte_end":223042,"line_start":128,"line_end":128,"column_start":27,"column_end":32},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":5434},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/future_service.rs","byte_start":223480,"byte_end":223493,"line_start":143,"line_end":143,"column_start":33,"column_end":46},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":5426},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":225949,"byte_end":225955,"line_start":16,"line_end":16,"column_start":27,"column_end":33},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":5447},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":226569,"byte_end":226575,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":5447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":227028,"byte_end":227034,"line_start":59,"line_end":59,"column_start":49,"column_end":55},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":5447},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":227551,"byte_end":227562,"line_start":79,"line_end":79,"column_start":9,"column_end":20},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":5456},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_err.rs","byte_start":227697,"byte_end":227708,"line_start":86,"line_end":86,"column_start":25,"column_end":36},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":5456},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228218,"byte_end":228228,"line_start":15,"line_end":15,"column_start":27,"column_end":37},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":5519},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228518,"byte_end":228528,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":5519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":228992,"byte_end":229002,"line_start":43,"line_end":43,"column_start":36,"column_end":46},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":5519},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229576,"byte_end":229591,"line_start":71,"line_end":71,"column_start":9,"column_end":24},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":5528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_request.rs","byte_start":229734,"byte_end":229749,"line_start":78,"line_end":78,"column_start":25,"column_end":40},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":5528},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230322,"byte_end":230333,"line_start":16,"line_end":16,"column_start":27,"column_end":38},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":5537},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":230974,"byte_end":230985,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":5537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231469,"byte_end":231480,"line_start":59,"line_end":59,"column_start":52,"column_end":63},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":5537},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":231988,"byte_end":232004,"line_start":79,"line_end":79,"column_start":9,"column_end":25},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":5546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_response.rs","byte_start":232155,"byte_end":232171,"line_start":86,"line_end":86,"column_start":25,"column_end":41},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":5546},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":232733,"byte_end":232742,"line_start":16,"line_end":16,"column_start":27,"column_end":36},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":5609},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233367,"byte_end":233376,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":5609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":233857,"byte_end":233866,"line_start":59,"line_end":59,"column_start":59,"column_end":68},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":5609},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":234444,"byte_end":234458,"line_start":80,"line_end":80,"column_start":9,"column_end":23},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":5618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_result.rs","byte_start":234605,"byte_end":234619,"line_start":87,"line_end":87,"column_start":25,"column_end":39},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":5618},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235146,"byte_end":235155,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":5681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":235960,"byte_end":235969,"line_start":49,"line_end":49,"column_start":41,"column_end":50},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":5681},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236435,"byte_end":236444,"line_start":69,"line_end":69,"column_start":27,"column_end":36},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5681},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":236884,"byte_end":236898,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":237035,"byte_end":237049,"line_start":96,"line_end":96,"column_start":25,"column_end":39},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":5690},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/map_future.rs","byte_start":237239,"byte_end":237253,"line_start":107,"line_end":107,"column_start":24,"column_end":38},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":5690},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":238263,"byte_end":238268,"line_start":37,"line_end":37,"column_start":28,"column_end":33},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":5741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":238481,"byte_end":238486,"line_start":47,"line_end":47,"column_start":29,"column_end":34},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":5741},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":239135,"byte_end":239142,"line_start":69,"line_end":69,"column_start":14,"column_end":21},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":5696},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/oneshot.rs","byte_start":239364,"byte_end":239371,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":5696},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":242023,"byte_end":242027,"line_start":9,"line_end":9,"column_start":6,"column_end":10},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":5786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":242112,"byte_end":242116,"line_start":15,"line_end":15,"column_start":23,"column_end":27},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":5786},"to":{"krate":2,"index":9350}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/error.rs","byte_start":242239,"byte_end":242243,"line_start":21,"line_end":21,"column_start":23,"column_end":27},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":5786},"to":{"krate":1,"index":2339}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/future.rs","byte_start":242633,"byte_end":242647,"line_start":21,"line_end":21,"column_start":9,"column_end":23},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":5791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/future.rs","byte_start":242783,"byte_end":242797,"line_start":27,"line_end":27,"column_start":26,"column_end":40},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":5791},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":240813,"byte_end":240821,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":5827},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/optional/mod.rs","byte_start":241079,"byte_end":241087,"line_start":35,"line_end":35,"column_start":39,"column_end":47},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":5827},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243823,"byte_end":243835,"line_start":22,"line_end":22,"column_start":28,"column_end":40},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":3045}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":243869,"byte_end":243881,"line_start":24,"line_end":24,"column_start":18,"column_end":30},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244116,"byte_end":244128,"line_start":37,"line_end":37,"column_start":29,"column_end":41},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":244554,"byte_end":244566,"line_start":54,"line_end":54,"column_start":33,"column_end":45},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245560,"byte_end":245565,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2729},"to":{"krate":2,"index":3045}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245607,"byte_end":245612,"line_start":83,"line_end":83,"column_start":22,"column_end":27},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":245816,"byte_end":245821,"line_start":93,"line_end":93,"column_start":33,"column_end":38},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2729},"to":{"krate":2,"index":12611}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/ready.rs","byte_start":246087,"byte_end":246092,"line_start":104,"line_end":104,"column_start":37,"column_end":42},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2729},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247609,"byte_end":247618,"line_start":58,"line_end":58,"column_start":24,"column_end":33},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":5833},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/service_fn.rs","byte_start":247874,"byte_end":247883,"line_start":66,"line_end":66,"column_start":48,"column_end":57},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5833},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":248573,"byte_end":248577,"line_start":19,"line_end":19,"column_start":27,"column_end":31},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":5841},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249012,"byte_end":249016,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":5841},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":249644,"byte_end":249648,"line_start":62,"line_end":62,"column_start":64,"column_end":68},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":5841},"to":{"krate":23,"index":13}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":250253,"byte_end":250262,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":5850},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/then.rs","byte_start":250399,"byte_end":250408,"line_start":91,"line_end":91,"column_start":25,"column_end":34},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5850},"to":{"krate":20,"index":71}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":153613,"byte_end":153620,"line_start":65,"line_end":65,"column_start":47,"column_end":54},"kind":"SuperTrait","from":{"krate":23,"index":13},"to":{"krate":0,"index":2981}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/util/mod.rs","byte_start":186887,"byte_end":186888,"line_start":1055,"line_end":1055,"column_start":50,"column_end":51},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":3017},"to":{"krate":0,"index":2981}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254185,"byte_end":254199,"line_start":110,"line_end":110,"column_start":18,"column_end":32},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":5924},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254273,"byte_end":254287,"line_start":116,"line_end":116,"column_start":6,"column_end":20},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":5924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":254456,"byte_end":254470,"line_start":125,"line_end":125,"column_start":9,"column_end":23},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":5924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":278036,"byte_end":278050,"line_start":813,"line_end":813,"column_start":36,"column_end":50},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":5924},"to":{"krate":2,"index":9343}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-0.4.11/src/builder/mod.rs","byte_start":278220,"byte_end":278234,"line_start":819,"line_end":819,"column_start":25,"column_end":39},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":5924},"to":{"krate":20,"index":71}}]}