{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1","program":"/home/zfaizal/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zstd","--edition=2018","/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"arrays\"","--cfg","feature=\"default\"","--cfg","feature=\"legacy\"","-C","metadata=690e204700638ff0","-C","extra-filename=-690e204700638ff0","--out-dir","/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps","-L","dependency=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps","--extern","zstd_safe=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libzstd_safe-8335823036b394eb.rmeta","--cap-lints","allow","-L","native=/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/build/zstd-sys-4c0271599496775b/out","--error-format=json","--sysroot","/home/zfaizal/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/zfaizal/Projects/exchange_booth_skeleton/program/target/rls/debug/deps/libzstd-690e204700638ff0.rmeta"},"prelude":{"crate_id":{"name":"zstd","disambiguator":[6458618461061025877,0]},"crate_root":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src","external_crates":[{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6651269719699919063,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5314938362831806024,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3192916554191843392,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10801551532821350179,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17712696282143808288,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17759323731357012152,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14544669950029098253,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7140361926623002963,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7912653715525474172,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9995494595343579593,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7588845087494698681,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[1970575902162233525,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[17110431802946872365,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[13012552651923263309,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[12999591111048205696,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[5038749270737079727,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[4159898706074811085,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[8750230721255451893,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1956939412839304600,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","num":20,"id":{"name":"zstd_safe","disambiguator":[1303213273568555718,0]}},{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","num":21,"id":{"name":"zstd_sys","disambiguator":[8618777279086067321,0]}}],"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":0,"byte_end":1960,"line_start":1,"line_end":77,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":675,"byte_end":684,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"alias_span":null,"name":"zstd_safe","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":578},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2222,"byte_end":2232,"line_start":10,"line_end":10,"column_start":27,"column_end":37},"alias_span":null,"name":"Compressor","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":583},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2262,"byte_end":2274,"line_start":11,"line_end":11,"column_start":29,"column_end":41},"alias_span":null,"name":"Decompressor","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":20,"index":158},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9565,"byte_end":9570,"line_start":23,"line_end":23,"column_start":21,"column_end":26},"alias_span":null,"name":"CDict","value":"","parent":{"krate":0,"index":59}},{"kind":"Use","ref_id":{"krate":20,"index":178},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9572,"byte_end":9577,"line_start":23,"line_end":23,"column_start":28,"column_end":33},"alias_span":null,"name":"DDict","value":"","parent":{"krate":0,"index":59}},{"kind":"Use","ref_id":{"krate":0,"index":361},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/mod.rs","byte_start":41162,"byte_end":41168,"line_start":6,"line_end":6,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":339}},{"kind":"Use","ref_id":{"krate":0,"index":409},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/mod.rs","byte_start":41192,"byte_end":41198,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":339}},{"kind":"Use","ref_id":{"krate":20,"index":372},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57210,"byte_end":57220,"line_start":9,"line_end":9,"column_start":21,"column_end":31},"alias_span":null,"name":"CParameter","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":20,"index":332},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57222,"byte_end":57232,"line_start":9,"line_end":9,"column_start":33,"column_end":43},"alias_span":null,"name":"DParameter","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":20,"index":356},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57234,"byte_end":57242,"line_start":9,"line_end":9,"column_start":45,"column_end":53},"alias_span":null,"name":"InBuffer","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":20,"index":363},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57244,"byte_end":57253,"line_start":9,"line_end":9,"column_start":55,"column_end":64},"alias_span":null,"name":"OutBuffer","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":20,"index":203},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57255,"byte_end":57263,"line_start":9,"line_end":9,"column_start":66,"column_end":74},"alias_span":null,"name":"WriteBuf","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":331},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15137,"byte_end":15148,"line_start":20,"line_end":20,"column_start":27,"column_end":38},"alias_span":null,"name":"copy_decode","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":336},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15150,"byte_end":15161,"line_start":20,"line_end":20,"column_start":40,"column_end":51},"alias_span":null,"name":"copy_encode","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15163,"byte_end":15173,"line_start":20,"line_end":20,"column_start":53,"column_end":63},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15175,"byte_end":15185,"line_start":20,"line_end":20,"column_start":65,"column_end":75},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":139},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15208,"byte_end":15215,"line_start":21,"line_end":21,"column_start":21,"column_end":28},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":225},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15239,"byte_end":15256,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"AutoFinishEncoder","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15258,"byte_end":15265,"line_start":22,"line_end":22,"column_start":42,"column_end":49},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":20,"index":345},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":797,"byte_end":811,"line_start":35,"line_end":35,"column_start":20,"column_end":34},"alias_span":null,"name":"DEFAULT_COMPRESSION_LEVEL","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":1083,"byte_end":1093,"line_start":44,"line_end":44,"column_start":25,"column_end":35},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":1095,"byte_end":1105,"line_start":44,"line_end":44,"column_start":37,"column_end":47},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":139},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":1107,"byte_end":1114,"line_start":44,"line_end":44,"column_start":49,"column_end":56},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":1116,"byte_end":1123,"line_start":44,"line_end":44,"column_start":58,"column_end":65},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":0,"byte_end":1960,"line_start":1,"line_end":77,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":59},{"krate":0,"index":107},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577}],"decl_id":null,"docs":" Rust binding to the [zstd library][zstd].","sig":null,"attributes":[{"value":"/ Rust binding to the [zstd library][zstd].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":0,"byte_end":45,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":46,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides:","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":50,"byte_end":74,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":75,"byte_end":78,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * An [encoder](stream/write/struct.Encoder.html) to compress data using zstd","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":79,"byte_end":159,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   and send the output to another write.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":160,"byte_end":203,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/ * A [decoder](stream/read/struct.Decoder.html) to read input data from a `Read`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":204,"byte_end":287,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/   and decompress it.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":288,"byte_end":312,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"/ * Convenient functions for common tasks.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":313,"byte_end":357,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":358,"byte_end":361,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":362,"byte_end":375,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":376,"byte_end":379,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":380,"byte_end":393,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ use std::io;","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":394,"byte_end":410,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":411,"byte_end":414,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":415,"byte_end":430,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/ \t// Uncompress input and print the result.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":431,"byte_end":477,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/ \tzstd::stream::copy_decode(io::stdin(), io::stdout()).unwrap();","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":478,"byte_end":545,"line_start":18,"line_end":18,"column_start":1,"column_end":68}},{"value":"/ }","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":546,"byte_end":551,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":552,"byte_end":559,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":560,"byte_end":563,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [zstd]: https://github.com/facebook/zstd","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":564,"byte_end":608,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"deny(missing_docs)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":609,"byte_end":631,"line_start":23,"line_end":23,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":26},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"decl_id":null,"docs":" Compress and decompress individual blocks.","sig":null,"attributes":[{"value":"/ Compress and decompress individual blocks.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":1962,"byte_end":2008,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2009,"byte_end":2012,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These methods process all the input data at once.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2013,"byte_end":2066,"line_start":3,"line_end":3,"column_start":1,"column_end":54}},{"value":"/ It is therefore best used with relatively small blocks","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2067,"byte_end":2125,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/ (like small network packets).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2126,"byte_end":2159,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":578},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4404,"byte_end":4414,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"Compressor","qualname":"::block::compressor::Compressor","value":"Compressor {  }","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580}],"decl_id":null,"docs":" Allows to compress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to compress independently multiple blocks of data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4171,"byte_end":4232,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4233,"byte_end":4236,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `compress` multiple times.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4237,"byte_end":4313,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ The compressed blocks are still completely independent.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4314,"byte_end":4373,"line_start":9,"line_end":9,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4545,"byte_end":4548,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Compressor>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4500,"byte_end":4533,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4688,"byte_end":4697,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"with_dict","qualname":"<Compressor>::with_dict","value":"pub fn with_dict(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor, using the given dictionary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4614,"byte_end":4676,"line_start":22,"line_end":22,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":5129,"byte_end":5147,"line_start":36,"line_end":36,"column_start":12,"column_end":30},"name":"compress_to_buffer","qualname":"<Compressor>::compress_to_buffer","value":"pub fn compress_to_buffer<C: zstd_safe::WriteBuf +\n                          ?Sized>(&mut Self, &[u8], &mut C, i32)\n-> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compress a single block of data to the given destination buffer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4830,"byte_end":4898,"line_start":30,"line_end":30,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4903,"byte_end":4906,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4911,"byte_end":4985,"line_start":32,"line_end":32,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4990,"byte_end":5049,"line_start":33,"line_end":33,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":5054,"byte_end":5057,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":5062,"byte_end":5117,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":5593,"byte_end":5601,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compressor>::compress","value":"pub fn compress(&mut Self, &[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":5448,"byte_end":5513,"line_start":47,"line_end":47,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":5518,"byte_end":5521,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":5526,"byte_end":5581,"line_start":49,"line_end":49,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":583},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6448,"byte_end":6460,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Decompressor","qualname":"::block::decompressor::Decompressor","value":"Decompressor {  }","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585}],"decl_id":null,"docs":" Allows to decompress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to decompress independently multiple blocks of data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6271,"byte_end":6334,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6335,"byte_end":6338,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `decompress` multiple times.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6339,"byte_end":6417,"line_start":10,"line_end":10,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6596,"byte_end":6599,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompressor>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6548,"byte_end":6584,"line_start":18,"line_end":18,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6743,"byte_end":6752,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"with_dict","qualname":"<Decompressor>::with_dict","value":"pub fn with_dict(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor, using the given dictionary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6667,"byte_end":6731,"line_start":23,"line_end":23,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":7119,"byte_end":7139,"line_start":35,"line_end":35,"column_start":12,"column_end":32},"name":"decompress_to_buffer","qualname":"<Decompressor>::decompress_to_buffer","value":"pub fn decompress_to_buffer<C: zstd_safe::WriteBuf +\n                            ?Sized>(&mut Self, &[u8], &mut C)\n-> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6887,"byte_end":6956,"line_start":31,"line_end":31,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6961,"byte_end":6964,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6969,"byte_end":7043,"line_start":33,"line_end":33,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":7048,"byte_end":7107,"line_start":34,"line_end":34,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":7606,"byte_end":7616,"line_start":49,"line_end":49,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompressor>::decompress","value":"pub fn decompress(&mut Self, &[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress a block of data, and return the result in a `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Decompress a block of data, and return the result in a `Vec<u8>`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":7411,"byte_end":7480,"line_start":45,"line_end":45,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":7485,"byte_end":7488,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":7493,"byte_end":7556,"line_start":47,"line_end":47,"column_start":5,"column_end":68}},{"value":"/ or an error will be returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":7561,"byte_end":7594,"line_start":48,"line_end":48,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":8346,"byte_end":8357,"line_start":68,"line_end":68,"column_start":12,"column_end":23},"name":"upper_bound","qualname":"<Decompressor>::upper_bound","value":"pub fn upper_bound(&[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get an upper bound on the decompressed size of data, if available","sig":null,"attributes":[{"value":"/ Get an upper bound on the decompressed size of data, if available","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":7948,"byte_end":8017,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":8022,"byte_end":8025,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ This can be used to pre-allocate enough capacity for `decompress_to_buffer`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":8030,"byte_end":8109,"line_start":63,"line_end":63,"column_start":5,"column_end":84}},{"value":"/ and is used by `decompress` to ensure that it does not over-allocate if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":8114,"byte_end":8189,"line_start":64,"line_end":64,"column_start":5,"column_end":80}},{"value":"/ you supply a large `capacity`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":8194,"byte_end":8228,"line_start":65,"line_end":65,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":8233,"byte_end":8236,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if the upper bound cannot be determined or is larger than `usize::MAX`","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":8241,"byte_end":8334,"line_start":67,"line_end":67,"column_start":5,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2568,"byte_end":2586,"line_start":21,"line_end":21,"column_start":8,"column_end":26},"name":"compress_to_buffer","qualname":"::block::compress_to_buffer","value":"pub fn compress_to_buffer(&[u8], &mut [u8], i32) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compresses a single block of data to the given destination buffer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2291,"byte_end":2361,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2362,"byte_end":2365,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2366,"byte_end":2440,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2441,"byte_end":2500,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2501,"byte_end":2504,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2505,"byte_end":2560,"line_start":20,"line_end":20,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2881,"byte_end":2889,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"compress","qualname":"::block::compress","value":"pub fn compress(&[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2748,"byte_end":2813,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2814,"byte_end":2817,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2818,"byte_end":2873,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3203,"byte_end":3223,"line_start":40,"line_end":40,"column_start":8,"column_end":28},"name":"decompress_to_buffer","qualname":"::block::decompress_to_buffer","value":"pub fn decompress_to_buffer(&[u8], &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":2987,"byte_end":3056,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3057,"byte_end":3060,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3061,"byte_end":3135,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3136,"byte_end":3195,"line_start":39,"line_end":39,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3545,"byte_end":3555,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"decompress","qualname":"::block::decompress","value":"pub fn decompress(&[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses a block of data and returns the decompressed result.","sig":null,"attributes":[{"value":"/ Decompresses a block of data and returns the decompressed result.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3366,"byte_end":3435,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3436,"byte_end":3439,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3440,"byte_end":3503,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ or an error will be returned.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/mod.rs","byte_start":3504,"byte_end":3537,"line_start":50,"line_end":50,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":59},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dict","qualname":"::dict","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":104}],"decl_id":null,"docs":" Train a dictionary from various sources.","sig":null,"attributes":[{"value":"/ Train a dictionary from various sources.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":8747,"byte_end":8791,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":8792,"byte_end":8795,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A dictionary can help improve the compression of small files.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":8796,"byte_end":8861,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/ The dictionary must be present during decompression,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":8862,"byte_end":8918,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/ but can be shared accross multiple \"similar\" files.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":8919,"byte_end":8974,"line_start":5,"line_end":5,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":8975,"byte_end":8978,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Creating a dictionary using the `zstd` C library,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":8979,"byte_end":9032,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ using the `zstd` command-line interface, using this library,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9033,"byte_end":9097,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/ or using the `train` binary provided, should give the same result,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9098,"byte_end":9168,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ and are therefore completely compatible.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9169,"byte_end":9213,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9214,"byte_end":9217,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To use, see [`Encoder::with_dictionary`] or [`Decoder::with_dictionary`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9218,"byte_end":9295,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9296,"byte_end":9299,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::with_dictionary`]: ../struct.Encoder.html#method.with_dictionary","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9300,"byte_end":9379,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ [`Decoder::with_dictionary`]: ../struct.Decoder.html#method.with_dictionary","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9380,"byte_end":9459,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9632,"byte_end":9649,"line_start":26,"line_end":26,"column_start":12,"column_end":29},"name":"EncoderDictionary","qualname":"::dict::EncoderDictionary","value":"EncoderDictionary {  }","parent":null,"children":[{"krate":0,"index":85}],"decl_id":null,"docs":" Prepared dictionary for compression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for compression","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9581,"byte_end":9620,"line_start":25,"line_end":25,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9839,"byte_end":9843,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"copy","qualname":"<EncoderDictionary>::copy","value":"pub fn copy(&[u8], i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a prepared dictionary for compression.","sig":null,"attributes":[{"value":"/ Creates a prepared dictionary for compression.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9719,"byte_end":9769,"line_start":31,"line_end":31,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9774,"byte_end":9777,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9782,"byte_end":9827,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10504,"byte_end":10512,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"as_cdict","qualname":"<EncoderDictionary>::as_cdict","value":"pub fn as_cdict(&Self) -> &CDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `CDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `CDict` inner object","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10447,"byte_end":10492,"line_start":54,"line_end":54,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10618,"byte_end":10635,"line_start":61,"line_end":61,"column_start":12,"column_end":29},"name":"DecoderDictionary","qualname":"::dict::DecoderDictionary","value":"DecoderDictionary {  }","parent":null,"children":[{"krate":0,"index":93}],"decl_id":null,"docs":" Prepared dictionary for decompression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for decompression","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10565,"byte_end":10606,"line_start":60,"line_end":60,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10826,"byte_end":10830,"line_start":69,"line_end":69,"column_start":12,"column_end":16},"name":"copy","qualname":"<DecoderDictionary>::copy","value":"pub fn copy(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a prepared dictionary for decompression.","sig":null,"attributes":[{"value":"/ Create a prepared dictionary for decompression.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10705,"byte_end":10756,"line_start":66,"line_end":66,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10761,"byte_end":10764,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10769,"byte_end":10814,"line_start":68,"line_end":68,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":11376,"byte_end":11384,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"as_ddict","qualname":"<DecoderDictionary>::as_ddict","value":"pub fn as_ddict(&Self) -> &DDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `DDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `DDict` inner object","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":11319,"byte_end":11364,"line_start":87,"line_end":87,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":11610,"byte_end":11625,"line_start":97,"line_end":97,"column_start":8,"column_end":23},"name":"from_continuous","qualname":"::dict::from_continuous","value":"pub fn from_continuous(&[u8], &[usize], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from a big continuous chunk of data.","sig":null,"attributes":[{"value":"/ Train a dictionary from a big continuous chunk of data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":11437,"byte_end":11496,"line_start":93,"line_end":93,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":11497,"byte_end":11500,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is the most efficient way to train a dictionary,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":11501,"byte_end":11558,"line_start":95,"line_end":95,"column_start":1,"column_end":58}},{"value":"/ since this is directly fed into `zstd`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":11559,"byte_end":11602,"line_start":96,"line_end":96,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":100},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12517,"byte_end":12529,"line_start":125,"line_end":125,"column_start":8,"column_end":20},"name":"from_samples","qualname":"::dict::from_samples","value":"pub fn from_samples<S: AsRef<[u8]>>(&[S], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from multiple samples.","sig":null,"attributes":[{"value":"/ Train a dictionary from multiple samples.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12174,"byte_end":12219,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12220,"byte_end":12223,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The samples will internaly be copied to a single continuous buffer,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12224,"byte_end":12295,"line_start":118,"line_end":118,"column_start":1,"column_end":72}},{"value":"/ so make sure you have enough memory available.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12296,"byte_end":12346,"line_start":119,"line_end":119,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12347,"byte_end":12350,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ If you need to stretch your system's limits,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12351,"byte_end":12399,"line_start":121,"line_end":121,"column_start":1,"column_end":49}},{"value":"/ [`from_continuous`] directly uses the given slice.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12400,"byte_end":12454,"line_start":122,"line_end":122,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12455,"byte_end":12458,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [`from_continuous`]: ./fn.from_continuous.html","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12459,"byte_end":12509,"line_start":124,"line_end":124,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12926,"byte_end":12936,"line_start":138,"line_end":138,"column_start":8,"column_end":18},"name":"from_files","qualname":"::dict::from_files","value":"pub fn from_files<I, P>(I, usize) -> io::Result<Vec<u8>> where\nP: AsRef<path::Path>, I: IntoIterator<Item = P>","parent":null,"children":[],"decl_id":null,"docs":" Train a dict from a list of files.\n","sig":null,"attributes":[{"value":"/ Train a dict from a list of files.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":12880,"byte_end":12918,"line_start":137,"line_end":137,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":107},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":192},{"krate":0,"index":318},{"krate":0,"index":339},{"krate":0,"index":446},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":556}],"decl_id":null,"docs":" Compress and decompress Zstd streams.","sig":null,"attributes":[{"value":"/ Compress and decompress Zstd streams.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":14738,"byte_end":14779,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":14780,"byte_end":14783,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Zstd streams are the main way to compress and decompress data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":14784,"byte_end":14850,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ They are compatible with the `zstd` command-line tool.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":14851,"byte_end":14909,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":14910,"byte_end":14913,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides both `Read` and `Write` interfaces to compressing and","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":14914,"byte_end":14992,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ decompressing.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":14993,"byte_end":15011,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":108},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::stream::read","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":174},{"krate":0,"index":183},{"krate":0,"index":186}],"decl_id":null,"docs":" Implement pull-based [`Read`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement pull-based [`Read`] trait for both compressing and decompressing.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21167,"byte_end":21246,"line_start":1,"line_end":1,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":139},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21599,"byte_end":21606,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::read::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":142}],"decl_id":null,"docs":" A decoder that decompress input data from another `Read`.","sig":null,"attributes":[{"value":"/ A decoder that decompress input data from another `Read`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21424,"byte_end":21485,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21486,"byte_end":21489,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This allows to read a stream of compressed data","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21490,"byte_end":21541,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21542,"byte_end":21587,"line_start":14,"line_end":14,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":143},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21746,"byte_end":21753,"line_start":20,"line_end":20,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::read::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":146}],"decl_id":null,"docs":" An encoder that compress input data from another `Read`.\n","sig":null,"attributes":[{"value":"/ An encoder that compress input data from another `Read`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21674,"byte_end":21734,"line_start":19,"line_end":19,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21910,"byte_end":21913,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21872,"byte_end":21898,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22184,"byte_end":22195,"line_start":35,"line_end":35,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Decoder>::with_buffer","value":"pub fn with_buffer(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder around a `BufRead`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22127,"byte_end":22172,"line_start":34,"line_end":34,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22434,"byte_end":22449,"line_start":41,"line_end":41,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(R, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22282,"byte_end":22338,"line_start":38,"line_end":38,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22343,"byte_end":22346,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22351,"byte_end":22422,"line_start":40,"line_end":40,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22852,"byte_end":22864,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"single_frame","qualname":"<Decoder>::single_frame","value":"pub fn single_frame(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets this `Decoder` to stop after the first frame.","sig":null,"attributes":[{"value":"/ Sets this `Decoder` to stop after the first frame.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22706,"byte_end":22760,"line_start":49,"line_end":49,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22765,"byte_end":22768,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ By default, it keeps concatenating frames until EOF is reached.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22773,"byte_end":22840,"line_start":51,"line_end":51,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23110,"byte_end":23134,"line_start":60,"line_end":60,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(R, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22949,"byte_end":23014,"line_start":57,"line_end":57,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23019,"byte_end":23022,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23027,"byte_end":23098,"line_start":59,"line_end":59,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23500,"byte_end":23523,"line_start":74,"line_end":74,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Decoder>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23435,"byte_end":23488,"line_start":73,"line_end":73,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23645,"byte_end":23652,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23584,"byte_end":23633,"line_start":78,"line_end":78,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23908,"byte_end":23915,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23708,"byte_end":23765,"line_start":83,"line_end":83,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23770,"byte_end":23773,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23778,"byte_end":23850,"line_start":85,"line_end":85,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23855,"byte_end":23896,"line_start":86,"line_end":86,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24157,"byte_end":24163,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"name":"finish","qualname":"<Decoder>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":23983,"byte_end":24011,"line_start":91,"line_end":91,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24016,"byte_end":24019,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24024,"byte_end":24089,"line_start":93,"line_end":93,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24094,"byte_end":24145,"line_start":94,"line_end":94,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24489,"byte_end":24492,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24451,"byte_end":24477,"line_start":109,"line_end":109,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24782,"byte_end":24793,"line_start":119,"line_end":119,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Encoder>::with_buffer","value":"pub fn with_buffer(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder around a `BufRead`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24725,"byte_end":24770,"line_start":118,"line_end":118,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25052,"byte_end":25067,"line_start":126,"line_end":126,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(R, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24900,"byte_end":24956,"line_start":123,"line_end":123,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24961,"byte_end":24964,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24969,"byte_end":25040,"line_start":125,"line_end":125,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25536,"byte_end":25560,"line_start":142,"line_end":142,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(R, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing `EncoderDictionary`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25375,"byte_end":25440,"line_start":139,"line_end":139,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25445,"byte_end":25448,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25453,"byte_end":25524,"line_start":141,"line_end":141,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25926,"byte_end":25949,"line_start":156,"line_end":156,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Encoder>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25861,"byte_end":25914,"line_start":155,"line_end":155,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26071,"byte_end":26078,"line_start":161,"line_end":161,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26010,"byte_end":26059,"line_start":160,"line_end":160,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26334,"byte_end":26341,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26134,"byte_end":26191,"line_start":165,"line_end":165,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26196,"byte_end":26199,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26204,"byte_end":26276,"line_start":167,"line_end":167,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26281,"byte_end":26322,"line_start":168,"line_end":168,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26583,"byte_end":26589,"line_start":177,"line_end":177,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26409,"byte_end":26437,"line_start":173,"line_end":173,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26442,"byte_end":26445,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26450,"byte_end":26515,"line_start":175,"line_end":175,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26520,"byte_end":26571,"line_start":176,"line_end":176,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":192},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::stream::write","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":225},{"krate":0,"index":231},{"krate":0,"index":237},{"krate":0,"index":244},{"krate":0,"index":248},{"krate":0,"index":253},{"krate":0,"index":260},{"krate":0,"index":264},{"krate":0,"index":269},{"krate":0,"index":273},{"krate":0,"index":289},{"krate":0,"index":294},{"krate":0,"index":298},{"krate":0,"index":311},{"krate":0,"index":315}],"decl_id":null,"docs":" Implement push-based [`Write`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement push-based [`Write`] trait for both compressing and decompressing.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27033,"byte_end":27113,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":217},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27822,"byte_end":27829,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::write::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":220}],"decl_id":null,"docs":" An encoder that compress and forward data to another writer.","sig":null,"attributes":[{"value":"/ An encoder that compress and forward data to another writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27273,"byte_end":27337,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27338,"byte_end":27341,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This allows to compress a stream of data","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27342,"byte_end":27386,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27387,"byte_end":27432,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27433,"byte_end":27436,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Don't forget to call [`finish()`] before dropping it!","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27437,"byte_end":27494,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27495,"byte_end":27498,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can call [`auto_finish()`] to use an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27499,"byte_end":27558,"line_start":19,"line_end":19,"column_start":1,"column_end":60}},{"value":"/ [`AutoFinishEncoder`] that will finish on drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27559,"byte_end":27610,"line_start":20,"line_end":20,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27611,"byte_end":27614,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Note: The zstd library has its own internal input buffer (~128kb).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27615,"byte_end":27685,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27686,"byte_end":27689,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`finish()`]: #method.finish","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27690,"byte_end":27722,"line_start":24,"line_end":24,"column_start":1,"column_end":33}},{"value":"/ [`auto_finish()`]: #method.auto_finish","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27723,"byte_end":27765,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ [`AutoFinishEncoder`]: AutoFinishEncoder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27766,"byte_end":27810,"line_start":26,"line_end":26,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":221},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28217,"byte_end":28224,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::write::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":224}],"decl_id":null,"docs":" A decoder that decompress and forward data to another writer.","sig":null,"attributes":[{"value":"/ A decoder that decompress and forward data to another writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":27934,"byte_end":27999,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28000,"byte_end":28003,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Note that you probably want to `flush()` after writing your stream content.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28004,"byte_end":28083,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ You can use [`auto_flush()`] to automatically flush the writer on drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28084,"byte_end":28159,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28160,"byte_end":28163,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [`auto_flush()`]: Decoder::auto_flush","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28164,"byte_end":28205,"line_start":37,"line_end":37,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":225},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28566,"byte_end":28583,"line_start":49,"line_end":49,"column_start":12,"column_end":29},"name":"AutoFinishEncoder","qualname":"::stream::write::AutoFinishEncoder","value":"AutoFinishEncoder {  }","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230}],"decl_id":null,"docs":" A wrapper around an `Encoder<W>` that finishes the stream on drop.","sig":null,"attributes":[{"value":"/ A wrapper around an `Encoder<W>` that finishes the stream on drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28331,"byte_end":28401,"line_start":43,"line_end":43,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28402,"byte_end":28405,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This can be created by the [`auto_finish()`] method on the [`Encoder`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28406,"byte_end":28481,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28482,"byte_end":28485,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ [`auto_finish()`]: Encoder::auto_finish","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28486,"byte_end":28529,"line_start":47,"line_end":47,"column_start":1,"column_end":44}},{"value":"/ [`Encoder`]: Encoder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28530,"byte_end":28554,"line_start":48,"line_end":48,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":231},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29033,"byte_end":29049,"line_start":66,"line_end":66,"column_start":12,"column_end":28},"name":"AutoFlushDecoder","qualname":"::stream::write::AutoFlushDecoder","value":"AutoFlushDecoder {  }","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"decl_id":null,"docs":" A wrapper around a `Decoder<W>` that flushes the stream on drop.","sig":null,"attributes":[{"value":"/ A wrapper around a `Decoder<W>` that flushes the stream on drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28803,"byte_end":28871,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28872,"byte_end":28875,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This can be created by the [`auto_flush()`] method on the [`Decoder`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28876,"byte_end":28950,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28951,"byte_end":28954,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`auto_flush()`]: Decoder::auto_flush","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28955,"byte_end":28996,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"/ [`Decoder`]: Decoder","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":28997,"byte_end":29021,"line_start":65,"line_end":65,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29587,"byte_end":29594,"line_start":86,"line_end":86,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFlushDecoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29525,"byte_end":29575,"line_start":85,"line_end":85,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29921,"byte_end":29928,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFlushDecoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29670,"byte_end":29728,"line_start":90,"line_end":90,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29733,"byte_end":29736,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29741,"byte_end":29813,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29818,"byte_end":29859,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29864,"byte_end":29867,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Mostly used for testing purposes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29872,"byte_end":29909,"line_start":95,"line_end":95,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":30955,"byte_end":30962,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFinishEncoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":30893,"byte_end":30943,"line_start":133,"line_end":133,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31289,"byte_end":31296,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFinishEncoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31038,"byte_end":31096,"line_start":138,"line_end":138,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31101,"byte_end":31104,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31109,"byte_end":31181,"line_start":140,"line_end":140,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31186,"byte_end":31227,"line_start":141,"line_end":141,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31232,"byte_end":31235,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Mostly used for testing purposes.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31240,"byte_end":31277,"line_start":143,"line_end":143,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32147,"byte_end":32150,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(W, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31990,"byte_end":32016,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32021,"byte_end":32024,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ `level`: compression level (1-21).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32029,"byte_end":32067,"line_start":171,"line_end":171,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32072,"byte_end":32075,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32080,"byte_end":32135,"line_start":173,"line_end":173,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32534,"byte_end":32549,"line_start":184,"line_end":184,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(W, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32257,"byte_end":32313,"line_start":178,"line_end":178,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32318,"byte_end":32321,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32326,"byte_end":32381,"line_start":180,"line_end":180,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32386,"byte_end":32454,"line_start":181,"line_end":181,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32459,"byte_end":32462,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32467,"byte_end":32522,"line_start":183,"line_end":183,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33081,"byte_end":33105,"line_start":200,"line_end":200,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(W, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing prepared `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing prepared `EncoderDictionary`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32854,"byte_end":32928,"line_start":196,"line_end":196,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32933,"byte_end":32936,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32941,"byte_end":32996,"line_start":198,"line_end":198,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33001,"byte_end":33069,"line_start":199,"line_end":199,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33591,"byte_end":33602,"line_start":217,"line_end":217,"column_start":12,"column_end":23},"name":"auto_finish","qualname":"<Encoder>::auto_finish","value":"pub fn auto_finish(Self) -> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will finish the stream on drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33405,"byte_end":33477,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33482,"byte_end":33485,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33490,"byte_end":33501,"line_start":214,"line_end":214,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33506,"byte_end":33509,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when finishing the stream.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33514,"byte_end":33579,"line_start":216,"line_end":216,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33879,"byte_end":33888,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"on_finish","qualname":"<Encoder>::on_finish","value":"pub fn on_finish<F: FnMut(io::Result<W>) -> ()>(Self, F) -> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns an encoder that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns an encoder that will finish the stream on drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33734,"byte_end":33793,"line_start":223,"line_end":223,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33798,"byte_end":33801,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `finish()`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":33806,"byte_end":33867,"line_start":225,"line_end":225,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34095,"byte_end":34102,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34033,"byte_end":34083,"line_start":233,"line_end":233,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34359,"byte_end":34366,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34158,"byte_end":34216,"line_start":238,"line_end":238,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34221,"byte_end":34224,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34229,"byte_end":34301,"line_start":240,"line_end":240,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34306,"byte_end":34347,"line_start":241,"line_end":241,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34990,"byte_end":34996,"line_start":258,"line_end":258,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Finishes the stream.","sig":null,"attributes":[{"value":"/ **Required**: Finishes the stream.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34434,"byte_end":34472,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34477,"byte_end":34480,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34485,"byte_end":34558,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/ this method or with [`try_finish(self)`](#method.try_finish).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34563,"byte_end":34628,"line_start":249,"line_end":249,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34633,"byte_end":34636,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer in case you need it.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34641,"byte_end":34695,"line_start":251,"line_end":251,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34700,"byte_end":34703,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ To get back `self` in case an error happened, use `try_finish`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34708,"byte_end":34775,"line_start":253,"line_end":253,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34780,"byte_end":34783,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ **Note**: If you don't want (or can't) call `finish()` manually after","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34788,"byte_end":34861,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/           writing your data, consider using `auto_finish()` to get an","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34866,"byte_end":34939,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/           `AutoFinishEncoder`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":34944,"byte_end":34978,"line_start":257,"line_end":257,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35529,"byte_end":35539,"line_start":272,"line_end":272,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<Encoder>::try_finish","value":"pub fn try_finish(Self) -> Result<W, (Self, io::Error)>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Attempts to finish the stream.","sig":null,"attributes":[{"value":"/ **Required**: Attempts to finish the stream.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35083,"byte_end":35131,"line_start":262,"line_end":262,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35136,"byte_end":35139,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35144,"byte_end":35217,"line_start":264,"line_end":264,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35222,"byte_end":35279,"line_start":265,"line_end":265,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35284,"byte_end":35287,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer if the finish was successful, or the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35292,"byte_end":35362,"line_start":267,"line_end":267,"column_start":5,"column_end":75}},{"value":"/ object plus an error if it wasn't.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35367,"byte_end":35405,"line_start":268,"line_end":268,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35410,"byte_end":35413,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ `write` on this object will panic after `try_finish` has been called,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35418,"byte_end":35491,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ even if it fails.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35496,"byte_end":35517,"line_start":271,"line_end":271,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35977,"byte_end":35986,"line_start":284,"line_end":284,"column_start":12,"column_end":21},"name":"do_finish","qualname":"<Encoder>::do_finish","value":"pub fn do_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attemps to finish the stream.","sig":null,"attributes":[{"value":"/ Attemps to finish the stream.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35784,"byte_end":35817,"line_start":280,"line_end":280,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35822,"byte_end":35825,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35830,"byte_end":35903,"line_start":282,"line_end":282,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":35908,"byte_end":35965,"line_start":283,"line_end":283,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36136,"byte_end":36158,"line_start":289,"line_end":289,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Encoder>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36058,"byte_end":36124,"line_start":288,"line_end":288,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36556,"byte_end":36559,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(W) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36518,"byte_end":36544,"line_start":307,"line_end":307,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36856,"byte_end":36871,"line_start":316,"line_end":316,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(W, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36647,"byte_end":36703,"line_start":312,"line_end":312,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36708,"byte_end":36711,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36716,"byte_end":36771,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36776,"byte_end":36844,"line_start":315,"line_end":315,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37353,"byte_end":37377,"line_start":328,"line_end":328,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(W, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing prepared `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing prepared `DecoderDictionary`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37126,"byte_end":37200,"line_start":324,"line_end":324,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37205,"byte_end":37208,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37213,"byte_end":37268,"line_start":326,"line_end":326,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37273,"byte_end":37341,"line_start":327,"line_end":327,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37739,"byte_end":37746,"line_start":341,"line_end":341,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37677,"byte_end":37727,"line_start":340,"line_end":340,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38003,"byte_end":38010,"line_start":349,"line_end":349,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37802,"byte_end":37860,"line_start":345,"line_end":345,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37865,"byte_end":37868,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37873,"byte_end":37945,"line_start":347,"line_end":347,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37950,"byte_end":37991,"line_start":348,"line_end":348,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38120,"byte_end":38130,"line_start":354,"line_end":354,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Decoder>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner `Write`.\n","sig":null,"attributes":[{"value":"/ Returns the inner `Write`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38078,"byte_end":38108,"line_start":353,"line_end":353,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38268,"byte_end":38290,"line_start":359,"line_end":359,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Decoder>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38190,"byte_end":38256,"line_start":358,"line_end":358,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38534,"byte_end":38544,"line_start":368,"line_end":368,"column_start":12,"column_end":22},"name":"auto_flush","qualname":"<Decoder>::auto_flush","value":"pub fn auto_flush(Self) -> AutoFlushDecoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will flush the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will flush the stream on drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38350,"byte_end":38421,"line_start":363,"line_end":363,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38426,"byte_end":38429,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38434,"byte_end":38445,"line_start":365,"line_end":365,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38450,"byte_end":38453,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when flushing the stream.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38458,"byte_end":38522,"line_start":367,"line_end":367,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38816,"byte_end":38824,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"name":"on_flush","qualname":"<Decoder>::on_flush","value":"pub fn on_flush<F: FnMut(io::Result<()>) -> ()>(Self, F) -> AutoFlushDecoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a decoder that will flush the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a decoder that will flush the stream on drop.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38674,"byte_end":38731,"line_start":374,"line_end":374,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38736,"byte_end":38739,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `flush()`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":38744,"byte_end":38804,"line_start":376,"line_end":376,"column_start":5,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":329},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":39686,"byte_end":39696,"line_start":8,"line_end":8,"column_start":8,"column_end":18},"name":"decode_all","qualname":"::stream::functions::decode_all","value":"pub fn decode_all<R: io::Read>(R) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":39560,"byte_end":39621,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":39622,"byte_end":39625,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The input data must be in the zstd frame format.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":39626,"byte_end":39678,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":331},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":39966,"byte_end":39977,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"copy_decode","qualname":"::stream::functions::copy_decode","value":"pub fn copy_decode<R, W>(R, W) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":39836,"byte_end":39897,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":39898,"byte_end":39901,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Decompressed data will be appended to `destination`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":39902,"byte_end":39958,"line_start":16,"line_end":16,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":334},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40368,"byte_end":40378,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"encode_all","qualname":"::stream::functions::encode_all","value":"pub fn encode_all<R: io::Read>(R, i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40182,"byte_end":40251,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40252,"byte_end":40255,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Result will be in the zstd frame format.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40256,"byte_end":40300,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40301,"byte_end":40304,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40305,"byte_end":40360,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":336},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40739,"byte_end":40750,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"copy_encode","qualname":"::stream::functions::copy_encode","value":"pub fn copy_encode<R, W>(R, W, i32) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40543,"byte_end":40612,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40613,"byte_end":40616,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Compressed data will be appended to `destination`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40617,"byte_end":40671,"line_start":40,"line_end":40,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40672,"byte_end":40675,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/functions.rs","byte_start":40676,"byte_end":40731,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":339},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"zio","qualname":"::stream::zio","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/mod.rs","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":391},{"krate":0,"index":440},{"krate":0,"index":443}],"decl_id":null,"docs":" Wrappers around raw operations implementing `std::io::{Read, Write}`.\n","sig":null,"attributes":[{"value":"/ Wrappers around raw operations implementing `std::io::{Read, Write}`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/mod.rs","byte_start":41040,"byte_end":41113,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":361},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41596,"byte_end":41602,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Reader","qualname":"::stream::zio::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368}],"decl_id":null,"docs":" Implements the [`Read`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Read`] API around an [`Operation`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41329,"byte_end":41385,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41386,"byte_end":41389,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a read-focused API.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41390,"byte_end":41467,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41468,"byte_end":41471,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ It can wrap either a compression or decompression operation, and pulls","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41472,"byte_end":41546,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ input data from a wrapped `Read`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41547,"byte_end":41584,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42082,"byte_end":42085,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R, D>>::new","value":"pub fn new(R, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Reader`.","sig":null,"attributes":[{"value":"/ Creates a new `Reader`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41961,"byte_end":41988,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41993,"byte_end":41996,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ `reader` will be used to pull input data for the given operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42001,"byte_end":42070,"line_start":34,"line_end":34,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42371,"byte_end":42387,"line_start":46,"line_end":46,"column_start":12,"column_end":28},"name":"set_single_frame","qualname":"<Reader<R, D>>::set_single_frame","value":"pub fn set_single_frame(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to stop after the first decoded frame.\n","sig":null,"attributes":[{"value":"/ Sets `self` to stop after the first decoded frame.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42305,"byte_end":42359,"line_start":45,"line_end":45,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42518,"byte_end":42531,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Reader<R, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying operation.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42446,"byte_end":42506,"line_start":50,"line_end":50,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42663,"byte_end":42673,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<Reader<R, D>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying reader.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42594,"byte_end":42651,"line_start":55,"line_end":55,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42794,"byte_end":42800,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"reader","qualname":"<Reader<R, D>>::reader","value":"pub fn reader(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying reader.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42733,"byte_end":42782,"line_start":60,"line_end":60,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42889,"byte_end":42899,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R, D>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner reader.\n","sig":null,"attributes":[{"value":"/ Returns the inner reader.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":42848,"byte_end":42877,"line_start":65,"line_end":65,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":409},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":48828,"byte_end":48834,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Writer","qualname":"::stream::zio::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417}],"decl_id":null,"docs":" Implements the [`Write`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Write`] API around an [`Operation`].","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":48561,"byte_end":48618,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":48619,"byte_end":48622,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a write-focused API.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":48623,"byte_end":48701,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":48702,"byte_end":48705,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It can be used with either compression or decompression, and forwards the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":48706,"byte_end":48783,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ output to a wrapped `Write`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":48784,"byte_end":48816,"line_start":12,"line_end":12,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49279,"byte_end":49282,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W, D>>::new","value":"pub fn new(W, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Writer`.","sig":null,"attributes":[{"value":"/ Creates a new `Writer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49157,"byte_end":49184,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49189,"byte_end":49192,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ All output from the given operation will be forwarded to `writer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49197,"byte_end":49267,"line_start":34,"line_end":34,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49925,"byte_end":49931,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"finish","qualname":"<Writer<W, D>>::finish","value":"pub fn finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Ends the stream.","sig":null,"attributes":[{"value":"/ Ends the stream.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49591,"byte_end":49611,"line_start":49,"line_end":49,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49616,"byte_end":49619,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This *must* be called after all data has been written to finish the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49624,"byte_end":49695,"line_start":51,"line_end":51,"column_start":5,"column_end":76}},{"value":"/ stream.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49700,"byte_end":49711,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49716,"byte_end":49719,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If you forget to call this and just drop the `Writer`, you *will* have","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49724,"byte_end":49798,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ an incomplete output.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49803,"byte_end":49828,"line_start":55,"line_end":55,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49833,"byte_end":49836,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Keep calling it until it returns `Ok(())`, then don't call it again.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49841,"byte_end":49913,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52564,"byte_end":52574,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W, D>>::into_inner","value":"pub fn into_inner(Self) -> (W, D)","parent":null,"children":[],"decl_id":null,"docs":" Return the wrapped `Writer` and `Operation`.","sig":null,"attributes":[{"value":"/ Return the wrapped `Writer` and `Operation`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52387,"byte_end":52435,"line_start":130,"line_end":130,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52440,"byte_end":52443,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Careful: if you call this before calling [`Writer::finish()`], the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52448,"byte_end":52518,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/ output may be incomplete.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52523,"byte_end":52552,"line_start":133,"line_end":133,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52696,"byte_end":52702,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"writer","qualname":"<Writer<W, D>>::writer","value":"pub fn writer(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52642,"byte_end":52684,"line_start":138,"line_end":138,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52812,"byte_end":52822,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"writer_mut","qualname":"<Writer<W, D>>::writer_mut","value":"pub fn writer_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner writer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52750,"byte_end":52800,"line_start":143,"line_end":143,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52939,"byte_end":52948,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"operation","qualname":"<Writer<W, D>>::operation","value":"pub fn operation(&Self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52882,"byte_end":52927,"line_start":148,"line_end":148,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":53064,"byte_end":53077,"line_start":154,"line_end":154,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Writer<W, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":52999,"byte_end":53052,"line_start":153,"line_end":153,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::stream::raw","value":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":476},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":490},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":505},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":523}],"decl_id":null,"docs":" Raw in-memory stream compression/decompression.","sig":null,"attributes":[{"value":"/ Raw in-memory stream compression/decompression.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":56943,"byte_end":56994,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":56995,"byte_end":56998,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines a `Decoder` and an `Encoder` to decode/encode streams","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":56999,"byte_end":57076,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ of data using buffers.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57077,"byte_end":57103,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57104,"byte_end":57107,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ They are mostly thin wrappers around `zstd_safe::{DCtx, CCtx}`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57108,"byte_end":57175,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":476},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57482,"byte_end":57491,"line_start":17,"line_end":17,"column_start":11,"column_end":20},"name":"Operation","qualname":"::stream::raw::Operation","value":"Operation","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":483}],"decl_id":null,"docs":" Represents an abstract compression/decompression operation.","sig":null,"attributes":[{"value":"/ Represents an abstract compression/decompression operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57352,"byte_end":57415,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57416,"byte_end":57419,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This trait covers both `Encoder` and `Decoder`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57420,"byte_end":57471,"line_start":16,"line_end":16,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57711,"byte_end":57714,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"run","qualname":"::stream::raw::Operation::run","value":"pub fn run<C: WriteBuf +\n           ?Sized>(&mut Self, &mut InBuffer, &mut OutBuffer<, C>)\n-> io::Result<usize>","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57498,"byte_end":57543,"line_start":18,"line_end":18,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57548,"byte_end":57551,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Should return a hint for the next input size.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57556,"byte_end":57605,"line_start":20,"line_end":20,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57610,"byte_end":57613,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok(0)`, it may indicate that a frame was just","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57618,"byte_end":57685,"line_start":22,"line_end":22,"column_start":5,"column_end":72}},{"value":"/ finished.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57690,"byte_end":57703,"line_start":23,"line_end":23,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58049,"byte_end":58063,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"run_on_buffers","qualname":"::stream::raw::Operation::run_on_buffers","value":"pub fn run_on_buffers(&mut Self, &[u8], &mut [u8]) -> io::Result<Status>","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57863,"byte_end":57908,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57913,"byte_end":57916,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ This is a comvenience wrapper around `Operation::run` if you don't","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57921,"byte_end":57991,"line_start":32,"line_end":32,"column_start":5,"column_end":75}},{"value":"/ want to deal with `InBuffer`/`OutBuffer`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":57996,"byte_end":58041,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58648,"byte_end":58653,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"flush","qualname":"::stream::raw::Operation::flush","value":"pub fn flush<C: WriteBuf + ?Sized>(&mut Self, &mut OutBuffer<, C>)\n-> io::Result<usize>","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Flushes any internal buffer, if any.","sig":null,"attributes":[{"value":"/ Flushes any internal buffer, if any.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58469,"byte_end":58509,"line_start":51,"line_end":51,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58514,"byte_end":58517,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still in the buffer.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58522,"byte_end":58574,"line_start":53,"line_end":53,"column_start":5,"column_end":57}},{"value":"/ To flush entirely, keep calling until it returns `Ok(0)`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58579,"byte_end":58640,"line_start":54,"line_end":54,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58937,"byte_end":58943,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"reinit","qualname":"::stream::raw::Operation::reinit","value":"pub fn reinit(&mut Self) -> io::Result<()>","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Prepares the operation for a new frame.","sig":null,"attributes":[{"value":"/ Prepares the operation for a new frame.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58813,"byte_end":58856,"line_start":63,"line_end":63,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58861,"byte_end":58864,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This is hopefully cheaper than creating a new operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":58869,"byte_end":58929,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59242,"byte_end":59248,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"finish","qualname":"::stream::raw::Operation::finish","value":"pub fn finish<C: WriteBuf + ?Sized>(&mut Self, &mut OutBuffer<, C>, bool)\n-> io::Result<usize>","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Finishes the operation, writing any footer if necessary.","sig":null,"attributes":[{"value":"/ Finishes the operation, writing any footer if necessary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59001,"byte_end":59061,"line_start":70,"line_end":70,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59066,"byte_end":59069,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still to write.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59074,"byte_end":59121,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59126,"byte_end":59129,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Keep calling this method until it returns `Ok(0)`,","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59134,"byte_end":59188,"line_start":74,"line_end":74,"column_start":5,"column_end":59}},{"value":"/ and then don't ever call this method.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59193,"byte_end":59234,"line_start":75,"line_end":75,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":485},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59541,"byte_end":59545,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"NoOp","qualname":"::stream::raw::NoOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" Dummy operation that just copies its input to the output.\n","sig":null,"attributes":[{"value":"/ Dummy operation that just copies its input to the output.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59468,"byte_end":59529,"line_start":87,"line_end":87,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":490},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60481,"byte_end":60487,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"Status","qualname":"::stream::raw::Status","value":"Status { remaining, bytes_read, bytes_written }","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" Describes the result of an operation.\n","sig":null,"attributes":[{"value":"/ Describes the result of an operation.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60428,"byte_end":60469,"line_start":116,"line_end":116,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":491},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60584,"byte_end":60593,"line_start":121,"line_end":121,"column_start":9,"column_end":18},"name":"remaining","qualname":"::stream::raw::Status::remaining","value":"usize","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Number of bytes expected for next input.","sig":null,"attributes":[{"value":"/ Number of bytes expected for next input.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60494,"byte_end":60538,"line_start":118,"line_end":118,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60543,"byte_end":60546,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This is just a hint.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60551,"byte_end":60575,"line_start":120,"line_end":120,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":492},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60656,"byte_end":60666,"line_start":124,"line_end":124,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::stream::raw::Status::bytes_read","value":"usize","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Number of bytes read from the input.\n","sig":null,"attributes":[{"value":"/ Number of bytes read from the input.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60607,"byte_end":60647,"line_start":123,"line_end":123,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":493},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60731,"byte_end":60744,"line_start":127,"line_end":127,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::stream::raw::Status::bytes_written","value":"usize","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Number of bytes written to the output.\n","sig":null,"attributes":[{"value":"/ Number of bytes written to the output.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60680,"byte_end":60722,"line_start":126,"line_end":126,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":494},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60813,"byte_end":60820,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::raw::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":496}],"decl_id":null,"docs":" An in-memory decoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory decoder for streams of data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60756,"byte_end":60801,"line_start":130,"line_end":130,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60930,"byte_end":60933,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60892,"byte_end":60918,"line_start":136,"line_end":136,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":61080,"byte_end":61095,"line_start":142,"line_end":142,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(&[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder initialized with the given dictionary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":61004,"byte_end":61068,"line_start":141,"line_end":141,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":61455,"byte_end":61479,"line_start":154,"line_end":154,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":61378,"byte_end":61443,"line_start":153,"line_end":153,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":61848,"byte_end":61861,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Decoder>::set_parameter","value":"pub fn set_parameter(&mut Self, DParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a decompression parameter for this decoder.\n","sig":null,"attributes":[{"value":"/ Sets a decompression parameter for this decoder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":61784,"byte_end":61836,"line_start":167,"line_end":167,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":511},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":62882,"byte_end":62889,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::raw::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":513}],"decl_id":null,"docs":" An in-memory encoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory encoder for streams of data.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":62825,"byte_end":62870,"line_start":208,"line_end":208,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":62999,"byte_end":63002,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":62961,"byte_end":62987,"line_start":214,"line_end":214,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":63166,"byte_end":63181,"line_start":220,"line_end":220,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder initialized with the given dictionary.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":63090,"byte_end":63154,"line_start":219,"line_end":219,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":63650,"byte_end":63674,"line_start":237,"line_end":237,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder using an existing `EncoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder using an existing `EncoderDictionary`.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":63574,"byte_end":63638,"line_start":236,"line_end":236,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64041,"byte_end":64054,"line_start":251,"line_end":251,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Encoder>::set_parameter","value":"pub fn set_parameter(&mut Self, CParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a compression parameter for this encoder.\n","sig":null,"attributes":[{"value":"/ Sets a compression parameter for this encoder.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":63979,"byte_end":64029,"line_start":250,"line_end":250,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64459,"byte_end":64479,"line_start":264,"line_end":264,"column_start":12,"column_end":32},"name":"set_pledged_src_size","qualname":"<Encoder>::set_pledged_src_size","value":"pub fn set_pledged_src_size(&mut Self, u64) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of the input expected by zstd.","sig":null,"attributes":[{"value":"/ Sets the size of the input expected by zstd.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64233,"byte_end":64281,"line_start":258,"line_end":258,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64286,"byte_end":64289,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ May affect compression ratio.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64294,"byte_end":64327,"line_start":260,"line_end":260,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64332,"byte_end":64335,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ It is an error to give an incorrect size (an error _will_ be returned when closing the","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64340,"byte_end":64430,"line_start":262,"line_end":262,"column_start":5,"column_end":95}},{"value":"/ stream).","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64435,"byte_end":64447,"line_start":263,"line_end":263,"column_start":5,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":896,"byte_end":919,"line_start":38,"line_end":38,"column_start":8,"column_end":31},"name":"compression_level_range","qualname":"::compression_level_range","value":"pub fn compression_level_range()\n-> std::ops::RangeInclusive<zstd_safe::CompressionLevel>","parent":null,"children":[],"decl_id":null,"docs":" The accepted range of compression levels.\n","sig":null,"attributes":[{"value":"/ The accepted range of compression levels.","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":843,"byte_end":888,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4483,"byte_end":4493,"line_start":16,"line_end":16,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6529,"byte_end":6541,"line_start":17,"line_end":17,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9686,"byte_end":9703,"line_start":30,"line_end":30,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9991,"byte_end":10008,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10672,"byte_end":10689,"line_start":65,"line_end":65,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10960,"byte_end":10977,"line_start":76,"line_end":76,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21835,"byte_end":21842,"line_start":24,"line_end":24,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22101,"byte_end":22108,"line_start":33,"line_end":33,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22685,"byte_end":22692,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":588},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24282,"byte_end":24289,"line_start":102,"line_end":102,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24414,"byte_end":24421,"line_start":108,"line_end":108,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24699,"byte_end":24706,"line_start":117,"line_end":117,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25354,"byte_end":25361,"line_start":138,"line_end":138,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26708,"byte_end":26715,"line_start":184,"line_end":184,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29315,"byte_end":29331,"line_start":77,"line_end":77,"column_start":46,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":30030,"byte_end":30046,"line_start":101,"line_end":101,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":30389,"byte_end":30405,"line_start":115,"line_end":115,"column_start":52,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":30678,"byte_end":30695,"line_start":125,"line_end":125,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31427,"byte_end":31444,"line_start":149,"line_end":149,"column_start":50,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31703,"byte_end":31720,"line_start":158,"line_end":158,"column_start":51,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31964,"byte_end":31971,"line_start":168,"line_end":168,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32833,"byte_end":32840,"line_start":195,"line_end":195,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36282,"byte_end":36289,"line_start":296,"line_end":296,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36492,"byte_end":36499,"line_start":306,"line_end":306,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37105,"byte_end":37112,"line_start":323,"line_end":323,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":39028,"byte_end":39035,"line_start":387,"line_end":387,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41942,"byte_end":41948,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":43572,"byte_end":43578,"line_start":95,"line_end":95,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49100,"byte_end":49106,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":53460,"byte_end":53466,"line_start":171,"line_end":171,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59567,"byte_end":59571,"line_start":90,"line_end":90,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60869,"byte_end":60876,"line_start":135,"line_end":135,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":61360,"byte_end":61367,"line_start":152,"line_end":152,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":62057,"byte_end":62064,"line_start":176,"line_end":176,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":62938,"byte_end":62945,"line_start":213,"line_end":213,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":63556,"byte_end":63563,"line_start":235,"line_end":235,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64716,"byte_end":64723,"line_start":275,"line_end":275,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":695,"byte_end":700,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":710,"byte_end":714,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":59}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/lib.rs","byte_start":724,"byte_end":730,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":107}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15021,"byte_end":15025,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":108}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15035,"byte_end":15040,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":192}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15066,"byte_end":15069,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":339}},{"kind":"Mod","span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/mod.rs","byte_start":15105,"byte_end":15108,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":446}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/compressor.rs","byte_start":4483,"byte_end":4493,"line_start":16,"line_end":16,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":578},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/block/decompressor.rs","byte_start":6529,"byte_end":6541,"line_start":17,"line_end":17,"column_start":6,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9686,"byte_end":9703,"line_start":30,"line_end":30,"column_start":6,"column_end":23},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":9991,"byte_end":10008,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10672,"byte_end":10689,"line_start":65,"line_end":65,"column_start":6,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/dict.rs","byte_start":10960,"byte_end":10977,"line_start":76,"line_end":76,"column_start":10,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":21835,"byte_end":21842,"line_start":24,"line_end":24,"column_start":15,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22101,"byte_end":22108,"line_start":33,"line_end":33,"column_start":18,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":22685,"byte_end":22692,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24282,"byte_end":24289,"line_start":102,"line_end":102,"column_start":27,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":139},"to":{"krate":1,"index":4345}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24414,"byte_end":24421,"line_start":108,"line_end":108,"column_start":15,"column_end":22},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":24699,"byte_end":24706,"line_start":117,"line_end":117,"column_start":18,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":25354,"byte_end":25361,"line_start":138,"line_end":138,"column_start":22,"column_end":29},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/read/mod.rs","byte_start":26708,"byte_end":26715,"line_start":184,"line_end":184,"column_start":27,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":143},"to":{"krate":1,"index":4345}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":29315,"byte_end":29331,"line_start":77,"line_end":77,"column_start":46,"column_end":62},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":30030,"byte_end":30046,"line_start":101,"line_end":101,"column_start":21,"column_end":37},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":30389,"byte_end":30405,"line_start":115,"line_end":115,"column_start":52,"column_end":68},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":231},"to":{"krate":1,"index":4405}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":30678,"byte_end":30695,"line_start":125,"line_end":125,"column_start":45,"column_end":62},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31427,"byte_end":31444,"line_start":149,"line_end":149,"column_start":50,"column_end":67},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":225},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31703,"byte_end":31720,"line_start":158,"line_end":158,"column_start":51,"column_end":68},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":225},"to":{"krate":1,"index":4405}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":31964,"byte_end":31971,"line_start":168,"line_end":168,"column_start":16,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":32833,"byte_end":32840,"line_start":195,"line_end":195,"column_start":20,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36282,"byte_end":36289,"line_start":296,"line_end":296,"column_start":30,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":217},"to":{"krate":1,"index":4405}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":36492,"byte_end":36499,"line_start":306,"line_end":306,"column_start":16,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":37105,"byte_end":37112,"line_start":323,"line_end":323,"column_start":20,"column_end":27},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/write/mod.rs","byte_start":39028,"byte_end":39035,"line_start":387,"line_end":387,"column_start":26,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":221},"to":{"krate":1,"index":4405}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":41942,"byte_end":41948,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/reader.rs","byte_start":43572,"byte_end":43578,"line_start":95,"line_end":95,"column_start":21,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":361},"to":{"krate":1,"index":4345}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":49100,"byte_end":49106,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/zio/writer.rs","byte_start":53460,"byte_end":53466,"line_start":171,"line_end":171,"column_start":22,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":4405}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":59567,"byte_end":59571,"line_start":90,"line_end":90,"column_start":20,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":485},"to":{"krate":0,"index":476}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":60869,"byte_end":60876,"line_start":135,"line_end":135,"column_start":6,"column_end":13},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":61360,"byte_end":61367,"line_start":152,"line_end":152,"column_start":10,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":62057,"byte_end":62064,"line_start":176,"line_end":176,"column_start":20,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":494},"to":{"krate":0,"index":476}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":62938,"byte_end":62945,"line_start":213,"line_end":213,"column_start":6,"column_end":13},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":63556,"byte_end":63563,"line_start":235,"line_end":235,"column_start":10,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zfaizal/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.2+zstd.1.5.1/src/stream/raw.rs","byte_start":64716,"byte_end":64723,"line_start":275,"line_end":275,"column_start":24,"column_end":31},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":511},"to":{"krate":0,"index":476}}]}